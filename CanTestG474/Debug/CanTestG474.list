
CanTestG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080083a0  080083a0  000093a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084cc  080084cc  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080084cc  080084cc  000094cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084d4  080084d4  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080084dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  2000006c  08008548  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08008548  0000ac78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f471  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db6  00000000  00000000  0002950d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c9  00000000  00000000  0002ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a4  00000000  00000000  00030261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7d2  00000000  00000000  00035405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d248  00000000  00000000  00051bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ee1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa8  00000000  00000000  0015ee64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016690c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008388 	.word	0x08008388

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08008388 	.word	0x08008388

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_write+0x24>)
 80005c6:	f003 f921 	bl	800380c <HAL_UART_Transmit>
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ec 	.word	0x200000ec

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fc67 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f826 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f91c 	bl	8000820 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005e8:	f000 f86e 	bl	80006c8 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8cc 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f003 fffc 	bl	80045ec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueRxCAN */
  queueRxCANHandle = osMessageQueueNew (8, sizeof(CanMsg), &queueRxCAN_attributes);
 80005f4:	4a09      	ldr	r2, [pc, #36]	@ (800061c <main+0x44>)
 80005f6:	2109      	movs	r1, #9
 80005f8:	2008      	movs	r0, #8
 80005fa:	f004 f8d3 	bl	80047a4 <osMessageQueueNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <main+0x48>)
 8000602:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <main+0x4c>)
 8000606:	2100      	movs	r1, #0
 8000608:	4807      	ldr	r0, [pc, #28]	@ (8000628 <main+0x50>)
 800060a:	f004 f839 	bl	8004680 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <main+0x54>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f004 f80e 	bl	8004634 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x40>
 800061c:	08008430 	.word	0x08008430
 8000620:	20000184 	.word	0x20000184
 8000624:	0800840c 	.word	0x0800840c
 8000628:	08000929 	.word	0x08000929
 800062c:	20000180 	.word	0x20000180

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2238      	movs	r2, #56	@ 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 f8fc 	bl	800783c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000652:	2000      	movs	r0, #0
 8000654:	f001 fcdc 	bl	8002010 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000672:	2355      	movs	r3, #85	@ 0x55
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fd76 	bl	8002178 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000692:	f000 f997 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f874 	bl	800279c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ba:	f000 f983 	bl	80009c4 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000784 <MX_FDCAN1_Init+0xbc>)
 80006d2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 283;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 80006fa:	f240 121b 	movw	r2, #283	@ 0x11b
 80006fe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000702:	2201      	movs	r2, #1
 8000704:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 800070e:	2201      	movs	r2, #1
 8000710:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000712:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000714:	2201      	movs	r2, #1
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 800071a:	2201      	movs	r2, #1
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000720:	2201      	movs	r2, #1
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000726:	2201      	movs	r2, #1
 8000728:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000732:	2200      	movs	r2, #0
 8000734:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800073c:	4810      	ldr	r0, [pc, #64]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 800073e:	f000 fcef 	bl	8001120 <HAL_FDCAN_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8000748:	f000 f93c 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID;
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000758:	2301      	movs	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x010;
 8000760:	2310      	movs	r3, #16
 8000762:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_FDCAN1_Init+0xb8>)
 800076a:	f000 fe33 	bl	80013d4 <HAL_FDCAN_ConfigFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_FDCAN1_Init+0xb0>
  {
	  Error_Handler();
 8000774:	f000 f926 	bl	80009c4 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000088 	.word	0x20000088
 8000784:	40006400 	.word	0x40006400

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	@ (800081c <MX_USART2_UART_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007d2:	f002 ffcb 	bl	800376c <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f8f2 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007e4:	f003 fdf4 	bl	80043d0 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f8e9 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 80007f6:	f003 fe29 	bl	800444c <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f8e0 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_USART2_UART_Init+0x90>)
 8000806:	f003 fdaa 	bl	800435e <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f8d8 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000ec 	.word	0x200000ec
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a23      	ldr	r2, [pc, #140]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a1d      	ldr	r2, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_GPIO_Init+0xa8>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f001 fb85 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008a2:	2320      	movs	r3, #32
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f001 f9f4 	bl	8001ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 4 */



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b092      	sub	sp, #72	@ 0x48
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d01a      	beq.n	8000916 <HAL_FDCAN_RxFifo0Callback+0x4a>
	{
		FDCAN_RxHeaderTypeDef rxHeader;
		uint8_t rxData[8];

		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 80008e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008e4:	f107 020c 	add.w	r2, r7, #12
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80008ec:	f000 fdf4 	bl	80014d8 <HAL_FDCAN_GetRxMessage>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10f      	bne.n	8000916 <HAL_FDCAN_RxFifo0Callback+0x4a>
		{
			CanMsg msg;
			strncpy((char*)(msg.data), (char*)rxData, 8);
 80008f6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80008fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008fe:	2208      	movs	r2, #8
 8000900:	4618      	mov	r0, r3
 8000902:	f006 ffa3 	bl	800784c <strncpy>
			osMessageQueuePut(queueRxCANHandle, &msg, 0, 0);
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800090e:	2300      	movs	r3, #0
 8000910:	2200      	movs	r2, #0
 8000912:	f003 ffbb 	bl	800488c <osMessageQueuePut>
		}
	}
}
 8000916:	bf00      	nop
 8000918:	3748      	adds	r7, #72	@ 0x48
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000088 	.word	0x20000088
 8000924:	20000184 	.word	0x20000184

08000928 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000930:	4817      	ldr	r0, [pc, #92]	@ (8000990 <StartDefaultTask+0x68>)
 8000932:	f000 fda9 	bl	8001488 <HAL_FDCAN_Start>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <StartDefaultTask+0x18>
	{
		Error_Handler();
 800093c:	f000 f842 	bl	80009c4 <Error_Handler>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4812      	ldr	r0, [pc, #72]	@ (8000990 <StartDefaultTask+0x68>)
 8000946:	f000 fecf 	bl	80016e8 <HAL_FDCAN_ActivateNotification>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <StartDefaultTask+0x2c>
	{
		Error_Handler();
 8000950:	f000 f838 	bl	80009c4 <Error_Handler>
	}

	CanMsg msg;

	printf("CANFD rx interrupt example CMSIS OS2\r\n");
 8000954:	480f      	ldr	r0, [pc, #60]	@ (8000994 <StartDefaultTask+0x6c>)
 8000956:	f006 fe91 	bl	800767c <puts>

	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet(queueRxCANHandle, &msg, NULL, osWaitForever);
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <StartDefaultTask+0x70>)
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	f107 010c 	add.w	r1, r7, #12
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	2200      	movs	r2, #0
 8000968:	f003 fff0 	bl	800494c <osMessageQueueGet>
		msg.data[8] = '\0';
 800096c:	2300      	movs	r3, #0
 800096e:	753b      	strb	r3, [r7, #20]
		printf("got message: %s\r\n", msg.data);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4809      	ldr	r0, [pc, #36]	@ (800099c <StartDefaultTask+0x74>)
 8000978:	f006 fe18 	bl	80075ac <iprintf>
		memset(msg.data, '\0', 8);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2208      	movs	r2, #8
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f006 ff59 	bl	800783c <memset>
		osMessageQueueGet(queueRxCANHandle, &msg, NULL, osWaitForever);
 800098a:	bf00      	nop
 800098c:	e7e5      	b.n	800095a <StartDefaultTask+0x32>
 800098e:	bf00      	nop
 8000990:	20000088 	.word	0x20000088
 8000994:	080083b8 	.word	0x080083b8
 8000998:	20000184 	.word	0x20000184
 800099c:	080083e0 	.word	0x080083e0

080009a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b2:	f000 fa95 	bl	8000ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40001000 	.word	0x40001000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009cc:	2120      	movs	r1, #32
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d2:	f001 fb03 	bl	8001fdc <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80009d6:	2064      	movs	r0, #100	@ 0x64
 80009d8:	f000 faa0 	bl	8000f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009dc:	bf00      	nop
 80009de:	e7f5      	b.n	80009cc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_MspInit+0x50>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ea:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <HAL_MspInit+0x50>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x50>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_MspInit+0x50>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a02:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <HAL_MspInit+0x50>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_MspInit+0x50>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	f06f 0001 	mvn.w	r0, #1
 8000a1e:	f000 fb57 	bl	80010d0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a22:	f001 fb99 	bl	8002158 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09e      	sub	sp, #120	@ 0x78
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2254      	movs	r2, #84	@ 0x54
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 fef1 	bl	800783c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a31      	ldr	r2, [pc, #196]	@ (8000b24 <HAL_FDCAN_MspInit+0xf0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d15b      	bne.n	8000b1c <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 f8df 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a80:	f7ff ffa0 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a84:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <HAL_FDCAN_MspInit+0xf4>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a88:	4a27      	ldr	r2, [pc, #156]	@ (8000b28 <HAL_FDCAN_MspInit+0xf4>)
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a90:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <HAL_FDCAN_MspInit+0xf4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_FDCAN_MspInit+0xf4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <HAL_FDCAN_MspInit+0xf4>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <HAL_FDCAN_MspInit+0xf4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ab4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ab8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ac6:	2309      	movs	r3, #9
 8000ac8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f001 f8e8 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aea:	2309      	movs	r3, #9
 8000aec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f001 f8d6 	bl	8001ca8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2105      	movs	r1, #5
 8000b00:	2015      	movs	r0, #21
 8000b02:	f000 fae5 	bl	80010d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b06:	2015      	movs	r0, #21
 8000b08:	f000 fafc 	bl	8001104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2105      	movs	r1, #5
 8000b10:	2016      	movs	r0, #22
 8000b12:	f000 fadd 	bl	80010d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000b16:	2016      	movs	r0, #22
 8000b18:	f000 faf4 	bl	8001104 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3778      	adds	r7, #120	@ 0x78
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40006400 	.word	0x40006400
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09e      	sub	sp, #120	@ 0x78
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2254      	movs	r2, #84	@ 0x54
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 fe75 	bl	800783c <memset>
  if(huart->Instance==USART2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd4 <HAL_UART_MspInit+0xa8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d136      	bne.n	8000bca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 f865 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f7ff ff26 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_UART_MspInit+0xac>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	4a16      	ldr	r2, [pc, #88]	@ (8000bd8 <HAL_UART_MspInit+0xac>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_UART_MspInit+0xac>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_UART_MspInit+0xac>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_UART_MspInit+0xac>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_UART_MspInit+0xac>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc6:	f001 f86f 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bca:	bf00      	nop
 8000bcc:	3778      	adds	r7, #120	@ 0x78
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca0 <HAL_InitTick+0xc4>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca0 <HAL_InitTick+0xc4>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf8:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <HAL_InitTick+0xc4>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 ff9a 	bl	8002b48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c14:	f001 ff6c 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8000c18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <HAL_InitTick+0xc8>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3b01      	subs	r3, #1
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c2a:	4a20      	ldr	r2, [pc, #128]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c4a:	f002 fa43 	bl	80030d4 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d11b      	bne.n	8000c94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c5c:	4812      	ldr	r0, [pc, #72]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c5e:	f002 fa9b 	bl	8003198 <HAL_TIM_Base_Start_IT>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c70:	2036      	movs	r0, #54	@ 0x36
 8000c72:	f000 fa47 	bl	8001104 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d808      	bhi.n	8000c8e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2036      	movs	r0, #54	@ 0x36
 8000c82:	f000 fa25 	bl	80010d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <HAL_InitTick+0xd4>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e002      	b.n	8000c94 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	20000188 	.word	0x20000188
 8000cac:	40001000 	.word	0x40001000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <FDCAN1_IT0_IRQHandler+0x10>)
 8000cf2:	f000 fddf 	bl	80018b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000088 	.word	0x20000088

08000d00 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <FDCAN1_IT1_IRQHandler+0x10>)
 8000d06:	f000 fdd5 	bl	80018b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000088 	.word	0x20000088

08000d14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <TIM6_DAC_IRQHandler+0x10>)
 8000d1a:	f002 fab5 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000188 	.word	0x20000188

08000d28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
  }

  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f006 fd80 	bl	8007900 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200001d4 	.word	0x200001d4
 8000e34:	20001c78 	.word	0x20001c78

08000e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e5c:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f006 fd3f 	bl	800790c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fba3 	bl	80005d8 <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   r0, =_estack
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ea0:	080084dc 	.word	0x080084dc
  ldr r2, =_sbss
 8000ea4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ea8:	20001c78 	.word	0x20001c78

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f8fe 	bl	80010ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f7ff fe8c 	bl	8000bdc <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fd86 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_IncTick+0x20>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a03      	ldr	r2, [pc, #12]	@ (8000efc <HAL_IncTick+0x1c>)
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	200001d8 	.word	0x200001d8
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001d8 	.word	0x200001d8

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f34:	d004      	beq.n	8000f40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_Delay+0x40>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f40:	bf00      	nop
 8000f42:	f7ff ffdf 	bl	8000f04 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d8f7      	bhi.n	8000f42 <HAL_Delay+0x26>
  {
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff4c 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010de:	f7ff ff63 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff ffb3 	bl	8001054 <NVIC_EncodePriority>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff82 	bl	8001000 <__NVIC_SetPriority>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff56 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e147      	b.n	80013c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fc74 	bl	8000a34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0210 	bic.w	r2, r2, #16
 800115a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff fed2 	bl	8000f04 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001162:	e012      	b.n	800118a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001164:	f7ff fece 	bl	8000f04 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d90b      	bls.n	800118a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e11b      	b.n	80013c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b08      	cmp	r3, #8
 8001196:	d0e5      	beq.n	8001164 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a8:	f7ff feac 	bl	8000f04 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011ae:	e012      	b.n	80011d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011b0:	f7ff fea8 	bl	8000f04 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b0a      	cmp	r3, #10
 80011bc:	d90b      	bls.n	80011d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0f5      	b.n	80013c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0e5      	beq.n	80011b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0202 	orr.w	r2, r2, #2
 80011f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a74      	ldr	r2, [pc, #464]	@ (80013cc <HAL_FDCAN_Init+0x2ac>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d103      	bne.n	8001206 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011fe:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <HAL_FDCAN_Init+0x2b0>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7c1b      	ldrb	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699a      	ldr	r2, [r3, #24]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800121c:	619a      	str	r2, [r3, #24]
 800121e:	e007      	b.n	8001230 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800122e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7c5b      	ldrb	r3, [r3, #17]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	e007      	b.n	800125a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001258:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7c9b      	ldrb	r3, [r3, #18]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001270:	619a      	str	r2, [r3, #24]
 8001272:	e007      	b.n	8001284 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001282:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80012a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0210 	bic.w	r2, r2, #16
 80012b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d108      	bne.n	80012d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0204 	orr.w	r2, r2, #4
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	e02c      	b.n	800132e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d028      	beq.n	800132e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d01c      	beq.n	800131e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0210 	orr.w	r2, r2, #16
 8001302:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d110      	bne.n	800132e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	e007      	b.n	800132e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3b01      	subs	r3, #1
 8001334:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	3b01      	subs	r3, #1
 800133c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800133e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001346:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	3b01      	subs	r3, #1
 8001350:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001356:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001358:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001362:	d115      	bne.n	8001390 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136e:	3b01      	subs	r3, #1
 8001370:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001372:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	3b01      	subs	r3, #1
 800137a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800137c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	3b01      	subs	r3, #1
 8001386:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800138c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800138e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fc12 	bl	8001bd0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40006400 	.word	0x40006400
 80013d0:	40006500 	.word	0x40006500

080013d4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013e4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d002      	beq.n	80013f2 <HAL_FDCAN_ConfigFilter+0x1e>
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d13d      	bne.n	800146e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d119      	bne.n	800142e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001406:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800140e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e01d      	b.n	800146a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	075a      	lsls	r2, r3, #29
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	079a      	lsls	r2, r3, #30
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3304      	adds	r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e006      	b.n	800147c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f043 0202 	orr.w	r2, r3, #2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
  }
}
 800147c:	4618      	mov	r0, r3
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d110      	bne.n	80014be <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e006      	b.n	80014cc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c2:	f043 0204 	orr.w	r2, r3, #4
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014d8:	b480      	push	{r7}
 80014da:	b08b      	sub	sp, #44	@ 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014f0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014f2:	7efb      	ldrb	r3, [r7, #27]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	f040 80e8 	bne.w	80016ca <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b40      	cmp	r3, #64	@ 0x40
 80014fe:	d137      	bne.n	8001570 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	2b00      	cmp	r3, #0
 800150e:	d107      	bne.n	8001520 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0db      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001528:	0e1b      	lsrs	r3, r3, #24
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10a      	bne.n	8001548 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001544:	2301      	movs	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
 800156e:	e036      	b.n	80015de <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001584:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0a3      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001598:	0e1b      	lsrs	r3, r3, #24
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10a      	bne.n	80015b8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0c9b      	lsrs	r3, r3, #18
 80015f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e005      	b.n	800160e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	3304      	adds	r3, #4
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	f003 020f 	and.w	r2, r3, #15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0e1b      	lsrs	r3, r3, #24
 8001662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0fda      	lsrs	r2, r3, #31
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	3304      	adds	r3, #4
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
 8001682:	e00a      	b.n	800169a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	441a      	add	r2, r3
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	440b      	add	r3, r1
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	3301      	adds	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	461a      	mov	r2, r3
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d3ec      	bcc.n	8001684 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b40      	cmp	r3, #64	@ 0x40
 80016ae:	d105      	bne.n	80016bc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80016ba:	e004      	b.n	80016c6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e006      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	f043 0208 	orr.w	r2, r3, #8
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	372c      	adds	r7, #44	@ 0x2c
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	08008460 	.word	0x08008460

080016e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016fa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d003      	beq.n	800170a <HAL_FDCAN_ActivateNotification+0x22>
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f040 80c8 	bne.w	800189a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03b      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d031      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d027      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01d      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d013      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00c      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d13b      	bne.n	800183a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d131      	bne.n	800183a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d127      	bne.n	800183a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11d      	bne.n	800183a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d113      	bne.n	800183a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00c      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0202 	orr.w	r2, r2, #2
 8001848:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	430a      	orrs	r2, r1
 8001882:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	430a      	orrs	r2, r1
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e006      	b.n	80018a8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	@ 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d0:	4013      	ands	r3, r2
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018e8:	4013      	ands	r3, r2
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001900:	4013      	ands	r3, r2
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800190e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001916:	6a3a      	ldr	r2, [r7, #32]
 8001918:	4013      	ands	r3, r2
 800191a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001922:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001926:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001942:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2240      	movs	r2, #64	@ 0x40
 800195e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f916 	bl	8001b92 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d014      	beq.n	80019a4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001982:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800199c:	6939      	ldr	r1, [r7, #16]
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8d8 	bl	8001b54 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8a2 	bl	8001afe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe ff7e 	bl	80008cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f897 	bl	8001b14 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00c      	beq.n	8001a0a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f890 	bl	8001b2a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d018      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d013      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a26:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2280      	movs	r2, #128	@ 0x80
 8001a3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f87c 	bl	8001b3e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00c      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f880 	bl	8001b6a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a86:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f878 	bl	8001b7e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00f      	beq.n	8001ab8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aaa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ac6:	69f9      	ldr	r1, [r7, #28]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f876 	bl	8001bba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f858 	bl	8001ba6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001af6:	bf00      	nop
 8001af8:	3730      	adds	r7, #48	@ 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001bd8:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001bda:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d103      	bne.n	8001bee <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bec:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d103      	bne.n	8001c00 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001bfe:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c16:	041a      	lsls	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c34:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3c:	061a      	lsls	r2, r3, #24
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e005      	b.n	8001c82 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3f3      	bcc.n	8001c76 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	4000a400 	.word	0x4000a400
 8001ca0:	40006800 	.word	0x40006800
 8001ca4:	40006c00 	.word	0x40006c00

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cb6:	e15a      	b.n	8001f6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 814c 	beq.w	8001f68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d005      	beq.n	8001ce8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d130      	bne.n	8001d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1e:	2201      	movs	r2, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f003 0201 	and.w	r2, r3, #1
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d017      	beq.n	8001d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d123      	bne.n	8001dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	6939      	ldr	r1, [r7, #16]
 8001dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0203 	and.w	r2, r3, #3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a6 	beq.w	8001f68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e20:	4a5a      	ldr	r2, [pc, #360]	@ (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e28:	4b58      	ldr	r3, [pc, #352]	@ (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e34:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e5e:	d01f      	beq.n	8001ea0 <HAL_GPIO_Init+0x1f8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a4c      	ldr	r2, [pc, #304]	@ (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d019      	beq.n	8001e9c <HAL_GPIO_Init+0x1f4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1f0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a4a      	ldr	r2, [pc, #296]	@ (8001f9c <HAL_GPIO_Init+0x2f4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a49      	ldr	r2, [pc, #292]	@ (8001fa0 <HAL_GPIO_Init+0x2f8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1e8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a48      	ldr	r2, [pc, #288]	@ (8001fa4 <HAL_GPIO_Init+0x2fc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1e4>
 8001e88:	2305      	movs	r3, #5
 8001e8a:	e00a      	b.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	e008      	b.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e006      	b.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e94:	2303      	movs	r3, #3
 8001e96:	e004      	b.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e002      	b.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb2:	4937      	ldr	r1, [pc, #220]	@ (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec0:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ee4:	4a30      	ldr	r2, [pc, #192]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eea:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f0e:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f14:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f38:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f62:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_GPIO_Init+0x300>)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f47f ae9d 	bne.w	8001cb8 <HAL_GPIO_Init+0x10>
  }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010000 	.word	0x40010000
 8001f94:	48000400 	.word	0x48000400
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	48000c00 	.word	0x48000c00
 8001fa0:	48001000 	.word	0x48001000
 8001fa4:	48001400 	.word	0x48001400
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43d9      	mvns	r1, r3
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d141      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800201e:	4b4b      	ldr	r3, [pc, #300]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202a:	d131      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800202c:	4b47      	ldr	r3, [pc, #284]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002032:	4a46      	ldr	r2, [pc, #280]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203c:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002044:	4a41      	ldr	r2, [pc, #260]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800204c:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2232      	movs	r2, #50	@ 0x32
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	4a3f      	ldr	r2, [pc, #252]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	0c9b      	lsrs	r3, r3, #18
 800205e:	3301      	adds	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002062:	e002      	b.n	800206a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3b01      	subs	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002076:	d102      	bne.n	800207e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f2      	bne.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208a:	d158      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e057      	b.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002096:	4a2d      	ldr	r2, [pc, #180]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800209c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020a0:	e04d      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a8:	d141      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020aa:	4b28      	ldr	r3, [pc, #160]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d131      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b8:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020be:	4a23      	ldr	r2, [pc, #140]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c8:	4b20      	ldr	r3, [pc, #128]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020d0:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2232      	movs	r2, #50	@ 0x32
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	3301      	adds	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ee:	e002      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d102      	bne.n	800210a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f2      	bne.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002116:	d112      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e011      	b.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800212c:	e007      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800213c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40007000 	.word	0x40007000
 8002150:	20000000 	.word	0x20000000
 8002154:	431bde83 	.word	0x431bde83

08002158 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002166:	6093      	str	r3, [r2, #8]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40007000 	.word	0x40007000

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e2fe      	b.n	8002788 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d075      	beq.n	8002282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002196:	4b97      	ldr	r3, [pc, #604]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a0:	4b94      	ldr	r3, [pc, #592]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3e>
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_OscConfig+0x44>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4b8d      	ldr	r3, [pc, #564]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05b      	beq.n	8002280 <HAL_RCC_OscConfig+0x108>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d157      	bne.n	8002280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e2d9      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x74>
 80021de:	4b85      	ldr	r3, [pc, #532]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a84      	ldr	r2, [pc, #528]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b7f      	ldr	r3, [pc, #508]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7e      	ldr	r2, [pc, #504]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b7c      	ldr	r3, [pc, #496]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7b      	ldr	r2, [pc, #492]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 8002210:	4b78      	ldr	r3, [pc, #480]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a77      	ldr	r2, [pc, #476]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b75      	ldr	r3, [pc, #468]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a74      	ldr	r2, [pc, #464]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fe68 	bl	8000f04 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fe64 	bl	8000f04 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e29e      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224a:	4b6a      	ldr	r3, [pc, #424]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xc0>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fe54 	bl	8000f04 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe fe50 	bl	8000f04 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e28a      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002272:	4b60      	ldr	r3, [pc, #384]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0xe8>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d075      	beq.n	800237a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228e:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002298:	4b56      	ldr	r3, [pc, #344]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_OscConfig+0x136>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_OscConfig+0x13c>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11f      	bne.n	80022f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	4b4f      	ldr	r3, [pc, #316]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_OscConfig+0x154>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e25d      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b49      	ldr	r3, [pc, #292]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	4946      	ldr	r1, [pc, #280]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022e0:	4b45      	ldr	r3, [pc, #276]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fc79 	bl	8000bdc <HAL_InitTick>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d043      	beq.n	8002378 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e249      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d023      	beq.n	8002344 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b3d      	ldr	r3, [pc, #244]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a3c      	ldr	r2, [pc, #240]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fdfc 	bl	8000f04 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fdf8 	bl	8000f04 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e232      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002322:	4b34      	ldr	r3, [pc, #208]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	492d      	ldr	r1, [pc, #180]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
 8002342:	e01a      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002344:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2a      	ldr	r2, [pc, #168]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 800234a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800234e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fdd8 	bl	8000f04 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002358:	f7fe fdd4 	bl	8000f04 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e20e      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236a:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x1e0>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d041      	beq.n	800240a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002394:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe fdb1 	bl	8000f04 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a6:	f7fe fdad 	bl	8000f04 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1e7      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b8:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ef      	beq.n	80023a6 <HAL_RCC_OscConfig+0x22e>
 80023c6:	e020      	b.n	800240a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c8:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ce:	4a09      	ldr	r2, [pc, #36]	@ (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fd94 	bl	8000f04 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023de:	e00d      	b.n	80023fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fd90 	bl	8000f04 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d906      	bls.n	80023fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1ca      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ea      	bne.n	80023e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80a6 	beq.w	8002564 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800241c:	4b84      	ldr	r3, [pc, #528]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_OscConfig+0x2b4>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x2b6>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b7f      	ldr	r3, [pc, #508]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	4a7e      	ldr	r2, [pc, #504]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	@ 0x58
 800243e:	4b7c      	ldr	r3, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b79      	ldr	r3, [pc, #484]	@ (8002634 <HAL_RCC_OscConfig+0x4bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245a:	4b76      	ldr	r3, [pc, #472]	@ (8002634 <HAL_RCC_OscConfig+0x4bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a75      	ldr	r2, [pc, #468]	@ (8002634 <HAL_RCC_OscConfig+0x4bc>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7fe fd4d 	bl	8000f04 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe fd49 	bl	8000f04 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e183      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002480:	4b6c      	ldr	r3, [pc, #432]	@ (8002634 <HAL_RCC_OscConfig+0x4bc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d108      	bne.n	80024a6 <HAL_RCC_OscConfig+0x32e>
 8002494:	4b66      	ldr	r3, [pc, #408]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249a:	4a65      	ldr	r2, [pc, #404]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a4:	e024      	b.n	80024f0 <HAL_RCC_OscConfig+0x378>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d110      	bne.n	80024d0 <HAL_RCC_OscConfig+0x358>
 80024ae:	4b60      	ldr	r3, [pc, #384]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024be:	4b5c      	ldr	r3, [pc, #368]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ce:	e00f      	b.n	80024f0 <HAL_RCC_OscConfig+0x378>
 80024d0:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d6:	4a56      	ldr	r2, [pc, #344]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e6:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d016      	beq.n	8002526 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fd04 	bl	8000f04 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fd00 	bl	8000f04 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e138      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002516:	4b46      	ldr	r3, [pc, #280]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ed      	beq.n	8002500 <HAL_RCC_OscConfig+0x388>
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fced 	bl	8000f04 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fce9 	bl	8000f04 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e121      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002544:	4b3a      	ldr	r3, [pc, #232]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ed      	bne.n	800252e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a34      	ldr	r2, [pc, #208]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03c      	beq.n	80025ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002578:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 800257a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800257e:	4a2c      	ldr	r2, [pc, #176]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fcbc 	bl	8000f04 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002590:	f7fe fcb8 	bl	8000f04 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0f2      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025a2:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <HAL_RCC_OscConfig+0x418>
 80025b0:	e01b      	b.n	80025ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc9f 	bl	8000f04 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ca:	f7fe fc9b 	bl	8000f04 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0d5      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80025de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ef      	bne.n	80025ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80c9 	beq.w	8002786 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	f000 8083 	beq.w	8002708 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d15e      	bne.n	80026c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a08      	ldr	r2, [pc, #32]	@ (8002630 <HAL_RCC_OscConfig+0x4b8>)
 8002610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fc75 	bl	8000f04 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261c:	e00c      	b.n	8002638 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe fc71 	bl	8000f04 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d905      	bls.n	8002638 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0ab      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	4b55      	ldr	r3, [pc, #340]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ec      	bne.n	800261e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	4b52      	ldr	r3, [pc, #328]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <HAL_RCC_OscConfig+0x61c>)
 800264a:	4013      	ands	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6a11      	ldr	r1, [r2, #32]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002654:	3a01      	subs	r2, #1
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	4311      	orrs	r1, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800265e:	0212      	lsls	r2, r2, #8
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002666:	0852      	lsrs	r2, r2, #1
 8002668:	3a01      	subs	r2, #1
 800266a:	0552      	lsls	r2, r2, #21
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002672:	0852      	lsrs	r2, r2, #1
 8002674:	3a01      	subs	r2, #1
 8002676:	0652      	lsls	r2, r2, #25
 8002678:	4311      	orrs	r1, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800267e:	06d2      	lsls	r2, r2, #27
 8002680:	430a      	orrs	r2, r1
 8002682:	4943      	ldr	r1, [pc, #268]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 8002684:	4313      	orrs	r3, r2
 8002686:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b41      	ldr	r3, [pc, #260]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a40      	ldr	r2, [pc, #256]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 800268e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002692:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002694:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a3d      	ldr	r2, [pc, #244]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800269e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fc30 	bl	8000f04 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fc2c 	bl	8000f04 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e066      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	4b35      	ldr	r3, [pc, #212]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x530>
 80026c6:	e05e      	b.n	8002786 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b31      	ldr	r3, [pc, #196]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a30      	ldr	r2, [pc, #192]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc16 	bl	8000f04 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fc12 	bl	8000f04 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e04c      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	4b28      	ldr	r3, [pc, #160]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026fa:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4924      	ldr	r1, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 8002700:	4b25      	ldr	r3, [pc, #148]	@ (8002798 <HAL_RCC_OscConfig+0x620>)
 8002702:	4013      	ands	r3, r2
 8002704:	60cb      	str	r3, [r1, #12]
 8002706:	e03e      	b.n	8002786 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e039      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002714:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <HAL_RCC_OscConfig+0x618>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	429a      	cmp	r2, r3
 8002726:	d12c      	bne.n	8002782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	3b01      	subs	r3, #1
 8002734:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d123      	bne.n	8002782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d11b      	bne.n	8002782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d113      	bne.n	8002782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d109      	bne.n	8002782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	3b01      	subs	r3, #1
 800277c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	019f800c 	.word	0x019f800c
 8002798:	feeefffc 	.word	0xfeeefffc

0800279c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e11e      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b91      	ldr	r3, [pc, #580]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b8e      	ldr	r3, [pc, #568]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 020f 	bic.w	r2, r3, #15
 80027ca:	498c      	ldr	r1, [pc, #560]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b8a      	ldr	r3, [pc, #552]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e106      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d073      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d129      	bne.n	800284c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f8:	4b81      	ldr	r3, [pc, #516]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0f4      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002808:	f000 f9d0 	bl	8002bac <RCC_GetSysClockFreqFromPLLSource>
 800280c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4a7c      	ldr	r2, [pc, #496]	@ (8002a04 <HAL_RCC_ClockConfig+0x268>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d93f      	bls.n	8002896 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002816:	4b7a      	ldr	r3, [pc, #488]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800282a:	2b00      	cmp	r3, #0
 800282c:	d033      	beq.n	8002896 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002832:	2b00      	cmp	r3, #0
 8002834:	d12f      	bne.n	8002896 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002836:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800283e:	4a70      	ldr	r2, [pc, #448]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e024      	b.n	8002896 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d107      	bne.n	8002864 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002854:	4b6a      	ldr	r3, [pc, #424]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0c6      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002864:	4b66      	ldr	r3, [pc, #408]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0be      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002874:	f000 f8ce 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8002878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4a61      	ldr	r2, [pc, #388]	@ (8002a04 <HAL_RCC_ClockConfig+0x268>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d909      	bls.n	8002896 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002882:	4b5f      	ldr	r3, [pc, #380]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800288a:	4a5d      	ldr	r2, [pc, #372]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 800288c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002890:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b5a      	ldr	r3, [pc, #360]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4957      	ldr	r1, [pc, #348]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a8:	f7fe fb2c 	bl	8000f04 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe fb28 	bl	8000f04 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e095      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b43      	ldr	r3, [pc, #268]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a42      	ldr	r2, [pc, #264]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80028f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002908:	4b3d      	ldr	r3, [pc, #244]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002910:	4a3b      	ldr	r2, [pc, #236]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b39      	ldr	r3, [pc, #228]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4936      	ldr	r1, [pc, #216]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
 800292a:	e008      	b.n	800293e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b80      	cmp	r3, #128	@ 0x80
 8002930:	d105      	bne.n	800293e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002932:	4b33      	ldr	r3, [pc, #204]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a32      	ldr	r2, [pc, #200]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800293c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d21d      	bcs.n	8002988 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 020f 	bic.w	r2, r3, #15
 8002954:	4929      	ldr	r1, [pc, #164]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800295c:	f7fe fad2 	bl	8000f04 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe face 	bl	8000f04 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e03b      	b.n	80029f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_RCC_ClockConfig+0x260>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d1ed      	bne.n	8002964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4917      	ldr	r1, [pc, #92]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	490f      	ldr	r1, [pc, #60]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c6:	f000 f825 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_RCC_ClockConfig+0x264>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <HAL_RCC_ClockConfig+0x26c>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <HAL_RCC_ClockConfig+0x270>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_RCC_ClockConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f8f6 	bl	8000bdc <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	04c4b400 	.word	0x04c4b400
 8002a08:	08008448 	.word	0x08008448
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e047      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a38:	4b26      	ldr	r3, [pc, #152]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e03e      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a3e:	4b23      	ldr	r3, [pc, #140]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d136      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a16      	ldr	r2, [pc, #88]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a72:	68d2      	ldr	r2, [r2, #12]
 8002a74:	0a12      	lsrs	r2, r2, #8
 8002a76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
      break;
 8002a80:	e00c      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a82:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	4a10      	ldr	r2, [pc, #64]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	0a12      	lsrs	r2, r2, #8
 8002a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0e5b      	lsrs	r3, r3, #25
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e001      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002abc:	693b      	ldr	r3, [r7, #16]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	016e3600 	.word	0x016e3600

08002ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08008458 	.word	0x08008458

08002b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b20:	f7ff ffda 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0adb      	lsrs	r3, r3, #11
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08008458 	.word	0x08008458

08002b48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	220f      	movs	r2, #15
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <HAL_RCC_GetClockConfig+0x60>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40022000 	.word	0x40022000

08002bac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d10c      	bne.n	8002bea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4a14      	ldr	r2, [pc, #80]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	0a12      	lsrs	r2, r2, #8
 8002bde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
    break;
 8002be8:	e00c      	b.n	8002c04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	0a12      	lsrs	r2, r2, #8
 8002bf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    break;
 8002c02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0e5b      	lsrs	r3, r3, #25
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	016e3600 	.word	0x016e3600
 8002c34:	00f42400 	.word	0x00f42400

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8098 	beq.w	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b40      	ldr	r3, [pc, #256]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c72:	4b3d      	ldr	r3, [pc, #244]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c82:	4b3a      	ldr	r3, [pc, #232]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a39      	ldr	r2, [pc, #228]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8e:	f7fe f939 	bl	8000f04 <HAL_GetTick>
 8002c92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c94:	e009      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe f935 	bl	8000f04 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002caa:	4b30      	ldr	r3, [pc, #192]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d159      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01e      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d019      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd8:	4b23      	ldr	r3, [pc, #140]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ce2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce4:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d04:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe f8f5 	bl	8000f04 <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe f8f1 	bl	8000f04 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d902      	bls.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	74fb      	strb	r3, [r7, #19]
            break;
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d36:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ec      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d58:	4903      	ldr	r1, [pc, #12]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	74bb      	strb	r3, [r7, #18]
 8002d66:	e005      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d74:	7c7b      	ldrb	r3, [r7, #17]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4ba7      	ldr	r3, [pc, #668]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	4aa6      	ldr	r2, [pc, #664]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d92:	4ba1      	ldr	r3, [pc, #644]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f023 0203 	bic.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	499d      	ldr	r1, [pc, #628]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db4:	4b98      	ldr	r3, [pc, #608]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	f023 020c 	bic.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4995      	ldr	r1, [pc, #596]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd6:	4b90      	ldr	r3, [pc, #576]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ddc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	498c      	ldr	r1, [pc, #560]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df8:	4b87      	ldr	r3, [pc, #540]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	4984      	ldr	r1, [pc, #528]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	497b      	ldr	r1, [pc, #492]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e3c:	4b76      	ldr	r3, [pc, #472]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	4973      	ldr	r1, [pc, #460]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	496a      	ldr	r1, [pc, #424]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e80:	4b65      	ldr	r3, [pc, #404]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4962      	ldr	r1, [pc, #392]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	4959      	ldr	r1, [pc, #356]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ec4:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	4951      	ldr	r1, [pc, #324]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	4948      	ldr	r1, [pc, #288]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f08:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4940      	ldr	r1, [pc, #256]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f40:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4e:	4932      	ldr	r1, [pc, #200]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a2c      	ldr	r2, [pc, #176]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d015      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f78:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f86:	4924      	ldr	r1, [pc, #144]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	4916      	ldr	r1, [pc, #88]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd0:	4b11      	ldr	r3, [pc, #68]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a10      	ldr	r2, [pc, #64]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d019      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4908      	ldr	r1, [pc, #32]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003006:	d109      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003008:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a02      	ldr	r2, [pc, #8]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003012:	60d3      	str	r3, [r2, #12]
 8003014:	e002      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003028:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	4926      	ldr	r1, [pc, #152]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003046:	d105      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003048:	4b21      	ldr	r3, [pc, #132]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a20      	ldr	r2, [pc, #128]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003052:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	4918      	ldr	r1, [pc, #96]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307e:	d105      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800309a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800309e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	490a      	ldr	r1, [pc, #40]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030b6:	d105      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e049      	b.n	800317a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f841 	bl	8003182 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fa30 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d001      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e054      	b.n	800325a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_TIM_Base_Start_IT+0xd0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d022      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031da:	d01d      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_TIM_Base_Start_IT+0xd4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d018      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <HAL_TIM_Base_Start_IT+0xdc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_TIM_Base_Start_IT+0xe0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_TIM_Base_Start_IT+0xe4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x80>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_TIM_Base_Start_IT+0xe8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d115      	bne.n	8003244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <HAL_TIM_Base_Start_IT+0xec>)
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d015      	beq.n	8003256 <HAL_TIM_Base_Start_IT+0xbe>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003230:	d011      	beq.n	8003256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	e008      	b.n	8003256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e000      	b.n	8003258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40013400 	.word	0x40013400
 800327c:	40014000 	.word	0x40014000
 8003280:	40015000 	.word	0x40015000
 8003284:	00010007 	.word	0x00010007

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0202 	mvn.w	r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f931 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f923 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f934 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0204 	mvn.w	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f90b 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8fd 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f90e 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0208 	mvn.w	r2, #8
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2204      	movs	r2, #4
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8e5 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8d7 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8e8 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0210 	mvn.w	r2, #16
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2208      	movs	r2, #8
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8bf 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8b1 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8c2 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fad6 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f969 	bl	80036f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800343e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f961 	bl	8003708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f87c 	bl	8003562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0220 	mvn.w	r2, #32
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f929 	bl	80036e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00c      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80034aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f935 	bl	800371c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80034ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f92d 	bl	8003730 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f925 	bl	8003744 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f91d 	bl	8003758 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a4c      	ldr	r2, [pc, #304]	@ (80036bc <TIM_Base_SetConfig+0x144>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d017      	beq.n	80035c0 <TIM_Base_SetConfig+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x48>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a49      	ldr	r2, [pc, #292]	@ (80036c0 <TIM_Base_SetConfig+0x148>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x48>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a48      	ldr	r2, [pc, #288]	@ (80036c4 <TIM_Base_SetConfig+0x14c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x48>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a47      	ldr	r2, [pc, #284]	@ (80036c8 <TIM_Base_SetConfig+0x150>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x48>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a46      	ldr	r2, [pc, #280]	@ (80036cc <TIM_Base_SetConfig+0x154>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x48>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a45      	ldr	r2, [pc, #276]	@ (80036d0 <TIM_Base_SetConfig+0x158>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a39      	ldr	r2, [pc, #228]	@ (80036bc <TIM_Base_SetConfig+0x144>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d023      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d01f      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a36      	ldr	r2, [pc, #216]	@ (80036c0 <TIM_Base_SetConfig+0x148>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01b      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a35      	ldr	r2, [pc, #212]	@ (80036c4 <TIM_Base_SetConfig+0x14c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d017      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a34      	ldr	r2, [pc, #208]	@ (80036c8 <TIM_Base_SetConfig+0x150>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a33      	ldr	r2, [pc, #204]	@ (80036cc <TIM_Base_SetConfig+0x154>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00f      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a33      	ldr	r2, [pc, #204]	@ (80036d4 <TIM_Base_SetConfig+0x15c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00b      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a32      	ldr	r2, [pc, #200]	@ (80036d8 <TIM_Base_SetConfig+0x160>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a31      	ldr	r2, [pc, #196]	@ (80036dc <TIM_Base_SetConfig+0x164>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_Base_SetConfig+0xaa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2c      	ldr	r2, [pc, #176]	@ (80036d0 <TIM_Base_SetConfig+0x158>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d108      	bne.n	8003634 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <TIM_Base_SetConfig+0x144>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <TIM_Base_SetConfig+0x110>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a1a      	ldr	r2, [pc, #104]	@ (80036cc <TIM_Base_SetConfig+0x154>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00f      	beq.n	8003688 <TIM_Base_SetConfig+0x110>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a1a      	ldr	r2, [pc, #104]	@ (80036d4 <TIM_Base_SetConfig+0x15c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00b      	beq.n	8003688 <TIM_Base_SetConfig+0x110>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a19      	ldr	r2, [pc, #100]	@ (80036d8 <TIM_Base_SetConfig+0x160>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <TIM_Base_SetConfig+0x110>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <TIM_Base_SetConfig+0x164>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0x110>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <TIM_Base_SetConfig+0x158>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d103      	bne.n	8003690 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f023 0201 	bic.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	611a      	str	r2, [r3, #16]
  }
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40015000 	.word	0x40015000
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800

080036e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e042      	b.n	8003804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd f9cb 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	@ 0x24
 800379a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fbb2 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8b3 	bl	8003928 <UART_SetConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e01b      	b.n	8003804 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fc31 	bl	8004064 <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003822:	2b20      	cmp	r3, #32
 8003824:	d17b      	bne.n	800391e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_UART_Transmit+0x26>
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e074      	b.n	8003920 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2221      	movs	r2, #33	@ 0x21
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003846:	f7fd fb5d 	bl	8000f04 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003864:	d108      	bne.n	8003878 <HAL_UART_Transmit+0x6c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e003      	b.n	8003880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003880:	e030      	b.n	80038e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	@ 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fc93 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e03d      	b.n	8003920 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	3302      	adds	r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	e007      	b.n	80038d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1c8      	bne.n	8003882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	@ 0x40
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fc5c 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e006      	b.n	8003920 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b08c      	sub	sp, #48	@ 0x30
 800392e:	af00      	add	r7, sp, #0
 8003930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4baa      	ldr	r3, [pc, #680]	@ (8003c00 <UART_SetConfig+0x2d8>)
 8003958:	4013      	ands	r3, r2
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003960:	430b      	orrs	r3, r1
 8003962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a9f      	ldr	r2, [pc, #636]	@ (8003c04 <UART_SetConfig+0x2dc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003990:	4313      	orrs	r3, r2
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800399e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	f023 010f 	bic.w	r1, r3, #15
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a90      	ldr	r2, [pc, #576]	@ (8003c08 <UART_SetConfig+0x2e0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d125      	bne.n	8003a18 <UART_SetConfig+0xf0>
 80039cc:	4b8f      	ldr	r3, [pc, #572]	@ (8003c0c <UART_SetConfig+0x2e4>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d81a      	bhi.n	8003a10 <UART_SetConfig+0xe8>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <UART_SetConfig+0xb8>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	08003a09 	.word	0x08003a09
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f6:	e116      	b.n	8003c26 <UART_SetConfig+0x2fe>
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fe:	e112      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a00:	2304      	movs	r3, #4
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a06:	e10e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0e:	e10a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a16:	e106      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c10 <UART_SetConfig+0x2e8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d138      	bne.n	8003a94 <UART_SetConfig+0x16c>
 8003a22:	4b7a      	ldr	r3, [pc, #488]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d82d      	bhi.n	8003a8c <UART_SetConfig+0x164>
 8003a30:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x110>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a8d 	.word	0x08003a8d
 8003a44:	08003a8d 	.word	0x08003a8d
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003a8d 	.word	0x08003a8d
 8003a50:	08003a8d 	.word	0x08003a8d
 8003a54:	08003a8d 	.word	0x08003a8d
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003a8d 	.word	0x08003a8d
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a72:	e0d8      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a7a:	e0d4      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a82:	e0d0      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8a:	e0cc      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a92:	e0c8      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5e      	ldr	r2, [pc, #376]	@ (8003c14 <UART_SetConfig+0x2ec>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d125      	bne.n	8003aea <UART_SetConfig+0x1c2>
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003aa8:	2b30      	cmp	r3, #48	@ 0x30
 8003aaa:	d016      	beq.n	8003ada <UART_SetConfig+0x1b2>
 8003aac:	2b30      	cmp	r3, #48	@ 0x30
 8003aae:	d818      	bhi.n	8003ae2 <UART_SetConfig+0x1ba>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d00a      	beq.n	8003aca <UART_SetConfig+0x1a2>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d814      	bhi.n	8003ae2 <UART_SetConfig+0x1ba>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <UART_SetConfig+0x19a>
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d008      	beq.n	8003ad2 <UART_SetConfig+0x1aa>
 8003ac0:	e00f      	b.n	8003ae2 <UART_SetConfig+0x1ba>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac8:	e0ad      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003aca:	2302      	movs	r3, #2
 8003acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad0:	e0a9      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad8:	e0a5      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ada:	2308      	movs	r3, #8
 8003adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae0:	e0a1      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae8:	e09d      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <UART_SetConfig+0x2f0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d125      	bne.n	8003b40 <UART_SetConfig+0x218>
 8003af4:	4b45      	ldr	r3, [pc, #276]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b00:	d016      	beq.n	8003b30 <UART_SetConfig+0x208>
 8003b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b04:	d818      	bhi.n	8003b38 <UART_SetConfig+0x210>
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d00a      	beq.n	8003b20 <UART_SetConfig+0x1f8>
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	d814      	bhi.n	8003b38 <UART_SetConfig+0x210>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <UART_SetConfig+0x1f0>
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d008      	beq.n	8003b28 <UART_SetConfig+0x200>
 8003b16:	e00f      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	e082      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e07e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e07a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b30:	2308      	movs	r3, #8
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e076      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3e:	e072      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	@ (8003c1c <UART_SetConfig+0x2f4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d12a      	bne.n	8003ba0 <UART_SetConfig+0x278>
 8003b4a:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b58:	d01a      	beq.n	8003b90 <UART_SetConfig+0x268>
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5e:	d81b      	bhi.n	8003b98 <UART_SetConfig+0x270>
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d00c      	beq.n	8003b80 <UART_SetConfig+0x258>
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6a:	d815      	bhi.n	8003b98 <UART_SetConfig+0x270>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <UART_SetConfig+0x250>
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b74:	d008      	beq.n	8003b88 <UART_SetConfig+0x260>
 8003b76:	e00f      	b.n	8003b98 <UART_SetConfig+0x270>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e052      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b86:	e04e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8e:	e04a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b90:	2308      	movs	r3, #8
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b96:	e046      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	e042      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <UART_SetConfig+0x2dc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d13a      	bne.n	8003c20 <UART_SetConfig+0x2f8>
 8003baa:	4b18      	ldr	r3, [pc, #96]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bb8:	d01a      	beq.n	8003bf0 <UART_SetConfig+0x2c8>
 8003bba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bbe:	d81b      	bhi.n	8003bf8 <UART_SetConfig+0x2d0>
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc4:	d00c      	beq.n	8003be0 <UART_SetConfig+0x2b8>
 8003bc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bca:	d815      	bhi.n	8003bf8 <UART_SetConfig+0x2d0>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <UART_SetConfig+0x2b0>
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd4:	d008      	beq.n	8003be8 <UART_SetConfig+0x2c0>
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x2d0>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	e022      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be6:	e01e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003be8:	2304      	movs	r3, #4
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	e01a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e016      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e012      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003c00:	cfff69f3 	.word	0xcfff69f3
 8003c04:	40008000 	.word	0x40008000
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40004400 	.word	0x40004400
 8003c14:	40004800 	.word	0x40004800
 8003c18:	40004c00 	.word	0x40004c00
 8003c1c:	40005000 	.word	0x40005000
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4aae      	ldr	r2, [pc, #696]	@ (8003ee4 <UART_SetConfig+0x5bc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	f040 8097 	bne.w	8003d60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d823      	bhi.n	8003c82 <UART_SetConfig+0x35a>
 8003c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <UART_SetConfig+0x318>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c73 	.word	0x08003c73
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c83 	.word	0x08003c83
 8003c60:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe ff44 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c6a:	e010      	b.n	8003c8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b9e      	ldr	r3, [pc, #632]	@ (8003ee8 <UART_SetConfig+0x5c0>)
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c70:	e00d      	b.n	8003c8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe fecf 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003c76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c78:	e009      	b.n	8003c8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c80:	e005      	b.n	8003c8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8130 	beq.w	8003ef6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	4a94      	ldr	r2, [pc, #592]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d305      	bcc.n	8003cc6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d903      	bls.n	8003cce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ccc:	e113      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	60fa      	str	r2, [r7, #12]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	4a84      	ldr	r2, [pc, #528]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cf0:	f7fc fae6 	bl	80002c0 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	020b      	lsls	r3, r1, #8
 8003d06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d0a:	0202      	lsls	r2, r0, #8
 8003d0c:	6979      	ldr	r1, [r7, #20]
 8003d0e:	6849      	ldr	r1, [r1, #4]
 8003d10:	0849      	lsrs	r1, r1, #1
 8003d12:	2000      	movs	r0, #0
 8003d14:	460c      	mov	r4, r1
 8003d16:	4605      	mov	r5, r0
 8003d18:	eb12 0804 	adds.w	r8, r2, r4
 8003d1c:	eb43 0905 	adc.w	r9, r3, r5
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	469a      	mov	sl, r3
 8003d28:	4693      	mov	fp, r2
 8003d2a:	4652      	mov	r2, sl
 8003d2c:	465b      	mov	r3, fp
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4649      	mov	r1, r9
 8003d32:	f7fc fac5 	bl	80002c0 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d44:	d308      	bcc.n	8003d58 <UART_SetConfig+0x430>
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d4c:	d204      	bcs.n	8003d58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	e0ce      	b.n	8003ef6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d5e:	e0ca      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	d166      	bne.n	8003e38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d827      	bhi.n	8003dc2 <UART_SetConfig+0x49a>
 8003d72:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <UART_SetConfig+0x450>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dc3 	.word	0x08003dc3
 8003d88:	08003db3 	.word	0x08003db3
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
 8003d98:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7fe fea8 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8003da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003da2:	e014      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7fe feba 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003daa:	e010      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dac:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee8 <UART_SetConfig+0x5c0>)
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003db0:	e00d      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fe fe2f 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003db6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003db8:	e009      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dc0:	e005      	b.n	8003dce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8090 	beq.w	8003ef6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	4a44      	ldr	r2, [pc, #272]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	441a      	add	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d916      	bls.n	8003e30 <UART_SetConfig+0x508>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e08:	d212      	bcs.n	8003e30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f023 030f 	bic.w	r3, r3, #15
 8003e12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	8bfb      	ldrh	r3, [r7, #30]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	8bfa      	ldrh	r2, [r7, #30]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e062      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e36:	e05e      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d828      	bhi.n	8003e92 <UART_SetConfig+0x56a>
 8003e40:	a201      	add	r2, pc, #4	@ (adr r2, 8003e48 <UART_SetConfig+0x520>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e83 	.word	0x08003e83
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fe40 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8003e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e72:	e014      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fe52 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 8003e78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e7a:	e010      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <UART_SetConfig+0x5c0>)
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e80:	e00d      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe fdc7 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003e86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e88:	e009      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e90:	e005      	b.n	8003e9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d028      	beq.n	8003ef6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	4a10      	ldr	r2, [pc, #64]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d910      	bls.n	8003ef0 <UART_SetConfig+0x5c8>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d20c      	bcs.n	8003ef0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e009      	b.n	8003ef6 <UART_SetConfig+0x5ce>
 8003ee2:	bf00      	nop
 8003ee4:	40008000 	.word	0x40008000
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	08008470 	.word	0x08008470
      }
      else
      {
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3730      	adds	r7, #48	@ 0x30
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800401e:	d10a      	bne.n	8004036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b098      	sub	sp, #96	@ 0x60
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004074:	f7fc ff46 	bl	8000f04 <HAL_GetTick>
 8004078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d12f      	bne.n	80040e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f88e 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d022      	beq.n	80040e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e063      	b.n	80041b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d149      	bne.n	800418a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fe:	2200      	movs	r2, #0
 8004100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f857 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d03c      	beq.n	800418a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	623b      	str	r3, [r7, #32]
   return(result);
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	60fb      	str	r3, [r7, #12]
   return(result);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004162:	61fa      	str	r2, [r7, #28]
 8004164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	617b      	str	r3, [r7, #20]
   return(result);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e012      	b.n	80041b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3758      	adds	r7, #88	@ 0x58
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c8:	e04f      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041d0:	d04b      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fc fe97 	bl	8000f04 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e04e      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d037      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d034      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d031      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d110      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2208      	movs	r2, #8
 800421a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f838 	bl	8004292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2208      	movs	r2, #8
 8004226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e029      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004244:	d111      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800424e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f81e 	bl	8004292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e00f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d0a0      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004292:	b480      	push	{r7}
 8004294:	b095      	sub	sp, #84	@ 0x54
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e6      	bne.n	800429a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	61fb      	str	r3, [r7, #28]
   return(result);
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e3      	bne.n	80042cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d118      	bne.n	800433e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	60bb      	str	r3, [r7, #8]
   return(result);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	613b      	str	r3, [r7, #16]
   return(result);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e6      	bne.n	800430c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004352:	bf00      	nop
 8004354:	3754      	adds	r7, #84	@ 0x54
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_UARTEx_DisableFifoMode+0x16>
 8004370:	2302      	movs	r3, #2
 8004372:	e027      	b.n	80043c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	@ 0x24
 8004380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80043a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e02d      	b.n	8004444 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	@ 0x24
 80043f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f84f 	bl	80044c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e02d      	b.n	80044c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f811 	bl	80044c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d108      	bne.n	80044ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044e8:	e031      	b.n	800454e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ea:	2308      	movs	r3, #8
 80044ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044ee:	2308      	movs	r3, #8
 80044f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0e5b      	lsrs	r3, r3, #25
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	0f5b      	lsrs	r3, r3, #29
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004512:	7bbb      	ldrb	r3, [r7, #14]
 8004514:	7b3a      	ldrb	r2, [r7, #12]
 8004516:	4911      	ldr	r1, [pc, #68]	@ (800455c <UARTEx_SetNbDataToProcess+0x94>)
 8004518:	5c8a      	ldrb	r2, [r1, r2]
 800451a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800451e:	7b3a      	ldrb	r2, [r7, #12]
 8004520:	490f      	ldr	r1, [pc, #60]	@ (8004560 <UARTEx_SetNbDataToProcess+0x98>)
 8004522:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004524:	fb93 f3f2 	sdiv	r3, r3, r2
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	7b7a      	ldrb	r2, [r7, #13]
 8004534:	4909      	ldr	r1, [pc, #36]	@ (800455c <UARTEx_SetNbDataToProcess+0x94>)
 8004536:	5c8a      	ldrb	r2, [r1, r2]
 8004538:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800453c:	7b7a      	ldrb	r2, [r7, #13]
 800453e:	4908      	ldr	r1, [pc, #32]	@ (8004560 <UARTEx_SetNbDataToProcess+0x98>)
 8004540:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004542:	fb93 f3f2 	sdiv	r3, r3, r2
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	08008488 	.word	0x08008488
 8004560:	08008490 	.word	0x08008490

08004564 <__NVIC_SetPriority>:
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db0a      	blt.n	800458e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	490c      	ldr	r1, [pc, #48]	@ (80045b0 <__NVIC_SetPriority+0x4c>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	440b      	add	r3, r1
 8004588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800458c:	e00a      	b.n	80045a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4908      	ldr	r1, [pc, #32]	@ (80045b4 <__NVIC_SetPriority+0x50>)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3b04      	subs	r3, #4
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	440b      	add	r3, r1
 80045a2:	761a      	strb	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <SysTick_Handler+0x1c>)
 80045be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045c0:	f001 feb6 	bl	8006330 <xTaskGetSchedulerState>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045ca:	f002 fcad 	bl	8006f28 <xPortSysTickHandler>
  }
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000e010 	.word	0xe000e010

080045d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045dc:	2100      	movs	r1, #0
 80045de:	f06f 0004 	mvn.w	r0, #4
 80045e2:	f7ff ffbf 	bl	8004564 <__NVIC_SetPriority>
#endif
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	603b      	str	r3, [r7, #0]
  return(result);
 80045f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045fe:	f06f 0305 	mvn.w	r3, #5
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	e00c      	b.n	8004620 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004606:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <osKernelInitialize+0x44>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800460e:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <osKernelInitialize+0x44>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004614:	2300      	movs	r3, #0
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e002      	b.n	8004620 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800461e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004620:	687b      	ldr	r3, [r7, #4]
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	200001dc 	.word	0x200001dc

08004634 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	603b      	str	r3, [r7, #0]
  return(result);
 8004640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004646:	f06f 0305 	mvn.w	r3, #5
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	e010      	b.n	8004670 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <osKernelStart+0x48>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d109      	bne.n	800466a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004656:	f7ff ffbf 	bl	80045d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800465a:	4b08      	ldr	r3, [pc, #32]	@ (800467c <osKernelStart+0x48>)
 800465c:	2202      	movs	r2, #2
 800465e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004660:	f001 fa18 	bl	8005a94 <vTaskStartScheduler>
      stat = osOK;
 8004664:	2300      	movs	r3, #0
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	e002      	b.n	8004670 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800466a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800466e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004670:	687b      	ldr	r3, [r7, #4]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200001dc 	.word	0x200001dc

08004680 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	@ 0x38
 8004684:	af04      	add	r7, sp, #16
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004690:	f3ef 8305 	mrs	r3, IPSR
 8004694:	617b      	str	r3, [r7, #20]
  return(result);
 8004696:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004698:	2b00      	cmp	r3, #0
 800469a:	d17e      	bne.n	800479a <osThreadNew+0x11a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d07b      	beq.n	800479a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046a6:	2318      	movs	r3, #24
 80046a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d045      	beq.n	8004746 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <osThreadNew+0x48>
        name = attr->name;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <osThreadNew+0x6e>
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2b38      	cmp	r3, #56	@ 0x38
 80046e0:	d805      	bhi.n	80046ee <osThreadNew+0x6e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <osThreadNew+0x72>
        return (NULL);
 80046ee:	2300      	movs	r3, #0
 80046f0:	e054      	b.n	800479c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <osThreadNew+0xa8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004710:	d90a      	bls.n	8004728 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <osThreadNew+0xa8>
        mem = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e010      	b.n	800474a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10c      	bne.n	800474a <osThreadNew+0xca>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d108      	bne.n	800474a <osThreadNew+0xca>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <osThreadNew+0xca>
          mem = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	e001      	b.n	800474a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d110      	bne.n	8004772 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004758:	9202      	str	r2, [sp, #8]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6a3a      	ldr	r2, [r7, #32]
 8004764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 ffee 	bl	8005748 <xTaskCreateStatic>
 800476c:	4603      	mov	r3, r0
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	e013      	b.n	800479a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d110      	bne.n	800479a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	b29a      	uxth	r2, r3
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f001 f83c 	bl	8005808 <xTaskCreate>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d001      	beq.n	800479a <osThreadNew+0x11a>
            hTask = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800479a:	693b      	ldr	r3, [r7, #16]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	@ 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	@ 0x28
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b4:	f3ef 8305 	mrs	r3, IPSR
 80047b8:	613b      	str	r3, [r7, #16]
  return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d15f      	bne.n	8004880 <osMessageQueueNew+0xdc>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d05c      	beq.n	8004880 <osMessageQueueNew+0xdc>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d059      	beq.n	8004880 <osMessageQueueNew+0xdc>
    mem = -1;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d029      	beq.n	800482c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <osMessageQueueNew+0x62>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80047e6:	d90e      	bls.n	8004806 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d302      	bcc.n	8004806 <osMessageQueueNew+0x62>
        mem = 1;
 8004800:	2301      	movs	r3, #1
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e014      	b.n	8004830 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d110      	bne.n	8004830 <osMessageQueueNew+0x8c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10c      	bne.n	8004830 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800481a:	2b00      	cmp	r3, #0
 800481c:	d108      	bne.n	8004830 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <osMessageQueueNew+0x8c>
          mem = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	e001      	b.n	8004830 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10b      	bne.n	800484e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2100      	movs	r1, #0
 8004840:	9100      	str	r1, [sp, #0]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fa31 	bl	8004cac <xQueueGenericCreateStatic>
 800484a:	61f8      	str	r0, [r7, #28]
 800484c:	e008      	b.n	8004860 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004854:	2200      	movs	r2, #0
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 faa4 	bl	8004da6 <xQueueGenericCreate>
 800485e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <osMessageQueueNew+0xd0>
        name = attr->name;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e001      	b.n	8004878 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004878:	6979      	ldr	r1, [r7, #20]
 800487a:	69f8      	ldr	r0, [r7, #28]
 800487c:	f000 ff06 	bl	800568c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004880:	69fb      	ldr	r3, [r7, #28]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a4:	f3ef 8305 	mrs	r3, IPSR
 80048a8:	617b      	str	r3, [r7, #20]
  return(result);
 80048aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d028      	beq.n	8004902 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <osMessageQueuePut+0x36>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <osMessageQueuePut+0x36>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80048c2:	f06f 0303 	mvn.w	r3, #3
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e038      	b.n	800493c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80048ce:	f107 0210 	add.w	r2, r7, #16
 80048d2:	2300      	movs	r3, #0
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	f000 fbc6 	bl	8005068 <xQueueGenericSendFromISR>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d003      	beq.n	80048ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80048e2:	f06f 0302 	mvn.w	r3, #2
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e028      	b.n	800493c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d025      	beq.n	800493c <osMessageQueuePut+0xb0>
 80048f0:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <osMessageQueuePut+0xbc>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	e01c      	b.n	800493c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <osMessageQueuePut+0x82>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800490e:	f06f 0303 	mvn.w	r3, #3
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e012      	b.n	800493c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004916:	2300      	movs	r3, #0
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	69b8      	ldr	r0, [r7, #24]
 800491e:	f000 faa1 	bl	8004e64 <xQueueGenericSend>
 8004922:	4603      	mov	r3, r0
 8004924:	2b01      	cmp	r3, #1
 8004926:	d009      	beq.n	800493c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800492e:	f06f 0301 	mvn.w	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e002      	b.n	800493c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004936:	f06f 0302 	mvn.w	r3, #2
 800493a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800493c:	69fb      	ldr	r3, [r7, #28]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	617b      	str	r3, [r7, #20]
  return(result);
 8004968:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800496a:	2b00      	cmp	r3, #0
 800496c:	d028      	beq.n	80049c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <osMessageQueueGet+0x34>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <osMessageQueueGet+0x34>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004980:	f06f 0303 	mvn.w	r3, #3
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e037      	b.n	80049f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	461a      	mov	r2, r3
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	69b8      	ldr	r0, [r7, #24]
 8004996:	f000 fce7 	bl	8005368 <xQueueReceiveFromISR>
 800499a:	4603      	mov	r3, r0
 800499c:	2b01      	cmp	r3, #1
 800499e:	d003      	beq.n	80049a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80049a0:	f06f 0302 	mvn.w	r3, #2
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	e027      	b.n	80049f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d024      	beq.n	80049f8 <osMessageQueueGet+0xac>
 80049ae:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <osMessageQueueGet+0xb8>)
 80049b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	e01b      	b.n	80049f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <osMessageQueueGet+0x80>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80049cc:	f06f 0303 	mvn.w	r3, #3
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e011      	b.n	80049f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	69b8      	ldr	r0, [r7, #24]
 80049da:	f000 fbe3 	bl	80051a4 <xQueueReceive>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d009      	beq.n	80049f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80049ea:	f06f 0301 	mvn.w	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	e002      	b.n	80049f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80049f2:	f06f 0302 	mvn.w	r3, #2
 80049f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049f8:	69fb      	ldr	r3, [r7, #28]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a06      	ldr	r2, [pc, #24]	@ (8004a38 <vApplicationGetIdleTaskMemory+0x30>)
 8004a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2280      	movs	r2, #128	@ 0x80
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	200001e0 	.word	0x200001e0
 8004a38:	2000023c 	.word	0x2000023c

08004a3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a07      	ldr	r2, [pc, #28]	@ (8004a68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a06      	ldr	r2, [pc, #24]	@ (8004a6c <vApplicationGetTimerTaskMemory+0x30>)
 8004a52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a5a:	601a      	str	r2, [r3, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	2000043c 	.word	0x2000043c
 8004a6c:	20000498 	.word	0x20000498

08004a70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 0208 	add.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f103 0208 	add.w	r2, r3, #8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f103 0208 	add.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b28:	d103      	bne.n	8004b32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e00c      	b.n	8004b4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3308      	adds	r3, #8
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e002      	b.n	8004b40 <vListInsert+0x2e>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d2f6      	bcs.n	8004b3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6892      	ldr	r2, [r2, #8]
 8004b9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d103      	bne.n	8004bb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c04:	f002 f900 	bl	8006e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	3b01      	subs	r3, #1
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	22ff      	movs	r2, #255	@ 0xff
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	22ff      	movs	r2, #255	@ 0xff
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d114      	bne.n	8004c84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01a      	beq.n	8004c98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3310      	adds	r3, #16
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f9a2 	bl	8005fb0 <xTaskRemoveFromEventList>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d012      	beq.n	8004c98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <xQueueGenericReset+0xd0>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	e009      	b.n	8004c98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3310      	adds	r3, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fef1 	bl	8004a70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3324      	adds	r3, #36	@ 0x24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff feec 	bl	8004a70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c98:	f002 f8e8 	bl	8006e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c9c:	2301      	movs	r3, #1
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	@ 0x38
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <xQueueGenericCreateStatic+0x56>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <xQueueGenericCreateStatic+0x5a>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericCreateStatic+0x5c>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	623b      	str	r3, [r7, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <xQueueGenericCreateStatic+0x84>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <xQueueGenericCreateStatic+0x88>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <xQueueGenericCreateStatic+0x8a>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	61fb      	str	r3, [r7, #28]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d52:	2350      	movs	r3, #80	@ 0x50
 8004d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b50      	cmp	r3, #80	@ 0x50
 8004d5a:	d00b      	beq.n	8004d74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	61bb      	str	r3, [r7, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f840 	bl	8004e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3730      	adds	r7, #48	@ 0x30
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08a      	sub	sp, #40	@ 0x28
 8004daa:	af02      	add	r7, sp, #8
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	613b      	str	r3, [r7, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	e7fd      	b.n	8004dce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	3350      	adds	r3, #80	@ 0x50
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 f933 	bl	800704c <pvPortMalloc>
 8004de6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3350      	adds	r3, #80	@ 0x50
 8004df6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e00:	79fa      	ldrb	r2, [r7, #7]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f805 	bl	8004e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e12:	69bb      	ldr	r3, [r7, #24]
	}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	69b8      	ldr	r0, [r7, #24]
 8004e4e:	f7ff fec3 	bl	8004bd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08e      	sub	sp, #56	@ 0x38
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <xQueueGenericSend+0x34>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <xQueueGenericSend+0x42>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <xQueueGenericSend+0x46>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xQueueGenericSend+0x48>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xQueueGenericSend+0x64>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSend+0x72>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSend+0x76>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSend+0x78>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef8:	f001 fa1a 	bl	8006330 <xTaskGetSchedulerState>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <xQueueGenericSend+0xa4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueGenericSend+0xa8>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueGenericSend+0xaa>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <xQueueGenericSend+0xc6>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61fb      	str	r3, [r7, #28]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f2a:	f001 ff6d 	bl	8006e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <xQueueGenericSend+0xdc>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d129      	bne.n	8004f94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f46:	f000 fa91 	bl	800546c <prvCopyDataToQueue>
 8004f4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	3324      	adds	r3, #36	@ 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f829 	bl	8005fb0 <xTaskRemoveFromEventList>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d013      	beq.n	8004f8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f64:	4b3f      	ldr	r3, [pc, #252]	@ (8005064 <xQueueGenericSend+0x200>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	e00a      	b.n	8004f8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <xQueueGenericSend+0x200>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f8c:	f001 ff6e 	bl	8006e6c <vPortExitCritical>
				return pdPASS;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e063      	b.n	800505c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9a:	f001 ff67 	bl	8006e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e05c      	b.n	800505c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f863 	bl	8006078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb6:	f001 ff59 	bl	8006e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fba:	f000 fdd3 	bl	8005b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fbe:	f001 ff23 	bl	8006e08 <vPortEnterCritical>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fc8:	b25b      	sxtb	r3, r3
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fce:	d103      	bne.n	8004fd8 <xQueueGenericSend+0x174>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe4:	d103      	bne.n	8004fee <xQueueGenericSend+0x18a>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fee:	f001 ff3d 	bl	8006e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff2:	1d3a      	adds	r2, r7, #4
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 f852 	bl	80060a4 <xTaskCheckForTimeOut>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d124      	bne.n	8005050 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005008:	f000 fb28 	bl	800565c <prvIsQueueFull>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	3310      	adds	r3, #16
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ff76 	bl	8005f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005022:	f000 fab3 	bl	800558c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005026:	f000 fdab 	bl	8005b80 <xTaskResumeAll>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f af7c 	bne.w	8004f2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005032:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <xQueueGenericSend+0x200>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	e772      	b.n	8004f2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005046:	f000 faa1 	bl	800558c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504a:	f000 fd99 	bl	8005b80 <xTaskResumeAll>
 800504e:	e76c      	b.n	8004f2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005052:	f000 fa9b 	bl	800558c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005056:	f000 fd93 	bl	8005b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800505a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800505c:	4618      	mov	r0, r3
 800505e:	3738      	adds	r7, #56	@ 0x38
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b090      	sub	sp, #64	@ 0x40
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <xQueueGenericSendFromISR+0x3e>
 800509e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <xQueueGenericSendFromISR+0x42>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <xQueueGenericSendFromISR+0x44>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d103      	bne.n	80050d6 <xQueueGenericSendFromISR+0x6e>
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <xQueueGenericSendFromISR+0x72>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericSendFromISR+0x74>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f8:	f001 ff66 	bl	8006fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	61fa      	str	r2, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005114:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005116:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	429a      	cmp	r2, r3
 8005122:	d302      	bcc.n	800512a <xQueueGenericSendFromISR+0xc2>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d12f      	bne.n	800518a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005130:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005140:	f000 f994 	bl	800546c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005144:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800514c:	d112      	bne.n	8005174 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	3324      	adds	r3, #36	@ 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f000 ff28 	bl	8005fb0 <xTaskRemoveFromEventList>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005174:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005178:	3301      	adds	r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	b25a      	sxtb	r2, r3
 800517e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005184:	2301      	movs	r3, #1
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005188:	e001      	b.n	800518e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005198:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800519a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800519c:	4618      	mov	r0, r3
 800519e:	3740      	adds	r7, #64	@ 0x40
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	@ 0x30
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <xQueueReceive+0x32>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	623b      	str	r3, [r7, #32]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <xQueueReceive+0x40>
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <xQueueReceive+0x44>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <xQueueReceive+0x46>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <xQueueReceive+0x62>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	61fb      	str	r3, [r7, #28]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005206:	f001 f893 	bl	8006330 <xTaskGetSchedulerState>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <xQueueReceive+0x72>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <xQueueReceive+0x76>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueReceive+0x78>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueReceive+0x94>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61bb      	str	r3, [r7, #24]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005238:	f001 fde6 	bl	8006e08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01f      	beq.n	8005288 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800524c:	f000 f978 	bl	8005540 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00f      	beq.n	8005280 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	3310      	adds	r3, #16
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fea3 	bl	8005fb0 <xTaskRemoveFromEventList>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005270:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <xQueueReceive+0x1c0>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005280:	f001 fdf4 	bl	8006e6c <vPortExitCritical>
				return pdPASS;
 8005284:	2301      	movs	r3, #1
 8005286:	e069      	b.n	800535c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800528e:	f001 fded 	bl	8006e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005292:	2300      	movs	r3, #0
 8005294:	e062      	b.n	800535c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800529c:	f107 0310 	add.w	r3, r7, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fee9 	bl	8006078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052aa:	f001 fddf 	bl	8006e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ae:	f000 fc59 	bl	8005b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052b2:	f001 fda9 	bl	8006e08 <vPortEnterCritical>
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052c2:	d103      	bne.n	80052cc <xQueueReceive+0x128>
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052d8:	d103      	bne.n	80052e2 <xQueueReceive+0x13e>
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052e2:	f001 fdc3 	bl	8006e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fed8 	bl	80060a4 <xTaskCheckForTimeOut>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d123      	bne.n	8005342 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fc:	f000 f998 	bl	8005630 <prvIsQueueEmpty>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	3324      	adds	r3, #36	@ 0x24
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fdfc 	bl	8005f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005316:	f000 f939 	bl	800558c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800531a:	f000 fc31 	bl	8005b80 <xTaskResumeAll>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d189      	bne.n	8005238 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005324:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <xQueueReceive+0x1c0>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	e780      	b.n	8005238 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005338:	f000 f928 	bl	800558c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800533c:	f000 fc20 	bl	8005b80 <xTaskResumeAll>
 8005340:	e77a      	b.n	8005238 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 f922 	bl	800558c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005348:	f000 fc1a 	bl	8005b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800534c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800534e:	f000 f96f 	bl	8005630 <prvIsQueueEmpty>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	f43f af6f 	beq.w	8005238 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800535a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800535c:	4618      	mov	r0, r3
 800535e:	3730      	adds	r7, #48	@ 0x30
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08e      	sub	sp, #56	@ 0x38
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	623b      	str	r3, [r7, #32]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <xQueueReceiveFromISR+0x3c>
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <xQueueReceiveFromISR+0x40>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <xQueueReceiveFromISR+0x42>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053c6:	f001 fdff 	bl	8006fc8 <vPortValidateInterruptPriority>
	__asm volatile
 80053ca:	f3ef 8211 	mrs	r2, BASEPRI
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	61ba      	str	r2, [r7, #24]
 80053e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80053e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d02f      	beq.n	8005452 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005400:	f000 f89e 	bl	8005540 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	1e5a      	subs	r2, r3, #1
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800540c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005414:	d112      	bne.n	800543c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	3310      	adds	r3, #16
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fdc4 	bl	8005fb0 <xTaskRemoveFromEventList>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00e      	beq.n	800544c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	e007      	b.n	800544c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800543c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005440:	3301      	adds	r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	b25a      	sxtb	r2, r3
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005450:	e001      	b.n	8005456 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	@ 0x34
 8005456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f383 8811 	msr	BASEPRI, r3
}
 8005460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005464:	4618      	mov	r0, r3
 8005466:	3738      	adds	r7, #56	@ 0x38
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10d      	bne.n	80054a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d14d      	bne.n	800552e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 ff68 	bl	800636c <xTaskPriorityDisinherit>
 800549c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	e043      	b.n	800552e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d119      	bne.n	80054e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6858      	ldr	r0, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	f002 fa4f 	bl	800795a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	441a      	add	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d32b      	bcc.n	800552e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	e026      	b.n	800552e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68d8      	ldr	r0, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	461a      	mov	r2, r3
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	f002 fa35 	bl	800795a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	425b      	negs	r3, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d207      	bcs.n	800551c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	425b      	negs	r3, r3
 8005516:	441a      	add	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d105      	bne.n	800552e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3b01      	subs	r3, #1
 800552c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005536:	697b      	ldr	r3, [r7, #20]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d303      	bcc.n	8005574 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68d9      	ldr	r1, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	461a      	mov	r2, r3
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	f002 f9eb 	bl	800795a <memcpy>
	}
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005594:	f001 fc38 	bl	8006e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800559e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055a0:	e011      	b.n	80055c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d012      	beq.n	80055d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3324      	adds	r3, #36	@ 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fcfe 	bl	8005fb0 <xTaskRemoveFromEventList>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055ba:	f000 fdd7 	bl	800616c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dce9      	bgt.n	80055a2 <prvUnlockQueue+0x16>
 80055ce:	e000      	b.n	80055d2 <prvUnlockQueue+0x46>
					break;
 80055d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	22ff      	movs	r2, #255	@ 0xff
 80055d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055da:	f001 fc47 	bl	8006e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055de:	f001 fc13 	bl	8006e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ea:	e011      	b.n	8005610 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3310      	adds	r3, #16
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fcd9 	bl	8005fb0 <xTaskRemoveFromEventList>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005604:	f000 fdb2 	bl	800616c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005608:	7bbb      	ldrb	r3, [r7, #14]
 800560a:	3b01      	subs	r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	dce9      	bgt.n	80055ec <prvUnlockQueue+0x60>
 8005618:	e000      	b.n	800561c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800561a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	22ff      	movs	r2, #255	@ 0xff
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005624:	f001 fc22 	bl	8006e6c <vPortExitCritical>
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005638:	f001 fbe6 	bl	8006e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e001      	b.n	800564e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800564e:	f001 fc0d 	bl	8006e6c <vPortExitCritical>

	return xReturn;
 8005652:	68fb      	ldr	r3, [r7, #12]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005664:	f001 fbd0 	bl	8006e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005670:	429a      	cmp	r2, r3
 8005672:	d102      	bne.n	800567a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005674:	2301      	movs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e001      	b.n	800567e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800567e:	f001 fbf5 	bl	8006e6c <vPortExitCritical>

	return xReturn;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e014      	b.n	80056c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800569c:	4a0f      	ldr	r2, [pc, #60]	@ (80056dc <vQueueAddToRegistry+0x50>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056a8:	490c      	ldr	r1, [pc, #48]	@ (80056dc <vQueueAddToRegistry+0x50>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056b2:	4a0a      	ldr	r2, [pc, #40]	@ (80056dc <vQueueAddToRegistry+0x50>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056be:	e006      	b.n	80056ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b07      	cmp	r3, #7
 80056ca:	d9e7      	bls.n	800569c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000898 	.word	0x20000898

080056e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056f0:	f001 fb8a 	bl	8006e08 <vPortEnterCritical>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056fa:	b25b      	sxtb	r3, r3
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005700:	d103      	bne.n	800570a <vQueueWaitForMessageRestricted+0x2a>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005710:	b25b      	sxtb	r3, r3
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005716:	d103      	bne.n	8005720 <vQueueWaitForMessageRestricted+0x40>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005720:	f001 fba4 	bl	8006e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3324      	adds	r3, #36	@ 0x24
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fc0f 	bl	8005f58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800573a:	6978      	ldr	r0, [r7, #20]
 800573c:	f7ff ff26 	bl	800558c <prvUnlockQueue>
	}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08e      	sub	sp, #56	@ 0x38
 800574c:	af04      	add	r7, sp, #16
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <xTaskCreateStatic+0x2c>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	623b      	str	r3, [r7, #32]
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <xTaskCreateStatic+0x4a>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61fb      	str	r3, [r7, #28]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005792:	235c      	movs	r3, #92	@ 0x5c
 8005794:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b5c      	cmp	r3, #92	@ 0x5c
 800579a:	d00b      	beq.n	80057b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	61bb      	str	r3, [r7, #24]
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	e7fd      	b.n	80057b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01e      	beq.n	80057fa <xTaskCreateStatic+0xb2>
 80057bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057d4:	2300      	movs	r3, #0
 80057d6:	9303      	str	r3, [sp, #12]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f850 	bl	8005892 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057f4:	f000 f8de 	bl	80059b4 <prvAddNewTaskToReadyList>
 80057f8:	e001      	b.n	80057fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057fe:	697b      	ldr	r3, [r7, #20]
	}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	@ 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08c      	sub	sp, #48	@ 0x30
 800580c:	af04      	add	r7, sp, #16
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4618      	mov	r0, r3
 800581e:	f001 fc15 	bl	800704c <pvPortMalloc>
 8005822:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800582a:	205c      	movs	r0, #92	@ 0x5c
 800582c:	f001 fc0e 	bl	800704c <pvPortMalloc>
 8005830:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	631a      	str	r2, [r3, #48]	@ 0x30
 800583e:	e005      	b.n	800584c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005840:	6978      	ldr	r0, [r7, #20]
 8005842:	f001 fcd1 	bl	80071e8 <vPortFree>
 8005846:	e001      	b.n	800584c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	2300      	movs	r3, #0
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f80e 	bl	8005892 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005876:	69f8      	ldr	r0, [r7, #28]
 8005878:	f000 f89c 	bl	80059b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800587c:	2301      	movs	r3, #1
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e002      	b.n	8005888 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005886:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005888:	69bb      	ldr	r3, [r7, #24]
	}
 800588a:	4618      	mov	r0, r3
 800588c:	3720      	adds	r7, #32
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b088      	sub	sp, #32
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	461a      	mov	r2, r3
 80058aa:	21a5      	movs	r1, #165	@ 0xa5
 80058ac:	f001 ffc6 	bl	800783c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ba:	3b01      	subs	r3, #1
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f023 0307 	bic.w	r3, r3, #7
 80058c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <prvInitialiseNewTask+0x5a>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	617b      	str	r3, [r7, #20]
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01f      	beq.n	8005932 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	e012      	b.n	800591e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	7819      	ldrb	r1, [r3, #0]
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	3334      	adds	r3, #52	@ 0x34
 8005908:	460a      	mov	r2, r1
 800590a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	3301      	adds	r3, #1
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d9e9      	bls.n	80058f8 <prvInitialiseNewTask+0x66>
 8005924:	e000      	b.n	8005928 <prvInitialiseNewTask+0x96>
			{
				break;
 8005926:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005930:	e003      	b.n	800593a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	2b37      	cmp	r3, #55	@ 0x37
 800593e:	d901      	bls.n	8005944 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005940:	2337      	movs	r3, #55	@ 0x37
 8005942:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005948:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	2200      	movs	r2, #0
 8005954:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff f8a8 	bl	8004ab0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	3318      	adds	r3, #24
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff f8a3 	bl	8004ab0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	68f9      	ldr	r1, [r7, #12]
 8005992:	69b8      	ldr	r0, [r7, #24]
 8005994:	f001 f908 	bl	8006ba8 <pxPortInitialiseStack>
 8005998:	4602      	mov	r2, r0
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059aa:	bf00      	nop
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059bc:	f001 fa24 	bl	8006e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059ca:	4b2c      	ldr	r3, [pc, #176]	@ (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059d2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d8:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d110      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059e0:	f000 fbe8 	bl	80061b4 <prvInitialiseTaskLists>
 80059e4:	e00d      	b.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059e6:	4b26      	ldr	r3, [pc, #152]	@ (8005a80 <prvAddNewTaskToReadyList+0xcc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ee:	4b23      	ldr	r3, [pc, #140]	@ (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d802      	bhi.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059fc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a02:	4b20      	ldr	r3, [pc, #128]	@ (8005a84 <prvAddNewTaskToReadyList+0xd0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a1e      	ldr	r2, [pc, #120]	@ (8005a84 <prvAddNewTaskToReadyList+0xd0>)
 8005a0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <prvAddNewTaskToReadyList+0xd0>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a18:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <prvAddNewTaskToReadyList+0xd4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d903      	bls.n	8005a28 <prvAddNewTaskToReadyList+0x74>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	4a18      	ldr	r2, [pc, #96]	@ (8005a88 <prvAddNewTaskToReadyList+0xd4>)
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <prvAddNewTaskToReadyList+0xd8>)
 8005a36:	441a      	add	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7ff f843 	bl	8004aca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a44:	f001 fa12 	bl	8006e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a48:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <prvAddNewTaskToReadyList+0xcc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00e      	beq.n	8005a6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a50:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d207      	bcs.n	8005a6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <prvAddNewTaskToReadyList+0xdc>)
 8005a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000dac 	.word	0x20000dac
 8005a7c:	200008d8 	.word	0x200008d8
 8005a80:	20000db8 	.word	0x20000db8
 8005a84:	20000dc8 	.word	0x20000dc8
 8005a88:	20000db4 	.word	0x20000db4
 8005a8c:	200008dc 	.word	0x200008dc
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	@ 0x28
 8005a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aa2:	463a      	mov	r2, r7
 8005aa4:	1d39      	adds	r1, r7, #4
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe ffac 	bl	8004a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	4922      	ldr	r1, [pc, #136]	@ (8005b4c <vTaskStartScheduler+0xb8>)
 8005ac4:	4822      	ldr	r0, [pc, #136]	@ (8005b50 <vTaskStartScheduler+0xbc>)
 8005ac6:	f7ff fe3f 	bl	8005748 <xTaskCreateStatic>
 8005aca:	4603      	mov	r3, r0
 8005acc:	4a21      	ldr	r2, [pc, #132]	@ (8005b54 <vTaskStartScheduler+0xc0>)
 8005ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ad0:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <vTaskStartScheduler+0xc0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e001      	b.n	8005ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ae8:	f000 fd04 	bl	80064f4 <xTimerCreateTimerTask>
 8005aec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d116      	bne.n	8005b22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	613b      	str	r3, [r7, #16]
}
 8005b06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b08:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <vTaskStartScheduler+0xc4>)
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b10:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <vTaskStartScheduler+0xc8>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b16:	4b12      	ldr	r3, [pc, #72]	@ (8005b60 <vTaskStartScheduler+0xcc>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b1c:	f001 f8d0 	bl	8006cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b20:	e00f      	b.n	8005b42 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b28:	d10b      	bne.n	8005b42 <vTaskStartScheduler+0xae>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60fb      	str	r3, [r7, #12]
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <vTaskStartScheduler+0xaa>
}
 8005b42:	bf00      	nop
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	080083f4 	.word	0x080083f4
 8005b50:	08006185 	.word	0x08006185
 8005b54:	20000dd0 	.word	0x20000dd0
 8005b58:	20000dcc 	.word	0x20000dcc
 8005b5c:	20000db8 	.word	0x20000db8
 8005b60:	20000db0 	.word	0x20000db0

08005b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b68:	4b04      	ldr	r3, [pc, #16]	@ (8005b7c <vTaskSuspendAll+0x18>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a03      	ldr	r2, [pc, #12]	@ (8005b7c <vTaskSuspendAll+0x18>)
 8005b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b72:	bf00      	nop
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000dd4 	.word	0x20000dd4

08005b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b8e:	4b42      	ldr	r3, [pc, #264]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <xTaskResumeAll+0x2e>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	603b      	str	r3, [r7, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	e7fd      	b.n	8005baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bae:	f001 f92b 	bl	8006e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bb2:	4b39      	ldr	r3, [pc, #228]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a37      	ldr	r2, [pc, #220]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005bba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bbc:	4b36      	ldr	r3, [pc, #216]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d162      	bne.n	8005c8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bc4:	4b35      	ldr	r3, [pc, #212]	@ (8005c9c <xTaskResumeAll+0x11c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05e      	beq.n	8005c8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bcc:	e02f      	b.n	8005c2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bce:	4b34      	ldr	r3, [pc, #208]	@ (8005ca0 <xTaskResumeAll+0x120>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe ffd2 	bl	8004b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe ffcd 	bl	8004b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bee:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <xTaskResumeAll+0x124>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d903      	bls.n	8005bfe <xTaskResumeAll+0x7e>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca4 <xTaskResumeAll+0x124>)
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a27      	ldr	r2, [pc, #156]	@ (8005ca8 <xTaskResumeAll+0x128>)
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7fe ff58 	bl	8004aca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	4b23      	ldr	r3, [pc, #140]	@ (8005cac <xTaskResumeAll+0x12c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c28:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <xTaskResumeAll+0x130>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca0 <xTaskResumeAll+0x120>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1cb      	bne.n	8005bce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c3c:	f000 fb58 	bl	80062f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c40:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb4 <xTaskResumeAll+0x134>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c4c:	f000 f846 	bl	8005cdc <xTaskIncrementTick>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005c56:	4b16      	ldr	r3, [pc, #88]	@ (8005cb0 <xTaskResumeAll+0x130>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f1      	bne.n	8005c4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005c68:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <xTaskResumeAll+0x134>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c6e:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <xTaskResumeAll+0x130>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <xTaskResumeAll+0x138>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c8a:	f001 f8ef 	bl	8006e6c <vPortExitCritical>

	return xAlreadyYielded;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000dd4 	.word	0x20000dd4
 8005c9c:	20000dac 	.word	0x20000dac
 8005ca0:	20000d6c 	.word	0x20000d6c
 8005ca4:	20000db4 	.word	0x20000db4
 8005ca8:	200008dc 	.word	0x200008dc
 8005cac:	200008d8 	.word	0x200008d8
 8005cb0:	20000dc0 	.word	0x20000dc0
 8005cb4:	20000dbc 	.word	0x20000dbc
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cc2:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <xTaskGetTickCount+0x1c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cc8:	687b      	ldr	r3, [r7, #4]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000db0 	.word	0x20000db0

08005cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8005e24 <xTaskIncrementTick+0x148>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 8090 	bne.w	8005e10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8005e28 <xTaskIncrementTick+0x14c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8005e28 <xTaskIncrementTick+0x14c>)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d121      	bne.n	8005d48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d04:	4b49      	ldr	r3, [pc, #292]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <xTaskIncrementTick+0x46>
 8005d26:	4b41      	ldr	r3, [pc, #260]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	4b40      	ldr	r3, [pc, #256]	@ (8005e30 <xTaskIncrementTick+0x154>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a3e      	ldr	r2, [pc, #248]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4a3e      	ldr	r2, [pc, #248]	@ (8005e30 <xTaskIncrementTick+0x154>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e34 <xTaskIncrementTick+0x158>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <xTaskIncrementTick+0x158>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	f000 fad4 	bl	80062f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d48:	4b3b      	ldr	r3, [pc, #236]	@ (8005e38 <xTaskIncrementTick+0x15c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d349      	bcc.n	8005de6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d52:	4b36      	ldr	r3, [pc, #216]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5c:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <xTaskIncrementTick+0x15c>)
 8005d5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d62:	601a      	str	r2, [r3, #0]
					break;
 8005d64:	e03f      	b.n	8005de6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d66:	4b31      	ldr	r3, [pc, #196]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d203      	bcs.n	8005d86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <xTaskIncrementTick+0x15c>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d84:	e02f      	b.n	8005de6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fefa 	bl	8004b84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe fef1 	bl	8004b84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da6:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <xTaskIncrementTick+0x160>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <xTaskIncrementTick+0xda>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	4a22      	ldr	r2, [pc, #136]	@ (8005e3c <xTaskIncrementTick+0x160>)
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <xTaskIncrementTick+0x164>)
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fe fe7c 	bl	8004aca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <xTaskIncrementTick+0x168>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3b8      	bcc.n	8005d52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de4:	e7b5      	b.n	8005d52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005de6:	4b17      	ldr	r3, [pc, #92]	@ (8005e44 <xTaskIncrementTick+0x168>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	4914      	ldr	r1, [pc, #80]	@ (8005e40 <xTaskIncrementTick+0x164>)
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d901      	bls.n	8005e02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e02:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <xTaskIncrementTick+0x16c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e004      	b.n	8005e1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e10:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <xTaskIncrementTick+0x170>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3301      	adds	r3, #1
 8005e16:	4a0d      	ldr	r2, [pc, #52]	@ (8005e4c <xTaskIncrementTick+0x170>)
 8005e18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000dd4 	.word	0x20000dd4
 8005e28:	20000db0 	.word	0x20000db0
 8005e2c:	20000d64 	.word	0x20000d64
 8005e30:	20000d68 	.word	0x20000d68
 8005e34:	20000dc4 	.word	0x20000dc4
 8005e38:	20000dcc 	.word	0x20000dcc
 8005e3c:	20000db4 	.word	0x20000db4
 8005e40:	200008dc 	.word	0x200008dc
 8005e44:	200008d8 	.word	0x200008d8
 8005e48:	20000dc0 	.word	0x20000dc0
 8005e4c:	20000dbc 	.word	0x20000dbc

08005e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e56:	4b28      	ldr	r3, [pc, #160]	@ (8005ef8 <vTaskSwitchContext+0xa8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e5e:	4b27      	ldr	r3, [pc, #156]	@ (8005efc <vTaskSwitchContext+0xac>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e64:	e042      	b.n	8005eec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005e66:	4b25      	ldr	r3, [pc, #148]	@ (8005efc <vTaskSwitchContext+0xac>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6c:	4b24      	ldr	r3, [pc, #144]	@ (8005f00 <vTaskSwitchContext+0xb0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e011      	b.n	8005e98 <vTaskSwitchContext+0x48>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <vTaskSwitchContext+0x42>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	607b      	str	r3, [r7, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <vTaskSwitchContext+0x3e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	491a      	ldr	r1, [pc, #104]	@ (8005f04 <vTaskSwitchContext+0xb4>)
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0e3      	beq.n	8005e74 <vTaskSwitchContext+0x24>
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <vTaskSwitchContext+0xb4>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d104      	bne.n	8005edc <vTaskSwitchContext+0x8c>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	605a      	str	r2, [r3, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4a09      	ldr	r2, [pc, #36]	@ (8005f08 <vTaskSwitchContext+0xb8>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4a06      	ldr	r2, [pc, #24]	@ (8005f00 <vTaskSwitchContext+0xb0>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	20000dd4 	.word	0x20000dd4
 8005efc:	20000dc0 	.word	0x20000dc0
 8005f00:	20000db4 	.word	0x20000db4
 8005f04:	200008dc 	.word	0x200008dc
 8005f08:	200008d8 	.word	0x200008d8

08005f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60fb      	str	r3, [r7, #12]
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f34:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <vTaskPlaceOnEventList+0x48>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3318      	adds	r3, #24
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fe fde8 	bl	8004b12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f42:	2101      	movs	r1, #1
 8005f44:	6838      	ldr	r0, [r7, #0]
 8005f46:	f000 fa81 	bl	800644c <prvAddCurrentTaskToDelayedList>
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	200008d8 	.word	0x200008d8

08005f58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	617b      	str	r3, [r7, #20]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f82:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <vTaskPlaceOnEventListRestricted+0x54>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3318      	adds	r3, #24
 8005f88:	4619      	mov	r1, r3
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7fe fd9d 	bl	8004aca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	68b8      	ldr	r0, [r7, #8]
 8005fa0:	f000 fa54 	bl	800644c <prvAddCurrentTaskToDelayedList>
	}
 8005fa4:	bf00      	nop
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	200008d8 	.word	0x200008d8

08005fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10b      	bne.n	8005fde <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	60fb      	str	r3, [r7, #12]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fdce 	bl	8004b84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8006060 <xTaskRemoveFromEventList+0xb0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11d      	bne.n	800602c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fdc5 	bl	8004b84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffe:	4b19      	ldr	r3, [pc, #100]	@ (8006064 <xTaskRemoveFromEventList+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d903      	bls.n	800600e <xTaskRemoveFromEventList+0x5e>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600a:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <xTaskRemoveFromEventList+0xb4>)
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4a13      	ldr	r2, [pc, #76]	@ (8006068 <xTaskRemoveFromEventList+0xb8>)
 800601c:	441a      	add	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f7fe fd50 	bl	8004aca <vListInsertEnd>
 800602a:	e005      	b.n	8006038 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3318      	adds	r3, #24
 8006030:	4619      	mov	r1, r3
 8006032:	480e      	ldr	r0, [pc, #56]	@ (800606c <xTaskRemoveFromEventList+0xbc>)
 8006034:	f7fe fd49 	bl	8004aca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603c:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <xTaskRemoveFromEventList+0xc0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	429a      	cmp	r2, r3
 8006044:	d905      	bls.n	8006052 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800604a:	4b0a      	ldr	r3, [pc, #40]	@ (8006074 <xTaskRemoveFromEventList+0xc4>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e001      	b.n	8006056 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006056:	697b      	ldr	r3, [r7, #20]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000dd4 	.word	0x20000dd4
 8006064:	20000db4 	.word	0x20000db4
 8006068:	200008dc 	.word	0x200008dc
 800606c:	20000d6c 	.word	0x20000d6c
 8006070:	200008d8 	.word	0x200008d8
 8006074:	20000dc0 	.word	0x20000dc0

08006078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <vTaskInternalSetTimeOutState+0x24>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <vTaskInternalSetTimeOutState+0x28>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000dc4 	.word	0x20000dc4
 80060a0:	20000db0 	.word	0x20000db0

080060a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10b      	bne.n	80060cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	613b      	str	r3, [r7, #16]
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60fb      	str	r3, [r7, #12]
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	e7fd      	b.n	80060e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80060ea:	f000 fe8d 	bl	8006e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <xTaskCheckForTimeOut+0xc0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006106:	d102      	bne.n	800610e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006108:	2300      	movs	r3, #0
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e023      	b.n	8006156 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <xTaskCheckForTimeOut+0xc4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d007      	beq.n	800612a <xTaskCheckForTimeOut+0x86>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	429a      	cmp	r2, r3
 8006122:	d302      	bcc.n	800612a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e015      	b.n	8006156 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	d20b      	bcs.n	800614c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff ff99 	bl	8006078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e004      	b.n	8006156 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006156:	f000 fe89 	bl	8006e6c <vPortExitCritical>

	return xReturn;
 800615a:	69fb      	ldr	r3, [r7, #28]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000db0 	.word	0x20000db0
 8006168:	20000dc4 	.word	0x20000dc4

0800616c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <vTaskMissedYield+0x14>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000dc0 	.word	0x20000dc0

08006184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800618c:	f000 f852 	bl	8006234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006190:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <prvIdleTask+0x28>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d9f9      	bls.n	800618c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006198:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <prvIdleTask+0x2c>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061a8:	e7f0      	b.n	800618c <prvIdleTask+0x8>
 80061aa:	bf00      	nop
 80061ac:	200008dc 	.word	0x200008dc
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	e00c      	b.n	80061da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4a12      	ldr	r2, [pc, #72]	@ (8006214 <prvInitialiseTaskLists+0x60>)
 80061cc:	4413      	add	r3, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fc4e 	bl	8004a70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3301      	adds	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b37      	cmp	r3, #55	@ 0x37
 80061de:	d9ef      	bls.n	80061c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061e0:	480d      	ldr	r0, [pc, #52]	@ (8006218 <prvInitialiseTaskLists+0x64>)
 80061e2:	f7fe fc45 	bl	8004a70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061e6:	480d      	ldr	r0, [pc, #52]	@ (800621c <prvInitialiseTaskLists+0x68>)
 80061e8:	f7fe fc42 	bl	8004a70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061ec:	480c      	ldr	r0, [pc, #48]	@ (8006220 <prvInitialiseTaskLists+0x6c>)
 80061ee:	f7fe fc3f 	bl	8004a70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061f2:	480c      	ldr	r0, [pc, #48]	@ (8006224 <prvInitialiseTaskLists+0x70>)
 80061f4:	f7fe fc3c 	bl	8004a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061f8:	480b      	ldr	r0, [pc, #44]	@ (8006228 <prvInitialiseTaskLists+0x74>)
 80061fa:	f7fe fc39 	bl	8004a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061fe:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <prvInitialiseTaskLists+0x78>)
 8006200:	4a05      	ldr	r2, [pc, #20]	@ (8006218 <prvInitialiseTaskLists+0x64>)
 8006202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006204:	4b0a      	ldr	r3, [pc, #40]	@ (8006230 <prvInitialiseTaskLists+0x7c>)
 8006206:	4a05      	ldr	r2, [pc, #20]	@ (800621c <prvInitialiseTaskLists+0x68>)
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200008dc 	.word	0x200008dc
 8006218:	20000d3c 	.word	0x20000d3c
 800621c:	20000d50 	.word	0x20000d50
 8006220:	20000d6c 	.word	0x20000d6c
 8006224:	20000d80 	.word	0x20000d80
 8006228:	20000d98 	.word	0x20000d98
 800622c:	20000d64 	.word	0x20000d64
 8006230:	20000d68 	.word	0x20000d68

08006234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800623a:	e019      	b.n	8006270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800623c:	f000 fde4 	bl	8006e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006240:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <prvCheckTasksWaitingTermination+0x50>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fc99 	bl	8004b84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006252:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <prvCheckTasksWaitingTermination+0x54>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	4a0b      	ldr	r2, [pc, #44]	@ (8006288 <prvCheckTasksWaitingTermination+0x54>)
 800625a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <prvCheckTasksWaitingTermination+0x58>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3b01      	subs	r3, #1
 8006262:	4a0a      	ldr	r2, [pc, #40]	@ (800628c <prvCheckTasksWaitingTermination+0x58>)
 8006264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006266:	f000 fe01 	bl	8006e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f810 	bl	8006290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006270:	4b06      	ldr	r3, [pc, #24]	@ (800628c <prvCheckTasksWaitingTermination+0x58>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e1      	bne.n	800623c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000d80 	.word	0x20000d80
 8006288:	20000dac 	.word	0x20000dac
 800628c:	20000d94 	.word	0x20000d94

08006290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d108      	bne.n	80062b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 ff9e 	bl	80071e8 <vPortFree>
				vPortFree( pxTCB );
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 ff9b 	bl	80071e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062b2:	e019      	b.n	80062e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d103      	bne.n	80062c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 ff92 	bl	80071e8 <vPortFree>
	}
 80062c4:	e010      	b.n	80062e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d00b      	beq.n	80062e8 <prvDeleteTCB+0x58>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <prvDeleteTCB+0x54>
	}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <prvResetNextTaskUnblockTime+0x38>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006300:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <prvResetNextTaskUnblockTime+0x3c>)
 8006302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006308:	e008      	b.n	800631c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630a:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <prvResetNextTaskUnblockTime+0x38>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a04      	ldr	r2, [pc, #16]	@ (800632c <prvResetNextTaskUnblockTime+0x3c>)
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	20000d64 	.word	0x20000d64
 800632c:	20000dcc 	.word	0x20000dcc

08006330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <xTaskGetSchedulerState+0x34>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800633e:	2301      	movs	r3, #1
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	e008      	b.n	8006356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006344:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <xTaskGetSchedulerState+0x38>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800634c:	2302      	movs	r3, #2
 800634e:	607b      	str	r3, [r7, #4]
 8006350:	e001      	b.n	8006356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006356:	687b      	ldr	r3, [r7, #4]
	}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	20000db8 	.word	0x20000db8
 8006368:	20000dd4 	.word	0x20000dd4

0800636c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d058      	beq.n	8006434 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006382:	4b2f      	ldr	r3, [pc, #188]	@ (8006440 <xTaskPriorityDisinherit+0xd4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	429a      	cmp	r2, r3
 800638a:	d00b      	beq.n	80063a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	60fb      	str	r3, [r7, #12]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60bb      	str	r3, [r7, #8]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c8:	1e5a      	subs	r2, r3, #1
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d02c      	beq.n	8006434 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d128      	bne.n	8006434 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fbcc 	bl	8004b84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006404:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <xTaskPriorityDisinherit+0xd8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d903      	bls.n	8006414 <xTaskPriorityDisinherit+0xa8>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a0c      	ldr	r2, [pc, #48]	@ (8006444 <xTaskPriorityDisinherit+0xd8>)
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4a09      	ldr	r2, [pc, #36]	@ (8006448 <xTaskPriorityDisinherit+0xdc>)
 8006422:	441a      	add	r2, r3
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fe fb4d 	bl	8004aca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006434:	697b      	ldr	r3, [r7, #20]
	}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200008d8 	.word	0x200008d8
 8006444:	20000db4 	.word	0x20000db4
 8006448:	200008dc 	.word	0x200008dc

0800644c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006456:	4b21      	ldr	r3, [pc, #132]	@ (80064dc <prvAddCurrentTaskToDelayedList+0x90>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800645c:	4b20      	ldr	r3, [pc, #128]	@ (80064e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3304      	adds	r3, #4
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fb8e 	bl	8004b84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646e:	d10a      	bne.n	8006486 <prvAddCurrentTaskToDelayedList+0x3a>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006476:	4b1a      	ldr	r3, [pc, #104]	@ (80064e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4819      	ldr	r0, [pc, #100]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006480:	f7fe fb23 	bl	8004aca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006484:	e026      	b.n	80064d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4413      	add	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	429a      	cmp	r2, r3
 800649c:	d209      	bcs.n	80064b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800649e:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b0f      	ldr	r3, [pc, #60]	@ (80064e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f7fe fb31 	bl	8004b12 <vListInsert>
}
 80064b0:	e010      	b.n	80064d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064b2:	4b0e      	ldr	r3, [pc, #56]	@ (80064ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fe fb27 	bl	8004b12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064c4:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d202      	bcs.n	80064d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064ce:	4a08      	ldr	r2, [pc, #32]	@ (80064f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6013      	str	r3, [r2, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000db0 	.word	0x20000db0
 80064e0:	200008d8 	.word	0x200008d8
 80064e4:	20000d98 	.word	0x20000d98
 80064e8:	20000d68 	.word	0x20000d68
 80064ec:	20000d64 	.word	0x20000d64
 80064f0:	20000dcc 	.word	0x20000dcc

080064f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	@ 0x28
 80064f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064fe:	f000 fb13 	bl	8006b28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006502:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <xTimerCreateTimerTask+0x84>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d021      	beq.n	800654e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006512:	1d3a      	adds	r2, r7, #4
 8006514:	f107 0108 	add.w	r1, r7, #8
 8006518:	f107 030c 	add.w	r3, r7, #12
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fa8d 	bl	8004a3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	9202      	str	r2, [sp, #8]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	2302      	movs	r3, #2
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	460a      	mov	r2, r1
 8006534:	4911      	ldr	r1, [pc, #68]	@ (800657c <xTimerCreateTimerTask+0x88>)
 8006536:	4812      	ldr	r0, [pc, #72]	@ (8006580 <xTimerCreateTimerTask+0x8c>)
 8006538:	f7ff f906 	bl	8005748 <xTaskCreateStatic>
 800653c:	4603      	mov	r3, r0
 800653e:	4a11      	ldr	r2, [pc, #68]	@ (8006584 <xTimerCreateTimerTask+0x90>)
 8006540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006542:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <xTimerCreateTimerTask+0x90>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800654a:	2301      	movs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	613b      	str	r3, [r7, #16]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800656c:	697b      	ldr	r3, [r7, #20]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000e08 	.word	0x20000e08
 800657c:	080083fc 	.word	0x080083fc
 8006580:	080066c1 	.word	0x080066c1
 8006584:	20000e0c 	.word	0x20000e0c

08006588 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065b8:	4b19      	ldr	r3, [pc, #100]	@ (8006620 <xTimerGenericCommand+0x98>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d02a      	beq.n	8006616 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	dc18      	bgt.n	8006604 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065d2:	f7ff fead 	bl	8006330 <xTaskGetSchedulerState>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d109      	bne.n	80065f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065dc:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <xTimerGenericCommand+0x98>)
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	f107 0110 	add.w	r1, r7, #16
 80065e4:	2300      	movs	r3, #0
 80065e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e8:	f7fe fc3c 	bl	8004e64 <xQueueGenericSend>
 80065ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80065ee:	e012      	b.n	8006616 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <xTimerGenericCommand+0x98>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	f107 0110 	add.w	r1, r7, #16
 80065f8:	2300      	movs	r3, #0
 80065fa:	2200      	movs	r2, #0
 80065fc:	f7fe fc32 	bl	8004e64 <xQueueGenericSend>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24
 8006602:	e008      	b.n	8006616 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006604:	4b06      	ldr	r3, [pc, #24]	@ (8006620 <xTimerGenericCommand+0x98>)
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	f107 0110 	add.w	r1, r7, #16
 800660c:	2300      	movs	r3, #0
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	f7fe fd2a 	bl	8005068 <xQueueGenericSendFromISR>
 8006614:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006618:	4618      	mov	r0, r3
 800661a:	3728      	adds	r7, #40	@ 0x28
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20000e08 	.word	0x20000e08

08006624 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662e:	4b23      	ldr	r3, [pc, #140]	@ (80066bc <prvProcessExpiredTimer+0x98>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe faa1 	bl	8004b84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d023      	beq.n	8006698 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	18d1      	adds	r1, r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f000 f8d5 	bl	800680c <prvInsertTimerInActiveList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d020      	beq.n	80066aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	2100      	movs	r1, #0
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7ff ff88 	bl	8006588 <xTimerGenericCommand>
 8006678:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d114      	bne.n	80066aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	6978      	ldr	r0, [r7, #20]
 80066b0:	4798      	blx	r3
}
 80066b2:	bf00      	nop
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000e00 	.word	0x20000e00

080066c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f859 	bl	8006784 <prvGetNextExpireTime>
 80066d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f805 	bl	80066e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066de:	f000 f8d7 	bl	8006890 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066e2:	bf00      	nop
 80066e4:	e7f0      	b.n	80066c8 <prvTimerTask+0x8>
	...

080066e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066f2:	f7ff fa37 	bl	8005b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f866 	bl	80067cc <prvSampleTimeNow>
 8006700:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d130      	bne.n	800676a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <prvProcessTimerOrBlockTask+0x3c>
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	429a      	cmp	r2, r3
 8006714:	d806      	bhi.n	8006724 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006716:	f7ff fa33 	bl	8005b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff ff81 	bl	8006624 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006722:	e024      	b.n	800676e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d008      	beq.n	800673c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800672a:	4b13      	ldr	r3, [pc, #76]	@ (8006778 <prvProcessTimerOrBlockTask+0x90>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <prvProcessTimerOrBlockTask+0x50>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <prvProcessTimerOrBlockTask+0x52>
 8006738:	2300      	movs	r3, #0
 800673a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800673c:	4b0f      	ldr	r3, [pc, #60]	@ (800677c <prvProcessTimerOrBlockTask+0x94>)
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	f7fe ffc9 	bl	80056e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800674e:	f7ff fa17 	bl	8005b80 <xTaskResumeAll>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006758:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <prvProcessTimerOrBlockTask+0x98>)
 800675a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	f3bf 8f6f 	isb	sy
}
 8006768:	e001      	b.n	800676e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800676a:	f7ff fa09 	bl	8005b80 <xTaskResumeAll>
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000e04 	.word	0x20000e04
 800677c:	20000e08 	.word	0x20000e08
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800678c:	4b0e      	ldr	r3, [pc, #56]	@ (80067c8 <prvGetNextExpireTime+0x44>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <prvGetNextExpireTime+0x16>
 8006796:	2201      	movs	r2, #1
 8006798:	e000      	b.n	800679c <prvGetNextExpireTime+0x18>
 800679a:	2200      	movs	r2, #0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067a8:	4b07      	ldr	r3, [pc, #28]	@ (80067c8 <prvGetNextExpireTime+0x44>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e001      	b.n	80067b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000e00 	.word	0x20000e00

080067cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067d4:	f7ff fa72 	bl	8005cbc <xTaskGetTickCount>
 80067d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067da:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <prvSampleTimeNow+0x3c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d205      	bcs.n	80067f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067e4:	f000 f93a 	bl	8006a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067f6:	4a04      	ldr	r2, [pc, #16]	@ (8006808 <prvSampleTimeNow+0x3c>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067fc:	68fb      	ldr	r3, [r7, #12]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000e10 	.word	0x20000e10

0800680c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d812      	bhi.n	8006858 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	429a      	cmp	r2, r3
 800683e:	d302      	bcc.n	8006846 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e01b      	b.n	800687e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <prvInsertTimerInActiveList+0x7c>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3304      	adds	r3, #4
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f7fe f95e 	bl	8004b12 <vListInsert>
 8006856:	e012      	b.n	800687e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d206      	bcs.n	800686e <prvInsertTimerInActiveList+0x62>
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e007      	b.n	800687e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800686e:	4b07      	ldr	r3, [pc, #28]	@ (800688c <prvInsertTimerInActiveList+0x80>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fe f94a 	bl	8004b12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800687e:	697b      	ldr	r3, [r7, #20]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20000e04 	.word	0x20000e04
 800688c:	20000e00 	.word	0x20000e00

08006890 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08e      	sub	sp, #56	@ 0x38
 8006894:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006896:	e0ce      	b.n	8006a36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	da19      	bge.n	80068d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	3304      	adds	r3, #4
 80068a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10b      	bne.n	80068c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	61fb      	str	r3, [r7, #28]
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	e7fd      	b.n	80068be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c8:	6850      	ldr	r0, [r2, #4]
 80068ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068cc:	6892      	ldr	r2, [r2, #8]
 80068ce:	4611      	mov	r1, r2
 80068d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f2c0 80ae 	blt.w	8006a36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe f94a 	bl	8004b84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068f0:	463b      	mov	r3, r7
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff ff6a 	bl	80067cc <prvSampleTimeNow>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b09      	cmp	r3, #9
 80068fe:	f200 8097 	bhi.w	8006a30 <prvProcessReceivedCommands+0x1a0>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <prvProcessReceivedCommands+0x78>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006931 	.word	0x08006931
 800690c:	08006931 	.word	0x08006931
 8006910:	08006931 	.word	0x08006931
 8006914:	080069a7 	.word	0x080069a7
 8006918:	080069bb 	.word	0x080069bb
 800691c:	08006a07 	.word	0x08006a07
 8006920:	08006931 	.word	0x08006931
 8006924:	08006931 	.word	0x08006931
 8006928:	080069a7 	.word	0x080069a7
 800692c:	080069bb 	.word	0x080069bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	18d1      	adds	r1, r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006950:	f7ff ff5c 	bl	800680c <prvInsertTimerInActiveList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d06c      	beq.n	8006a34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d061      	beq.n	8006a34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	441a      	add	r2, r3
 8006978:	2300      	movs	r3, #0
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	2100      	movs	r1, #0
 8006980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006982:	f7ff fe01 	bl	8006588 <xTimerGenericCommand>
 8006986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d152      	bne.n	8006a34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61bb      	str	r3, [r7, #24]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80069b8:	e03d      	b.n	8006a36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	617b      	str	r3, [r7, #20]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	18d1      	adds	r1, r2, r3
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a00:	f7ff ff04 	bl	800680c <prvInsertTimerInActiveList>
					break;
 8006a04:	e017      	b.n	8006a36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a16:	f000 fbe7 	bl	80071e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a1a:	e00c      	b.n	8006a36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a2e:	e002      	b.n	8006a36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006a30:	bf00      	nop
 8006a32:	e000      	b.n	8006a36 <prvProcessReceivedCommands+0x1a6>
					break;
 8006a34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a36:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <prvProcessReceivedCommands+0x1c8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	1d39      	adds	r1, r7, #4
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fbb0 	bl	80051a4 <xQueueReceive>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f47f af26 	bne.w	8006898 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	3730      	adds	r7, #48	@ 0x30
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000e08 	.word	0x20000e08

08006a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a62:	e049      	b.n	8006af8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a64:	4b2e      	ldr	r3, [pc, #184]	@ (8006b20 <prvSwitchTimerLists+0xc4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b20 <prvSwitchTimerLists+0xc4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe f881 	bl	8004b84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02f      	beq.n	8006af8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d90e      	bls.n	8006ac8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b20 <prvSwitchTimerLists+0xc4>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f7fe f826 	bl	8004b12 <vListInsert>
 8006ac6:	e017      	b.n	8006af8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2300      	movs	r3, #0
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fd58 	bl	8006588 <xTimerGenericCommand>
 8006ad8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	603b      	str	r3, [r7, #0]
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	e7fd      	b.n	8006af4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006af8:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <prvSwitchTimerLists+0xc4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1b0      	bne.n	8006a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b02:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <prvSwitchTimerLists+0xc4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b08:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <prvSwitchTimerLists+0xc8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <prvSwitchTimerLists+0xc4>)
 8006b0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b10:	4a04      	ldr	r2, [pc, #16]	@ (8006b24 <prvSwitchTimerLists+0xc8>)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6013      	str	r3, [r2, #0]
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000e00 	.word	0x20000e00
 8006b24:	20000e04 	.word	0x20000e04

08006b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b2e:	f000 f96b 	bl	8006e08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b32:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d120      	bne.n	8006b7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b3a:	4814      	ldr	r0, [pc, #80]	@ (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b3c:	f7fd ff98 	bl	8004a70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b40:	4813      	ldr	r0, [pc, #76]	@ (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b42:	f7fd ff95 	bl	8004a70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b46:	4b13      	ldr	r3, [pc, #76]	@ (8006b94 <prvCheckForValidListAndQueue+0x6c>)
 8006b48:	4a10      	ldr	r2, [pc, #64]	@ (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b4c:	4b12      	ldr	r3, [pc, #72]	@ (8006b98 <prvCheckForValidListAndQueue+0x70>)
 8006b4e:	4a10      	ldr	r2, [pc, #64]	@ (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b52:	2300      	movs	r3, #0
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <prvCheckForValidListAndQueue+0x74>)
 8006b58:	4a11      	ldr	r2, [pc, #68]	@ (8006ba0 <prvCheckForValidListAndQueue+0x78>)
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	200a      	movs	r0, #10
 8006b5e:	f7fe f8a5 	bl	8004cac <xQueueGenericCreateStatic>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4a08      	ldr	r2, [pc, #32]	@ (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b68:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	490b      	ldr	r1, [pc, #44]	@ (8006ba4 <prvCheckForValidListAndQueue+0x7c>)
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fd88 	bl	800568c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b7c:	f000 f976 	bl	8006e6c <vPortExitCritical>
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000e08 	.word	0x20000e08
 8006b8c:	20000dd8 	.word	0x20000dd8
 8006b90:	20000dec 	.word	0x20000dec
 8006b94:	20000e00 	.word	0x20000e00
 8006b98:	20000e04 	.word	0x20000e04
 8006b9c:	20000eb4 	.word	0x20000eb4
 8006ba0:	20000e14 	.word	0x20000e14
 8006ba4:	08008404 	.word	0x08008404

08006ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8006c0c <pxPortInitialiseStack+0x64>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b14      	subs	r3, #20
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f06f 0202 	mvn.w	r2, #2
 8006bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3b20      	subs	r3, #32
 8006bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b13      	ldr	r3, [pc, #76]	@ (8006c68 <prvTaskExitError+0x58>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c22:	d00b      	beq.n	8006c3c <prvTaskExitError+0x2c>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <prvTaskExitError+0x28>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60bb      	str	r3, [r7, #8]
}
 8006c4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c50:	bf00      	nop
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0fc      	beq.n	8006c52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	2000000c 	.word	0x2000000c
 8006c6c:	00000000 	.word	0x00000000

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	4770      	bx	lr
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst2>:
 8006c90:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c98:	4808      	ldr	r0, [pc, #32]	@ (8006cbc <prvPortStartFirstTask+0x24>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8814 	msr	CONTROL, r0
 8006caa:	b662      	cpsie	i
 8006cac:	b661      	cpsie	f
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	df00      	svc	0
 8006cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cba:	bf00      	nop
 8006cbc:	e000ed08 	.word	0xe000ed08

08006cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cc6:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <xPortStartScheduler+0x124>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a47      	ldr	r2, [pc, #284]	@ (8006de8 <xPortStartScheduler+0x128>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d10b      	bne.n	8006ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	613b      	str	r3, [r7, #16]
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	e7fd      	b.n	8006ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8006de4 <xPortStartScheduler+0x124>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a3f      	ldr	r2, [pc, #252]	@ (8006dec <xPortStartScheduler+0x12c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10b      	bne.n	8006d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60fb      	str	r3, [r7, #12]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d0a:	4b39      	ldr	r3, [pc, #228]	@ (8006df0 <xPortStartScheduler+0x130>)
 8006d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	22ff      	movs	r2, #255	@ 0xff
 8006d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	4b31      	ldr	r3, [pc, #196]	@ (8006df4 <xPortStartScheduler+0x134>)
 8006d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d32:	4b31      	ldr	r3, [pc, #196]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d34:	2207      	movs	r2, #7
 8006d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d38:	e009      	b.n	8006d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a2d      	ldr	r2, [pc, #180]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b80      	cmp	r3, #128	@ 0x80
 8006d58:	d0ef      	beq.n	8006d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d5a:	4b27      	ldr	r3, [pc, #156]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1c3 0307 	rsb	r3, r3, #7
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d00b      	beq.n	8006d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	4a1c      	ldr	r2, [pc, #112]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d88:	4b1b      	ldr	r3, [pc, #108]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d90:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <xPortStartScheduler+0x138>)
 8006d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d9c:	4b17      	ldr	r3, [pc, #92]	@ (8006dfc <xPortStartScheduler+0x13c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a16      	ldr	r2, [pc, #88]	@ (8006dfc <xPortStartScheduler+0x13c>)
 8006da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006da8:	4b14      	ldr	r3, [pc, #80]	@ (8006dfc <xPortStartScheduler+0x13c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a13      	ldr	r2, [pc, #76]	@ (8006dfc <xPortStartScheduler+0x13c>)
 8006dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006db4:	f000 f8da 	bl	8006f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006db8:	4b11      	ldr	r3, [pc, #68]	@ (8006e00 <xPortStartScheduler+0x140>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dbe:	f000 f8f9 	bl	8006fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dc2:	4b10      	ldr	r3, [pc, #64]	@ (8006e04 <xPortStartScheduler+0x144>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8006e04 <xPortStartScheduler+0x144>)
 8006dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dce:	f7ff ff63 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dd2:	f7ff f83d 	bl	8005e50 <vTaskSwitchContext>
	prvTaskExitError();
 8006dd6:	f7ff ff1b 	bl	8006c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	e000ed00 	.word	0xe000ed00
 8006de8:	410fc271 	.word	0x410fc271
 8006dec:	410fc270 	.word	0x410fc270
 8006df0:	e000e400 	.word	0xe000e400
 8006df4:	20000f04 	.word	0x20000f04
 8006df8:	20000f08 	.word	0x20000f08
 8006dfc:	e000ed20 	.word	0xe000ed20
 8006e00:	2000000c 	.word	0x2000000c
 8006e04:	e000ef34 	.word	0xe000ef34

08006e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e22:	4b10      	ldr	r3, [pc, #64]	@ (8006e64 <vPortEnterCritical+0x5c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3301      	adds	r3, #1
 8006e28:	4a0e      	ldr	r2, [pc, #56]	@ (8006e64 <vPortEnterCritical+0x5c>)
 8006e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <vPortEnterCritical+0x5c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d110      	bne.n	8006e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e34:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <vPortEnterCritical+0x60>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	603b      	str	r3, [r7, #0]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <vPortEnterCritical+0x4a>
	}
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	2000000c 	.word	0x2000000c
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e72:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <vPortExitCritical+0x50>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <vPortExitCritical+0x26>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	607b      	str	r3, [r7, #4]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <vPortExitCritical+0x50>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	4a08      	ldr	r2, [pc, #32]	@ (8006ebc <vPortExitCritical+0x50>)
 8006e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e9c:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <vPortExitCritical+0x50>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <vPortExitCritical+0x44>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f383 8811 	msr	BASEPRI, r3
}
 8006eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	2000000c 	.word	0x2000000c

08006ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ec0:	f3ef 8009 	mrs	r0, PSP
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <pxCurrentTCBConst>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f01e 0f10 	tst.w	lr, #16
 8006ed0:	bf08      	it	eq
 8006ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	6010      	str	r0, [r2, #0]
 8006edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ee4:	f380 8811 	msr	BASEPRI, r0
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f7fe ffae 	bl	8005e50 <vTaskSwitchContext>
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	f380 8811 	msr	BASEPRI, r0
 8006efc:	bc09      	pop	{r0, r3}
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	6808      	ldr	r0, [r1, #0]
 8006f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f06:	f01e 0f10 	tst.w	lr, #16
 8006f0a:	bf08      	it	eq
 8006f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f10:	f380 8809 	msr	PSP, r0
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst>:
 8006f20:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f42:	f7fe fecb 	bl	8005cdc <xTaskIncrementTick>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <xPortSysTickHandler+0x40>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f383 8811 	msr	BASEPRI, r3
}
 8006f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <vPortSetupTimerInterrupt+0x34>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <vPortSetupTimerInterrupt+0x38>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <vPortSetupTimerInterrupt+0x3c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	@ (8006fac <vPortSetupTimerInterrupt+0x40>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	099b      	lsrs	r3, r3, #6
 8006f88:	4a09      	ldr	r2, [pc, #36]	@ (8006fb0 <vPortSetupTimerInterrupt+0x44>)
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f8e:	4b04      	ldr	r3, [pc, #16]	@ (8006fa0 <vPortSetupTimerInterrupt+0x34>)
 8006f90:	2207      	movs	r2, #7
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	e000e010 	.word	0xe000e010
 8006fa4:	e000e018 	.word	0xe000e018
 8006fa8:	20000000 	.word	0x20000000
 8006fac:	10624dd3 	.word	0x10624dd3
 8006fb0:	e000e014 	.word	0xe000e014

08006fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006fc4 <vPortEnableVFP+0x10>
 8006fb8:	6801      	ldr	r1, [r0, #0]
 8006fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006fbe:	6001      	str	r1, [r0, #0]
 8006fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fc2:	bf00      	nop
 8006fc4:	e000ed88 	.word	0xe000ed88

08006fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fce:	f3ef 8305 	mrs	r3, IPSR
 8006fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b0f      	cmp	r3, #15
 8006fd8:	d915      	bls.n	8007006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fda:	4a18      	ldr	r2, [pc, #96]	@ (800703c <vPortValidateInterruptPriority+0x74>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fe4:	4b16      	ldr	r3, [pc, #88]	@ (8007040 <vPortValidateInterruptPriority+0x78>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	7afa      	ldrb	r2, [r7, #11]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d20b      	bcs.n	8007006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	607b      	str	r3, [r7, #4]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007006:	4b0f      	ldr	r3, [pc, #60]	@ (8007044 <vPortValidateInterruptPriority+0x7c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800700e:	4b0e      	ldr	r3, [pc, #56]	@ (8007048 <vPortValidateInterruptPriority+0x80>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d90b      	bls.n	800702e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	603b      	str	r3, [r7, #0]
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <vPortValidateInterruptPriority+0x62>
	}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	e000e3f0 	.word	0xe000e3f0
 8007040:	20000f04 	.word	0x20000f04
 8007044:	e000ed0c 	.word	0xe000ed0c
 8007048:	20000f08 	.word	0x20000f08

0800704c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	@ 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007058:	f7fe fd84 	bl	8005b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800705c:	4b5c      	ldr	r3, [pc, #368]	@ (80071d0 <pvPortMalloc+0x184>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007064:	f000 f924 	bl	80072b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007068:	4b5a      	ldr	r3, [pc, #360]	@ (80071d4 <pvPortMalloc+0x188>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4013      	ands	r3, r2
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 8095 	bne.w	80071a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01e      	beq.n	80070ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800707c:	2208      	movs	r2, #8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d015      	beq.n	80070ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f023 0307 	bic.w	r3, r3, #7
 8007094:	3308      	adds	r3, #8
 8007096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <pvPortMalloc+0x6e>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	617b      	str	r3, [r7, #20]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d06f      	beq.n	80071a0 <pvPortMalloc+0x154>
 80070c0:	4b45      	ldr	r3, [pc, #276]	@ (80071d8 <pvPortMalloc+0x18c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d86a      	bhi.n	80071a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070ca:	4b44      	ldr	r3, [pc, #272]	@ (80071dc <pvPortMalloc+0x190>)
 80070cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070ce:	4b43      	ldr	r3, [pc, #268]	@ (80071dc <pvPortMalloc+0x190>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070d4:	e004      	b.n	80070e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d903      	bls.n	80070f2 <pvPortMalloc+0xa6>
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f1      	bne.n	80070d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070f2:	4b37      	ldr	r3, [pc, #220]	@ (80071d0 <pvPortMalloc+0x184>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d051      	beq.n	80071a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2208      	movs	r2, #8
 8007102:	4413      	add	r3, r2
 8007104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	2308      	movs	r3, #8
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	429a      	cmp	r2, r3
 800711c:	d920      	bls.n	8007160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800711e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4413      	add	r3, r2
 8007124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <pvPortMalloc+0xfc>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	613b      	str	r3, [r7, #16]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800715a:	69b8      	ldr	r0, [r7, #24]
 800715c:	f000 f90a 	bl	8007374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007160:	4b1d      	ldr	r3, [pc, #116]	@ (80071d8 <pvPortMalloc+0x18c>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	4a1b      	ldr	r2, [pc, #108]	@ (80071d8 <pvPortMalloc+0x18c>)
 800716c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800716e:	4b1a      	ldr	r3, [pc, #104]	@ (80071d8 <pvPortMalloc+0x18c>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b1b      	ldr	r3, [pc, #108]	@ (80071e0 <pvPortMalloc+0x194>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d203      	bcs.n	8007182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800717a:	4b17      	ldr	r3, [pc, #92]	@ (80071d8 <pvPortMalloc+0x18c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <pvPortMalloc+0x194>)
 8007180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	4b13      	ldr	r3, [pc, #76]	@ (80071d4 <pvPortMalloc+0x188>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	431a      	orrs	r2, r3
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007196:	4b13      	ldr	r3, [pc, #76]	@ (80071e4 <pvPortMalloc+0x198>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	4a11      	ldr	r2, [pc, #68]	@ (80071e4 <pvPortMalloc+0x198>)
 800719e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071a0:	f7fe fcee 	bl	8005b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <pvPortMalloc+0x17a>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60fb      	str	r3, [r7, #12]
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <pvPortMalloc+0x176>
	return pvReturn;
 80071c6:	69fb      	ldr	r3, [r7, #28]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3728      	adds	r7, #40	@ 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20001b14 	.word	0x20001b14
 80071d4:	20001b28 	.word	0x20001b28
 80071d8:	20001b18 	.word	0x20001b18
 80071dc:	20001b0c 	.word	0x20001b0c
 80071e0:	20001b1c 	.word	0x20001b1c
 80071e4:	20001b20 	.word	0x20001b20

080071e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d04f      	beq.n	800729a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071fa:	2308      	movs	r3, #8
 80071fc:	425b      	negs	r3, r3
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b25      	ldr	r3, [pc, #148]	@ (80072a4 <vPortFree+0xbc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4013      	ands	r3, r2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <vPortFree+0x46>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <vPortFree+0x66>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <vPortFree+0xbc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4013      	ands	r3, r2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01e      	beq.n	800729a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11a      	bne.n	800729a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	4b0e      	ldr	r3, [pc, #56]	@ (80072a4 <vPortFree+0xbc>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	43db      	mvns	r3, r3
 800726e:	401a      	ands	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007274:	f7fe fc76 	bl	8005b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <vPortFree+0xc0>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4413      	add	r3, r2
 8007282:	4a09      	ldr	r2, [pc, #36]	@ (80072a8 <vPortFree+0xc0>)
 8007284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007286:	6938      	ldr	r0, [r7, #16]
 8007288:	f000 f874 	bl	8007374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <vPortFree+0xc4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	4a06      	ldr	r2, [pc, #24]	@ (80072ac <vPortFree+0xc4>)
 8007294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007296:	f7fe fc73 	bl	8005b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800729a:	bf00      	nop
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20001b28 	.word	0x20001b28
 80072a8:	20001b18 	.word	0x20001b18
 80072ac:	20001b24 	.word	0x20001b24

080072b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80072ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072bc:	4b27      	ldr	r3, [pc, #156]	@ (800735c <prvHeapInit+0xac>)
 80072be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00c      	beq.n	80072e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3307      	adds	r3, #7
 80072ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0307 	bic.w	r3, r3, #7
 80072d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	4a1f      	ldr	r2, [pc, #124]	@ (800735c <prvHeapInit+0xac>)
 80072e0:	4413      	add	r3, r2
 80072e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007360 <prvHeapInit+0xb0>)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007360 <prvHeapInit+0xb0>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	4413      	add	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072fc:	2208      	movs	r2, #8
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4a15      	ldr	r2, [pc, #84]	@ (8007364 <prvHeapInit+0xb4>)
 8007310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007312:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <prvHeapInit+0xb4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2200      	movs	r2, #0
 8007318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800731a:	4b12      	ldr	r3, [pc, #72]	@ (8007364 <prvHeapInit+0xb4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007330:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <prvHeapInit+0xb4>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4a0a      	ldr	r2, [pc, #40]	@ (8007368 <prvHeapInit+0xb8>)
 800733e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4a09      	ldr	r2, [pc, #36]	@ (800736c <prvHeapInit+0xbc>)
 8007346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <prvHeapInit+0xc0>)
 800734a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800734e:	601a      	str	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000f0c 	.word	0x20000f0c
 8007360:	20001b0c 	.word	0x20001b0c
 8007364:	20001b14 	.word	0x20001b14
 8007368:	20001b1c 	.word	0x20001b1c
 800736c:	20001b18 	.word	0x20001b18
 8007370:	20001b28 	.word	0x20001b28

08007374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800737c:	4b28      	ldr	r3, [pc, #160]	@ (8007420 <prvInsertBlockIntoFreeList+0xac>)
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e002      	b.n	8007388 <prvInsertBlockIntoFreeList+0x14>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	429a      	cmp	r2, r3
 8007390:	d8f7      	bhi.n	8007382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	4413      	add	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d108      	bne.n	80073b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	441a      	add	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	441a      	add	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d118      	bne.n	80073fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	4b15      	ldr	r3, [pc, #84]	@ (8007424 <prvInsertBlockIntoFreeList+0xb0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d00d      	beq.n	80073f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	441a      	add	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e008      	b.n	8007404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <prvInsertBlockIntoFreeList+0xb0>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e003      	b.n	8007404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	429a      	cmp	r2, r3
 800740a:	d002      	beq.n	8007412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20001b0c 	.word	0x20001b0c
 8007424:	20001b14 	.word	0x20001b14

08007428 <std>:
 8007428:	2300      	movs	r3, #0
 800742a:	b510      	push	{r4, lr}
 800742c:	4604      	mov	r4, r0
 800742e:	e9c0 3300 	strd	r3, r3, [r0]
 8007432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007436:	6083      	str	r3, [r0, #8]
 8007438:	8181      	strh	r1, [r0, #12]
 800743a:	6643      	str	r3, [r0, #100]	@ 0x64
 800743c:	81c2      	strh	r2, [r0, #14]
 800743e:	6183      	str	r3, [r0, #24]
 8007440:	4619      	mov	r1, r3
 8007442:	2208      	movs	r2, #8
 8007444:	305c      	adds	r0, #92	@ 0x5c
 8007446:	f000 f9f9 	bl	800783c <memset>
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <std+0x58>)
 800744c:	6263      	str	r3, [r4, #36]	@ 0x24
 800744e:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <std+0x5c>)
 8007450:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <std+0x60>)
 8007454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007456:	4b0d      	ldr	r3, [pc, #52]	@ (800748c <std+0x64>)
 8007458:	6323      	str	r3, [r4, #48]	@ 0x30
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <std+0x68>)
 800745c:	6224      	str	r4, [r4, #32]
 800745e:	429c      	cmp	r4, r3
 8007460:	d006      	beq.n	8007470 <std+0x48>
 8007462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007466:	4294      	cmp	r4, r2
 8007468:	d002      	beq.n	8007470 <std+0x48>
 800746a:	33d0      	adds	r3, #208	@ 0xd0
 800746c:	429c      	cmp	r4, r3
 800746e:	d105      	bne.n	800747c <std+0x54>
 8007470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007478:	f000 ba6c 	b.w	8007954 <__retarget_lock_init_recursive>
 800747c:	bd10      	pop	{r4, pc}
 800747e:	bf00      	nop
 8007480:	0800768d 	.word	0x0800768d
 8007484:	080076af 	.word	0x080076af
 8007488:	080076e7 	.word	0x080076e7
 800748c:	0800770b 	.word	0x0800770b
 8007490:	20001b2c 	.word	0x20001b2c

08007494 <stdio_exit_handler>:
 8007494:	4a02      	ldr	r2, [pc, #8]	@ (80074a0 <stdio_exit_handler+0xc>)
 8007496:	4903      	ldr	r1, [pc, #12]	@ (80074a4 <stdio_exit_handler+0x10>)
 8007498:	4803      	ldr	r0, [pc, #12]	@ (80074a8 <stdio_exit_handler+0x14>)
 800749a:	f000 b869 	b.w	8007570 <_fwalk_sglue>
 800749e:	bf00      	nop
 80074a0:	20000010 	.word	0x20000010
 80074a4:	08008211 	.word	0x08008211
 80074a8:	20000020 	.word	0x20000020

080074ac <cleanup_stdio>:
 80074ac:	6841      	ldr	r1, [r0, #4]
 80074ae:	4b0c      	ldr	r3, [pc, #48]	@ (80074e0 <cleanup_stdio+0x34>)
 80074b0:	4299      	cmp	r1, r3
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	d001      	beq.n	80074bc <cleanup_stdio+0x10>
 80074b8:	f000 feaa 	bl	8008210 <_fflush_r>
 80074bc:	68a1      	ldr	r1, [r4, #8]
 80074be:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <cleanup_stdio+0x38>)
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <cleanup_stdio+0x1e>
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 fea3 	bl	8008210 <_fflush_r>
 80074ca:	68e1      	ldr	r1, [r4, #12]
 80074cc:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <cleanup_stdio+0x3c>)
 80074ce:	4299      	cmp	r1, r3
 80074d0:	d004      	beq.n	80074dc <cleanup_stdio+0x30>
 80074d2:	4620      	mov	r0, r4
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d8:	f000 be9a 	b.w	8008210 <_fflush_r>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	bf00      	nop
 80074e0:	20001b2c 	.word	0x20001b2c
 80074e4:	20001b94 	.word	0x20001b94
 80074e8:	20001bfc 	.word	0x20001bfc

080074ec <global_stdio_init.part.0>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	4b0b      	ldr	r3, [pc, #44]	@ (800751c <global_stdio_init.part.0+0x30>)
 80074f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007520 <global_stdio_init.part.0+0x34>)
 80074f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007524 <global_stdio_init.part.0+0x38>)
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	4620      	mov	r0, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	2104      	movs	r1, #4
 80074fc:	f7ff ff94 	bl	8007428 <std>
 8007500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007504:	2201      	movs	r2, #1
 8007506:	2109      	movs	r1, #9
 8007508:	f7ff ff8e 	bl	8007428 <std>
 800750c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007510:	2202      	movs	r2, #2
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007516:	2112      	movs	r1, #18
 8007518:	f7ff bf86 	b.w	8007428 <std>
 800751c:	20001c64 	.word	0x20001c64
 8007520:	20001b2c 	.word	0x20001b2c
 8007524:	08007495 	.word	0x08007495

08007528 <__sfp_lock_acquire>:
 8007528:	4801      	ldr	r0, [pc, #4]	@ (8007530 <__sfp_lock_acquire+0x8>)
 800752a:	f000 ba14 	b.w	8007956 <__retarget_lock_acquire_recursive>
 800752e:	bf00      	nop
 8007530:	20001c6d 	.word	0x20001c6d

08007534 <__sfp_lock_release>:
 8007534:	4801      	ldr	r0, [pc, #4]	@ (800753c <__sfp_lock_release+0x8>)
 8007536:	f000 ba0f 	b.w	8007958 <__retarget_lock_release_recursive>
 800753a:	bf00      	nop
 800753c:	20001c6d 	.word	0x20001c6d

08007540 <__sinit>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	f7ff fff0 	bl	8007528 <__sfp_lock_acquire>
 8007548:	6a23      	ldr	r3, [r4, #32]
 800754a:	b11b      	cbz	r3, 8007554 <__sinit+0x14>
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007550:	f7ff bff0 	b.w	8007534 <__sfp_lock_release>
 8007554:	4b04      	ldr	r3, [pc, #16]	@ (8007568 <__sinit+0x28>)
 8007556:	6223      	str	r3, [r4, #32]
 8007558:	4b04      	ldr	r3, [pc, #16]	@ (800756c <__sinit+0x2c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f5      	bne.n	800754c <__sinit+0xc>
 8007560:	f7ff ffc4 	bl	80074ec <global_stdio_init.part.0>
 8007564:	e7f2      	b.n	800754c <__sinit+0xc>
 8007566:	bf00      	nop
 8007568:	080074ad 	.word	0x080074ad
 800756c:	20001c64 	.word	0x20001c64

08007570 <_fwalk_sglue>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	4607      	mov	r7, r0
 8007576:	4688      	mov	r8, r1
 8007578:	4614      	mov	r4, r2
 800757a:	2600      	movs	r6, #0
 800757c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007580:	f1b9 0901 	subs.w	r9, r9, #1
 8007584:	d505      	bpl.n	8007592 <_fwalk_sglue+0x22>
 8007586:	6824      	ldr	r4, [r4, #0]
 8007588:	2c00      	cmp	r4, #0
 800758a:	d1f7      	bne.n	800757c <_fwalk_sglue+0xc>
 800758c:	4630      	mov	r0, r6
 800758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d907      	bls.n	80075a8 <_fwalk_sglue+0x38>
 8007598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800759c:	3301      	adds	r3, #1
 800759e:	d003      	beq.n	80075a8 <_fwalk_sglue+0x38>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c0      	blx	r8
 80075a6:	4306      	orrs	r6, r0
 80075a8:	3568      	adds	r5, #104	@ 0x68
 80075aa:	e7e9      	b.n	8007580 <_fwalk_sglue+0x10>

080075ac <iprintf>:
 80075ac:	b40f      	push	{r0, r1, r2, r3}
 80075ae:	b507      	push	{r0, r1, r2, lr}
 80075b0:	4906      	ldr	r1, [pc, #24]	@ (80075cc <iprintf+0x20>)
 80075b2:	ab04      	add	r3, sp, #16
 80075b4:	6808      	ldr	r0, [r1, #0]
 80075b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ba:	6881      	ldr	r1, [r0, #8]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	f000 fafd 	bl	8007bbc <_vfiprintf_r>
 80075c2:	b003      	add	sp, #12
 80075c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c8:	b004      	add	sp, #16
 80075ca:	4770      	bx	lr
 80075cc:	2000001c 	.word	0x2000001c

080075d0 <_puts_r>:
 80075d0:	6a03      	ldr	r3, [r0, #32]
 80075d2:	b570      	push	{r4, r5, r6, lr}
 80075d4:	6884      	ldr	r4, [r0, #8]
 80075d6:	4605      	mov	r5, r0
 80075d8:	460e      	mov	r6, r1
 80075da:	b90b      	cbnz	r3, 80075e0 <_puts_r+0x10>
 80075dc:	f7ff ffb0 	bl	8007540 <__sinit>
 80075e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075e2:	07db      	lsls	r3, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_puts_r+0x22>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	0598      	lsls	r0, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_puts_r+0x22>
 80075ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ee:	f000 f9b2 	bl	8007956 <__retarget_lock_acquire_recursive>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	0719      	lsls	r1, r3, #28
 80075f6:	d502      	bpl.n	80075fe <_puts_r+0x2e>
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d135      	bne.n	800766a <_puts_r+0x9a>
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 f8c5 	bl	8007790 <__swsetup_r>
 8007606:	b380      	cbz	r0, 800766a <_puts_r+0x9a>
 8007608:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800760c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800760e:	07da      	lsls	r2, r3, #31
 8007610:	d405      	bmi.n	800761e <_puts_r+0x4e>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	059b      	lsls	r3, r3, #22
 8007616:	d402      	bmi.n	800761e <_puts_r+0x4e>
 8007618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800761a:	f000 f99d 	bl	8007958 <__retarget_lock_release_recursive>
 800761e:	4628      	mov	r0, r5
 8007620:	bd70      	pop	{r4, r5, r6, pc}
 8007622:	2b00      	cmp	r3, #0
 8007624:	da04      	bge.n	8007630 <_puts_r+0x60>
 8007626:	69a2      	ldr	r2, [r4, #24]
 8007628:	429a      	cmp	r2, r3
 800762a:	dc17      	bgt.n	800765c <_puts_r+0x8c>
 800762c:	290a      	cmp	r1, #10
 800762e:	d015      	beq.n	800765c <_puts_r+0x8c>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	7019      	strb	r1, [r3, #0]
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800763e:	3b01      	subs	r3, #1
 8007640:	60a3      	str	r3, [r4, #8]
 8007642:	2900      	cmp	r1, #0
 8007644:	d1ed      	bne.n	8007622 <_puts_r+0x52>
 8007646:	2b00      	cmp	r3, #0
 8007648:	da11      	bge.n	800766e <_puts_r+0x9e>
 800764a:	4622      	mov	r2, r4
 800764c:	210a      	movs	r1, #10
 800764e:	4628      	mov	r0, r5
 8007650:	f000 f85f 	bl	8007712 <__swbuf_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d0d7      	beq.n	8007608 <_puts_r+0x38>
 8007658:	250a      	movs	r5, #10
 800765a:	e7d7      	b.n	800760c <_puts_r+0x3c>
 800765c:	4622      	mov	r2, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f857 	bl	8007712 <__swbuf_r>
 8007664:	3001      	adds	r0, #1
 8007666:	d1e7      	bne.n	8007638 <_puts_r+0x68>
 8007668:	e7ce      	b.n	8007608 <_puts_r+0x38>
 800766a:	3e01      	subs	r6, #1
 800766c:	e7e4      	b.n	8007638 <_puts_r+0x68>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	6022      	str	r2, [r4, #0]
 8007674:	220a      	movs	r2, #10
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e7ee      	b.n	8007658 <_puts_r+0x88>
	...

0800767c <puts>:
 800767c:	4b02      	ldr	r3, [pc, #8]	@ (8007688 <puts+0xc>)
 800767e:	4601      	mov	r1, r0
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	f7ff bfa5 	b.w	80075d0 <_puts_r>
 8007686:	bf00      	nop
 8007688:	2000001c 	.word	0x2000001c

0800768c <__sread>:
 800768c:	b510      	push	{r4, lr}
 800768e:	460c      	mov	r4, r1
 8007690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007694:	f000 f910 	bl	80078b8 <_read_r>
 8007698:	2800      	cmp	r0, #0
 800769a:	bfab      	itete	ge
 800769c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800769e:	89a3      	ldrhlt	r3, [r4, #12]
 80076a0:	181b      	addge	r3, r3, r0
 80076a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076a6:	bfac      	ite	ge
 80076a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076aa:	81a3      	strhlt	r3, [r4, #12]
 80076ac:	bd10      	pop	{r4, pc}

080076ae <__swrite>:
 80076ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	461f      	mov	r7, r3
 80076b4:	898b      	ldrh	r3, [r1, #12]
 80076b6:	05db      	lsls	r3, r3, #23
 80076b8:	4605      	mov	r5, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	4616      	mov	r6, r2
 80076be:	d505      	bpl.n	80076cc <__swrite+0x1e>
 80076c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c4:	2302      	movs	r3, #2
 80076c6:	2200      	movs	r2, #0
 80076c8:	f000 f8e4 	bl	8007894 <_lseek_r>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076d6:	81a3      	strh	r3, [r4, #12]
 80076d8:	4632      	mov	r2, r6
 80076da:	463b      	mov	r3, r7
 80076dc:	4628      	mov	r0, r5
 80076de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	f000 b8fb 	b.w	80078dc <_write_r>

080076e6 <__sseek>:
 80076e6:	b510      	push	{r4, lr}
 80076e8:	460c      	mov	r4, r1
 80076ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ee:	f000 f8d1 	bl	8007894 <_lseek_r>
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	bf15      	itete	ne
 80076f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007702:	81a3      	strheq	r3, [r4, #12]
 8007704:	bf18      	it	ne
 8007706:	81a3      	strhne	r3, [r4, #12]
 8007708:	bd10      	pop	{r4, pc}

0800770a <__sclose>:
 800770a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770e:	f000 b8b1 	b.w	8007874 <_close_r>

08007712 <__swbuf_r>:
 8007712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007714:	460e      	mov	r6, r1
 8007716:	4614      	mov	r4, r2
 8007718:	4605      	mov	r5, r0
 800771a:	b118      	cbz	r0, 8007724 <__swbuf_r+0x12>
 800771c:	6a03      	ldr	r3, [r0, #32]
 800771e:	b90b      	cbnz	r3, 8007724 <__swbuf_r+0x12>
 8007720:	f7ff ff0e 	bl	8007540 <__sinit>
 8007724:	69a3      	ldr	r3, [r4, #24]
 8007726:	60a3      	str	r3, [r4, #8]
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	071a      	lsls	r2, r3, #28
 800772c:	d501      	bpl.n	8007732 <__swbuf_r+0x20>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	b943      	cbnz	r3, 8007744 <__swbuf_r+0x32>
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	f000 f82b 	bl	8007790 <__swsetup_r>
 800773a:	b118      	cbz	r0, 8007744 <__swbuf_r+0x32>
 800773c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007740:	4638      	mov	r0, r7
 8007742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	6922      	ldr	r2, [r4, #16]
 8007748:	1a98      	subs	r0, r3, r2
 800774a:	6963      	ldr	r3, [r4, #20]
 800774c:	b2f6      	uxtb	r6, r6
 800774e:	4283      	cmp	r3, r0
 8007750:	4637      	mov	r7, r6
 8007752:	dc05      	bgt.n	8007760 <__swbuf_r+0x4e>
 8007754:	4621      	mov	r1, r4
 8007756:	4628      	mov	r0, r5
 8007758:	f000 fd5a 	bl	8008210 <_fflush_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	d1ed      	bne.n	800773c <__swbuf_r+0x2a>
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	3b01      	subs	r3, #1
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	6022      	str	r2, [r4, #0]
 800776c:	701e      	strb	r6, [r3, #0]
 800776e:	6962      	ldr	r2, [r4, #20]
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	429a      	cmp	r2, r3
 8007774:	d004      	beq.n	8007780 <__swbuf_r+0x6e>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	07db      	lsls	r3, r3, #31
 800777a:	d5e1      	bpl.n	8007740 <__swbuf_r+0x2e>
 800777c:	2e0a      	cmp	r6, #10
 800777e:	d1df      	bne.n	8007740 <__swbuf_r+0x2e>
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f000 fd44 	bl	8008210 <_fflush_r>
 8007788:	2800      	cmp	r0, #0
 800778a:	d0d9      	beq.n	8007740 <__swbuf_r+0x2e>
 800778c:	e7d6      	b.n	800773c <__swbuf_r+0x2a>
	...

08007790 <__swsetup_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4b29      	ldr	r3, [pc, #164]	@ (8007838 <__swsetup_r+0xa8>)
 8007794:	4605      	mov	r5, r0
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	460c      	mov	r4, r1
 800779a:	b118      	cbz	r0, 80077a4 <__swsetup_r+0x14>
 800779c:	6a03      	ldr	r3, [r0, #32]
 800779e:	b90b      	cbnz	r3, 80077a4 <__swsetup_r+0x14>
 80077a0:	f7ff fece 	bl	8007540 <__sinit>
 80077a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a8:	0719      	lsls	r1, r3, #28
 80077aa:	d422      	bmi.n	80077f2 <__swsetup_r+0x62>
 80077ac:	06da      	lsls	r2, r3, #27
 80077ae:	d407      	bmi.n	80077c0 <__swsetup_r+0x30>
 80077b0:	2209      	movs	r2, #9
 80077b2:	602a      	str	r2, [r5, #0]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077be:	e033      	b.n	8007828 <__swsetup_r+0x98>
 80077c0:	0758      	lsls	r0, r3, #29
 80077c2:	d512      	bpl.n	80077ea <__swsetup_r+0x5a>
 80077c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077c6:	b141      	cbz	r1, 80077da <__swsetup_r+0x4a>
 80077c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077cc:	4299      	cmp	r1, r3
 80077ce:	d002      	beq.n	80077d6 <__swsetup_r+0x46>
 80077d0:	4628      	mov	r0, r5
 80077d2:	f000 f8d1 	bl	8007978 <_free_r>
 80077d6:	2300      	movs	r3, #0
 80077d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	2300      	movs	r3, #0
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	f043 0308 	orr.w	r3, r3, #8
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	b94b      	cbnz	r3, 800780a <__swsetup_r+0x7a>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007800:	d003      	beq.n	800780a <__swsetup_r+0x7a>
 8007802:	4621      	mov	r1, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f000 fd51 	bl	80082ac <__smakebuf_r>
 800780a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780e:	f013 0201 	ands.w	r2, r3, #1
 8007812:	d00a      	beq.n	800782a <__swsetup_r+0x9a>
 8007814:	2200      	movs	r2, #0
 8007816:	60a2      	str	r2, [r4, #8]
 8007818:	6962      	ldr	r2, [r4, #20]
 800781a:	4252      	negs	r2, r2
 800781c:	61a2      	str	r2, [r4, #24]
 800781e:	6922      	ldr	r2, [r4, #16]
 8007820:	b942      	cbnz	r2, 8007834 <__swsetup_r+0xa4>
 8007822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007826:	d1c5      	bne.n	80077b4 <__swsetup_r+0x24>
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	0799      	lsls	r1, r3, #30
 800782c:	bf58      	it	pl
 800782e:	6962      	ldrpl	r2, [r4, #20]
 8007830:	60a2      	str	r2, [r4, #8]
 8007832:	e7f4      	b.n	800781e <__swsetup_r+0x8e>
 8007834:	2000      	movs	r0, #0
 8007836:	e7f7      	b.n	8007828 <__swsetup_r+0x98>
 8007838:	2000001c 	.word	0x2000001c

0800783c <memset>:
 800783c:	4402      	add	r2, r0
 800783e:	4603      	mov	r3, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	d100      	bne.n	8007846 <memset+0xa>
 8007844:	4770      	bx	lr
 8007846:	f803 1b01 	strb.w	r1, [r3], #1
 800784a:	e7f9      	b.n	8007840 <memset+0x4>

0800784c <strncpy>:
 800784c:	b510      	push	{r4, lr}
 800784e:	3901      	subs	r1, #1
 8007850:	4603      	mov	r3, r0
 8007852:	b132      	cbz	r2, 8007862 <strncpy+0x16>
 8007854:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007858:	f803 4b01 	strb.w	r4, [r3], #1
 800785c:	3a01      	subs	r2, #1
 800785e:	2c00      	cmp	r4, #0
 8007860:	d1f7      	bne.n	8007852 <strncpy+0x6>
 8007862:	441a      	add	r2, r3
 8007864:	2100      	movs	r1, #0
 8007866:	4293      	cmp	r3, r2
 8007868:	d100      	bne.n	800786c <strncpy+0x20>
 800786a:	bd10      	pop	{r4, pc}
 800786c:	f803 1b01 	strb.w	r1, [r3], #1
 8007870:	e7f9      	b.n	8007866 <strncpy+0x1a>
	...

08007874 <_close_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4d06      	ldr	r5, [pc, #24]	@ (8007890 <_close_r+0x1c>)
 8007878:	2300      	movs	r3, #0
 800787a:	4604      	mov	r4, r0
 800787c:	4608      	mov	r0, r1
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	f7f9 fa6f 	bl	8000d62 <_close>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d102      	bne.n	800788e <_close_r+0x1a>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	b103      	cbz	r3, 800788e <_close_r+0x1a>
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	20001c68 	.word	0x20001c68

08007894 <_lseek_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d07      	ldr	r5, [pc, #28]	@ (80078b4 <_lseek_r+0x20>)
 8007898:	4604      	mov	r4, r0
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	602a      	str	r2, [r5, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f7f9 fa84 	bl	8000db0 <_lseek>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_lseek_r+0x1e>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_lseek_r+0x1e>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	20001c68 	.word	0x20001c68

080078b8 <_read_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d07      	ldr	r5, [pc, #28]	@ (80078d8 <_read_r+0x20>)
 80078bc:	4604      	mov	r4, r0
 80078be:	4608      	mov	r0, r1
 80078c0:	4611      	mov	r1, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	602a      	str	r2, [r5, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f7f9 fa2e 	bl	8000d28 <_read>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_read_r+0x1e>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_read_r+0x1e>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20001c68 	.word	0x20001c68

080078dc <_write_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	@ (80078fc <_write_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7f8 fe60 	bl	80005b0 <_write>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_write_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_write_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20001c68 	.word	0x20001c68

08007900 <__errno>:
 8007900:	4b01      	ldr	r3, [pc, #4]	@ (8007908 <__errno+0x8>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2000001c 	.word	0x2000001c

0800790c <__libc_init_array>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4d0d      	ldr	r5, [pc, #52]	@ (8007944 <__libc_init_array+0x38>)
 8007910:	4c0d      	ldr	r4, [pc, #52]	@ (8007948 <__libc_init_array+0x3c>)
 8007912:	1b64      	subs	r4, r4, r5
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	2600      	movs	r6, #0
 8007918:	42a6      	cmp	r6, r4
 800791a:	d109      	bne.n	8007930 <__libc_init_array+0x24>
 800791c:	4d0b      	ldr	r5, [pc, #44]	@ (800794c <__libc_init_array+0x40>)
 800791e:	4c0c      	ldr	r4, [pc, #48]	@ (8007950 <__libc_init_array+0x44>)
 8007920:	f000 fd32 	bl	8008388 <_init>
 8007924:	1b64      	subs	r4, r4, r5
 8007926:	10a4      	asrs	r4, r4, #2
 8007928:	2600      	movs	r6, #0
 800792a:	42a6      	cmp	r6, r4
 800792c:	d105      	bne.n	800793a <__libc_init_array+0x2e>
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	f855 3b04 	ldr.w	r3, [r5], #4
 8007934:	4798      	blx	r3
 8007936:	3601      	adds	r6, #1
 8007938:	e7ee      	b.n	8007918 <__libc_init_array+0xc>
 800793a:	f855 3b04 	ldr.w	r3, [r5], #4
 800793e:	4798      	blx	r3
 8007940:	3601      	adds	r6, #1
 8007942:	e7f2      	b.n	800792a <__libc_init_array+0x1e>
 8007944:	080084d4 	.word	0x080084d4
 8007948:	080084d4 	.word	0x080084d4
 800794c:	080084d4 	.word	0x080084d4
 8007950:	080084d8 	.word	0x080084d8

08007954 <__retarget_lock_init_recursive>:
 8007954:	4770      	bx	lr

08007956 <__retarget_lock_acquire_recursive>:
 8007956:	4770      	bx	lr

08007958 <__retarget_lock_release_recursive>:
 8007958:	4770      	bx	lr

0800795a <memcpy>:
 800795a:	440a      	add	r2, r1
 800795c:	4291      	cmp	r1, r2
 800795e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007962:	d100      	bne.n	8007966 <memcpy+0xc>
 8007964:	4770      	bx	lr
 8007966:	b510      	push	{r4, lr}
 8007968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007970:	4291      	cmp	r1, r2
 8007972:	d1f9      	bne.n	8007968 <memcpy+0xe>
 8007974:	bd10      	pop	{r4, pc}
	...

08007978 <_free_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	2900      	cmp	r1, #0
 800797e:	d041      	beq.n	8007a04 <_free_r+0x8c>
 8007980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007984:	1f0c      	subs	r4, r1, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfb8      	it	lt
 800798a:	18e4      	addlt	r4, r4, r3
 800798c:	f000 f8e0 	bl	8007b50 <__malloc_lock>
 8007990:	4a1d      	ldr	r2, [pc, #116]	@ (8007a08 <_free_r+0x90>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x2c>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	4628      	mov	r0, r5
 800799c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a0:	f000 b8dc 	b.w	8007b5c <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x42>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	1821      	adds	r1, r4, r0
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1809      	addeq	r1, r1, r0
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x1e>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x4c>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x42>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1850      	adds	r0, r2, r1
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x6c>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	4401      	add	r1, r0
 80079d0:	1850      	adds	r0, r2, r1
 80079d2:	4283      	cmp	r3, r0
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x22>
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	6053      	str	r3, [r2, #4]
 80079de:	4408      	add	r0, r1
 80079e0:	6010      	str	r0, [r2, #0]
 80079e2:	e7da      	b.n	800799a <_free_r+0x22>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x74>
 80079e6:	230c      	movs	r3, #12
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x22>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf04      	itt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	bf04      	itt	eq
 80079fc:	1809      	addeq	r1, r1, r0
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7ca      	b.n	800799a <_free_r+0x22>
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	20001c74 	.word	0x20001c74

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a4c <sbrk_aligned+0x40>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f000 fca6 	bl	8008368 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 fca1 	bl	8008368 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d103      	bne.n	8007a32 <sbrk_aligned+0x26>
 8007a2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a2e:	4620      	mov	r0, r4
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	1cc4      	adds	r4, r0, #3
 8007a34:	f024 0403 	bic.w	r4, r4, #3
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d0f8      	beq.n	8007a2e <sbrk_aligned+0x22>
 8007a3c:	1a21      	subs	r1, r4, r0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 fc92 	bl	8008368 <_sbrk_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d1f2      	bne.n	8007a2e <sbrk_aligned+0x22>
 8007a48:	e7ef      	b.n	8007a2a <sbrk_aligned+0x1e>
 8007a4a:	bf00      	nop
 8007a4c:	20001c70 	.word	0x20001c70

08007a50 <_malloc_r>:
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4606      	mov	r6, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d904      	bls.n	8007a76 <_malloc_r+0x26>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	2000      	movs	r0, #0
 8007a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b4c <_malloc_r+0xfc>
 8007a7a:	f000 f869 	bl	8007b50 <__malloc_lock>
 8007a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a82:	461c      	mov	r4, r3
 8007a84:	bb44      	cbnz	r4, 8007ad8 <_malloc_r+0x88>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ffbf 	bl	8007a0c <sbrk_aligned>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	4604      	mov	r4, r0
 8007a92:	d158      	bne.n	8007b46 <_malloc_r+0xf6>
 8007a94:	f8d8 4000 	ldr.w	r4, [r8]
 8007a98:	4627      	mov	r7, r4
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	d143      	bne.n	8007b26 <_malloc_r+0xd6>
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	d04b      	beq.n	8007b3a <_malloc_r+0xea>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	eb04 0903 	add.w	r9, r4, r3
 8007aac:	f000 fc5c 	bl	8008368 <_sbrk_r>
 8007ab0:	4581      	cmp	r9, r0
 8007ab2:	d142      	bne.n	8007b3a <_malloc_r+0xea>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	1a6d      	subs	r5, r5, r1
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff ffa6 	bl	8007a0c <sbrk_aligned>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d03a      	beq.n	8007b3a <_malloc_r+0xea>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	442b      	add	r3, r5
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	bb62      	cbnz	r2, 8007b2c <_malloc_r+0xdc>
 8007ad2:	f8c8 7000 	str.w	r7, [r8]
 8007ad6:	e00f      	b.n	8007af8 <_malloc_r+0xa8>
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	1b52      	subs	r2, r2, r5
 8007adc:	d420      	bmi.n	8007b20 <_malloc_r+0xd0>
 8007ade:	2a0b      	cmp	r2, #11
 8007ae0:	d917      	bls.n	8007b12 <_malloc_r+0xc2>
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	6025      	str	r5, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	6059      	strne	r1, [r3, #4]
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	bf08      	it	eq
 8007af0:	f8c8 1000 	streq.w	r1, [r8]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4630      	mov	r0, r6
 8007afa:	f000 f82f 	bl	8007b5c <__malloc_unlock>
 8007afe:	f104 000b 	add.w	r0, r4, #11
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	f020 0007 	bic.w	r0, r0, #7
 8007b08:	1ac2      	subs	r2, r0, r3
 8007b0a:	bf1c      	itt	ne
 8007b0c:	1a1b      	subne	r3, r3, r0
 8007b0e:	50a3      	strne	r3, [r4, r2]
 8007b10:	e7af      	b.n	8007a72 <_malloc_r+0x22>
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	bf0c      	ite	eq
 8007b18:	f8c8 2000 	streq.w	r2, [r8]
 8007b1c:	605a      	strne	r2, [r3, #4]
 8007b1e:	e7eb      	b.n	8007af8 <_malloc_r+0xa8>
 8007b20:	4623      	mov	r3, r4
 8007b22:	6864      	ldr	r4, [r4, #4]
 8007b24:	e7ae      	b.n	8007a84 <_malloc_r+0x34>
 8007b26:	463c      	mov	r4, r7
 8007b28:	687f      	ldr	r7, [r7, #4]
 8007b2a:	e7b6      	b.n	8007a9a <_malloc_r+0x4a>
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d1fb      	bne.n	8007b2c <_malloc_r+0xdc>
 8007b34:	2300      	movs	r3, #0
 8007b36:	6053      	str	r3, [r2, #4]
 8007b38:	e7de      	b.n	8007af8 <_malloc_r+0xa8>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f000 f80c 	bl	8007b5c <__malloc_unlock>
 8007b44:	e794      	b.n	8007a70 <_malloc_r+0x20>
 8007b46:	6005      	str	r5, [r0, #0]
 8007b48:	e7d6      	b.n	8007af8 <_malloc_r+0xa8>
 8007b4a:	bf00      	nop
 8007b4c:	20001c74 	.word	0x20001c74

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	@ (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7ff bf00 	b.w	8007956 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	20001c6c 	.word	0x20001c6c

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7ff befb 	b.w	8007958 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	20001c6c 	.word	0x20001c6c

08007b68 <__sfputc_r>:
 8007b68:	6893      	ldr	r3, [r2, #8]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	b410      	push	{r4}
 8007b70:	6093      	str	r3, [r2, #8]
 8007b72:	da08      	bge.n	8007b86 <__sfputc_r+0x1e>
 8007b74:	6994      	ldr	r4, [r2, #24]
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	db01      	blt.n	8007b7e <__sfputc_r+0x16>
 8007b7a:	290a      	cmp	r1, #10
 8007b7c:	d103      	bne.n	8007b86 <__sfputc_r+0x1e>
 8007b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b82:	f7ff bdc6 	b.w	8007712 <__swbuf_r>
 8007b86:	6813      	ldr	r3, [r2, #0]
 8007b88:	1c58      	adds	r0, r3, #1
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	7019      	strb	r1, [r3, #0]
 8007b8e:	4608      	mov	r0, r1
 8007b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <__sfputs_r>:
 8007b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b98:	4606      	mov	r6, r0
 8007b9a:	460f      	mov	r7, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	18d5      	adds	r5, r2, r3
 8007ba0:	42ac      	cmp	r4, r5
 8007ba2:	d101      	bne.n	8007ba8 <__sfputs_r+0x12>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e007      	b.n	8007bb8 <__sfputs_r+0x22>
 8007ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bac:	463a      	mov	r2, r7
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ffda 	bl	8007b68 <__sfputc_r>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d1f3      	bne.n	8007ba0 <__sfputs_r+0xa>
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bbc <_vfiprintf_r>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	b09d      	sub	sp, #116	@ 0x74
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	4606      	mov	r6, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_vfiprintf_r+0x18>
 8007bcc:	6a03      	ldr	r3, [r0, #32]
 8007bce:	b90b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x18>
 8007bd0:	f7ff fcb6 	bl	8007540 <__sinit>
 8007bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bd6:	07d9      	lsls	r1, r3, #31
 8007bd8:	d405      	bmi.n	8007be6 <_vfiprintf_r+0x2a>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	059a      	lsls	r2, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_vfiprintf_r+0x2a>
 8007be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007be2:	f7ff feb8 	bl	8007956 <__retarget_lock_acquire_recursive>
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	071b      	lsls	r3, r3, #28
 8007bea:	d501      	bpl.n	8007bf0 <_vfiprintf_r+0x34>
 8007bec:	692b      	ldr	r3, [r5, #16]
 8007bee:	b99b      	cbnz	r3, 8007c18 <_vfiprintf_r+0x5c>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff fdcc 	bl	8007790 <__swsetup_r>
 8007bf8:	b170      	cbz	r0, 8007c18 <_vfiprintf_r+0x5c>
 8007bfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bfc:	07dc      	lsls	r4, r3, #31
 8007bfe:	d504      	bpl.n	8007c0a <_vfiprintf_r+0x4e>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c04:	b01d      	add	sp, #116	@ 0x74
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	0598      	lsls	r0, r3, #22
 8007c0e:	d4f7      	bmi.n	8007c00 <_vfiprintf_r+0x44>
 8007c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c12:	f7ff fea1 	bl	8007958 <__retarget_lock_release_recursive>
 8007c16:	e7f3      	b.n	8007c00 <_vfiprintf_r+0x44>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c26:	2330      	movs	r3, #48	@ 0x30
 8007c28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dd8 <_vfiprintf_r+0x21c>
 8007c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c30:	f04f 0901 	mov.w	r9, #1
 8007c34:	4623      	mov	r3, r4
 8007c36:	469a      	mov	sl, r3
 8007c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3c:	b10a      	cbz	r2, 8007c42 <_vfiprintf_r+0x86>
 8007c3e:	2a25      	cmp	r2, #37	@ 0x25
 8007c40:	d1f9      	bne.n	8007c36 <_vfiprintf_r+0x7a>
 8007c42:	ebba 0b04 	subs.w	fp, sl, r4
 8007c46:	d00b      	beq.n	8007c60 <_vfiprintf_r+0xa4>
 8007c48:	465b      	mov	r3, fp
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ffa1 	bl	8007b96 <__sfputs_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	f000 80a7 	beq.w	8007da8 <_vfiprintf_r+0x1ec>
 8007c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c5c:	445a      	add	r2, fp
 8007c5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c60:	f89a 3000 	ldrb.w	r3, [sl]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 809f 	beq.w	8007da8 <_vfiprintf_r+0x1ec>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c74:	f10a 0a01 	add.w	sl, sl, #1
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c82:	4654      	mov	r4, sl
 8007c84:	2205      	movs	r2, #5
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4853      	ldr	r0, [pc, #332]	@ (8007dd8 <_vfiprintf_r+0x21c>)
 8007c8c:	f7f8 fac8 	bl	8000220 <memchr>
 8007c90:	9a04      	ldr	r2, [sp, #16]
 8007c92:	b9d8      	cbnz	r0, 8007ccc <_vfiprintf_r+0x110>
 8007c94:	06d1      	lsls	r1, r2, #27
 8007c96:	bf44      	itt	mi
 8007c98:	2320      	movmi	r3, #32
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c9e:	0713      	lsls	r3, r2, #28
 8007ca0:	bf44      	itt	mi
 8007ca2:	232b      	movmi	r3, #43	@ 0x2b
 8007ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cae:	d015      	beq.n	8007cdc <_vfiprintf_r+0x120>
 8007cb0:	9a07      	ldr	r2, [sp, #28]
 8007cb2:	4654      	mov	r4, sl
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4621      	mov	r1, r4
 8007cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc0:	3b30      	subs	r3, #48	@ 0x30
 8007cc2:	2b09      	cmp	r3, #9
 8007cc4:	d94b      	bls.n	8007d5e <_vfiprintf_r+0x1a2>
 8007cc6:	b1b0      	cbz	r0, 8007cf6 <_vfiprintf_r+0x13a>
 8007cc8:	9207      	str	r2, [sp, #28]
 8007cca:	e014      	b.n	8007cf6 <_vfiprintf_r+0x13a>
 8007ccc:	eba0 0308 	sub.w	r3, r0, r8
 8007cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	46a2      	mov	sl, r4
 8007cda:	e7d2      	b.n	8007c82 <_vfiprintf_r+0xc6>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d19      	adds	r1, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfbb      	ittet	lt
 8007ce8:	425b      	neglt	r3, r3
 8007cea:	f042 0202 	orrlt.w	r2, r2, #2
 8007cee:	9307      	strge	r3, [sp, #28]
 8007cf0:	9307      	strlt	r3, [sp, #28]
 8007cf2:	bfb8      	it	lt
 8007cf4:	9204      	strlt	r2, [sp, #16]
 8007cf6:	7823      	ldrb	r3, [r4, #0]
 8007cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cfa:	d10a      	bne.n	8007d12 <_vfiprintf_r+0x156>
 8007cfc:	7863      	ldrb	r3, [r4, #1]
 8007cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d00:	d132      	bne.n	8007d68 <_vfiprintf_r+0x1ac>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	9203      	str	r2, [sp, #12]
 8007d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d0e:	3402      	adds	r4, #2
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007de8 <_vfiprintf_r+0x22c>
 8007d16:	7821      	ldrb	r1, [r4, #0]
 8007d18:	2203      	movs	r2, #3
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	f7f8 fa80 	bl	8000220 <memchr>
 8007d20:	b138      	cbz	r0, 8007d32 <_vfiprintf_r+0x176>
 8007d22:	9b04      	ldr	r3, [sp, #16]
 8007d24:	eba0 000a 	sub.w	r0, r0, sl
 8007d28:	2240      	movs	r2, #64	@ 0x40
 8007d2a:	4082      	lsls	r2, r0
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	3401      	adds	r4, #1
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d36:	4829      	ldr	r0, [pc, #164]	@ (8007ddc <_vfiprintf_r+0x220>)
 8007d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	f7f8 fa6f 	bl	8000220 <memchr>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d03f      	beq.n	8007dc6 <_vfiprintf_r+0x20a>
 8007d46:	4b26      	ldr	r3, [pc, #152]	@ (8007de0 <_vfiprintf_r+0x224>)
 8007d48:	bb1b      	cbnz	r3, 8007d92 <_vfiprintf_r+0x1d6>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	3307      	adds	r3, #7
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	3308      	adds	r3, #8
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d58:	443b      	add	r3, r7
 8007d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5c:	e76a      	b.n	8007c34 <_vfiprintf_r+0x78>
 8007d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d62:	460c      	mov	r4, r1
 8007d64:	2001      	movs	r0, #1
 8007d66:	e7a8      	b.n	8007cba <_vfiprintf_r+0xfe>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	3401      	adds	r4, #1
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4620      	mov	r0, r4
 8007d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d7a:	3a30      	subs	r2, #48	@ 0x30
 8007d7c:	2a09      	cmp	r2, #9
 8007d7e:	d903      	bls.n	8007d88 <_vfiprintf_r+0x1cc>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0c6      	beq.n	8007d12 <_vfiprintf_r+0x156>
 8007d84:	9105      	str	r1, [sp, #20]
 8007d86:	e7c4      	b.n	8007d12 <_vfiprintf_r+0x156>
 8007d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e7f0      	b.n	8007d74 <_vfiprintf_r+0x1b8>
 8007d92:	ab03      	add	r3, sp, #12
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	462a      	mov	r2, r5
 8007d98:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <_vfiprintf_r+0x228>)
 8007d9a:	a904      	add	r1, sp, #16
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f3af 8000 	nop.w
 8007da2:	4607      	mov	r7, r0
 8007da4:	1c78      	adds	r0, r7, #1
 8007da6:	d1d6      	bne.n	8007d56 <_vfiprintf_r+0x19a>
 8007da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007daa:	07d9      	lsls	r1, r3, #31
 8007dac:	d405      	bmi.n	8007dba <_vfiprintf_r+0x1fe>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	059a      	lsls	r2, r3, #22
 8007db2:	d402      	bmi.n	8007dba <_vfiprintf_r+0x1fe>
 8007db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007db6:	f7ff fdcf 	bl	8007958 <__retarget_lock_release_recursive>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	065b      	lsls	r3, r3, #25
 8007dbe:	f53f af1f 	bmi.w	8007c00 <_vfiprintf_r+0x44>
 8007dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dc4:	e71e      	b.n	8007c04 <_vfiprintf_r+0x48>
 8007dc6:	ab03      	add	r3, sp, #12
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	462a      	mov	r2, r5
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <_vfiprintf_r+0x228>)
 8007dce:	a904      	add	r1, sp, #16
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f879 	bl	8007ec8 <_printf_i>
 8007dd6:	e7e4      	b.n	8007da2 <_vfiprintf_r+0x1e6>
 8007dd8:	08008498 	.word	0x08008498
 8007ddc:	080084a2 	.word	0x080084a2
 8007de0:	00000000 	.word	0x00000000
 8007de4:	08007b97 	.word	0x08007b97
 8007de8:	0800849e 	.word	0x0800849e

08007dec <_printf_common>:
 8007dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df0:	4616      	mov	r6, r2
 8007df2:	4698      	mov	r8, r3
 8007df4:	688a      	ldr	r2, [r1, #8]
 8007df6:	690b      	ldr	r3, [r1, #16]
 8007df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	bfb8      	it	lt
 8007e00:	4613      	movlt	r3, r2
 8007e02:	6033      	str	r3, [r6, #0]
 8007e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e08:	4607      	mov	r7, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	b10a      	cbz	r2, 8007e12 <_printf_common+0x26>
 8007e0e:	3301      	adds	r3, #1
 8007e10:	6033      	str	r3, [r6, #0]
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	0699      	lsls	r1, r3, #26
 8007e16:	bf42      	ittt	mi
 8007e18:	6833      	ldrmi	r3, [r6, #0]
 8007e1a:	3302      	addmi	r3, #2
 8007e1c:	6033      	strmi	r3, [r6, #0]
 8007e1e:	6825      	ldr	r5, [r4, #0]
 8007e20:	f015 0506 	ands.w	r5, r5, #6
 8007e24:	d106      	bne.n	8007e34 <_printf_common+0x48>
 8007e26:	f104 0a19 	add.w	sl, r4, #25
 8007e2a:	68e3      	ldr	r3, [r4, #12]
 8007e2c:	6832      	ldr	r2, [r6, #0]
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	42ab      	cmp	r3, r5
 8007e32:	dc26      	bgt.n	8007e82 <_printf_common+0x96>
 8007e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	3b00      	subs	r3, #0
 8007e3c:	bf18      	it	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	0692      	lsls	r2, r2, #26
 8007e42:	d42b      	bmi.n	8007e9c <_printf_common+0xb0>
 8007e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e48:	4641      	mov	r1, r8
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	47c8      	blx	r9
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d01e      	beq.n	8007e90 <_printf_common+0xa4>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	f003 0306 	and.w	r3, r3, #6
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	bf02      	ittt	eq
 8007e5e:	68e5      	ldreq	r5, [r4, #12]
 8007e60:	6833      	ldreq	r3, [r6, #0]
 8007e62:	1aed      	subeq	r5, r5, r3
 8007e64:	68a3      	ldr	r3, [r4, #8]
 8007e66:	bf0c      	ite	eq
 8007e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e6c:	2500      	movne	r5, #0
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	bfc4      	itt	gt
 8007e72:	1a9b      	subgt	r3, r3, r2
 8007e74:	18ed      	addgt	r5, r5, r3
 8007e76:	2600      	movs	r6, #0
 8007e78:	341a      	adds	r4, #26
 8007e7a:	42b5      	cmp	r5, r6
 8007e7c:	d11a      	bne.n	8007eb4 <_printf_common+0xc8>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	e008      	b.n	8007e94 <_printf_common+0xa8>
 8007e82:	2301      	movs	r3, #1
 8007e84:	4652      	mov	r2, sl
 8007e86:	4641      	mov	r1, r8
 8007e88:	4638      	mov	r0, r7
 8007e8a:	47c8      	blx	r9
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d103      	bne.n	8007e98 <_printf_common+0xac>
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e98:	3501      	adds	r5, #1
 8007e9a:	e7c6      	b.n	8007e2a <_printf_common+0x3e>
 8007e9c:	18e1      	adds	r1, r4, r3
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	2030      	movs	r0, #48	@ 0x30
 8007ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ea6:	4422      	add	r2, r4
 8007ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	e7c7      	b.n	8007e44 <_printf_common+0x58>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	4641      	mov	r1, r8
 8007eba:	4638      	mov	r0, r7
 8007ebc:	47c8      	blx	r9
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d0e6      	beq.n	8007e90 <_printf_common+0xa4>
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	e7d9      	b.n	8007e7a <_printf_common+0x8e>
	...

08007ec8 <_printf_i>:
 8007ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	7e0f      	ldrb	r7, [r1, #24]
 8007ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ed0:	2f78      	cmp	r7, #120	@ 0x78
 8007ed2:	4691      	mov	r9, r2
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	469a      	mov	sl, r3
 8007eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ede:	d807      	bhi.n	8007ef0 <_printf_i+0x28>
 8007ee0:	2f62      	cmp	r7, #98	@ 0x62
 8007ee2:	d80a      	bhi.n	8007efa <_printf_i+0x32>
 8007ee4:	2f00      	cmp	r7, #0
 8007ee6:	f000 80d2 	beq.w	800808e <_printf_i+0x1c6>
 8007eea:	2f58      	cmp	r7, #88	@ 0x58
 8007eec:	f000 80b9 	beq.w	8008062 <_printf_i+0x19a>
 8007ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ef8:	e03a      	b.n	8007f70 <_printf_i+0xa8>
 8007efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007efe:	2b15      	cmp	r3, #21
 8007f00:	d8f6      	bhi.n	8007ef0 <_printf_i+0x28>
 8007f02:	a101      	add	r1, pc, #4	@ (adr r1, 8007f08 <_printf_i+0x40>)
 8007f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f08:	08007f61 	.word	0x08007f61
 8007f0c:	08007f75 	.word	0x08007f75
 8007f10:	08007ef1 	.word	0x08007ef1
 8007f14:	08007ef1 	.word	0x08007ef1
 8007f18:	08007ef1 	.word	0x08007ef1
 8007f1c:	08007ef1 	.word	0x08007ef1
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007ef1 	.word	0x08007ef1
 8007f28:	08007ef1 	.word	0x08007ef1
 8007f2c:	08007ef1 	.word	0x08007ef1
 8007f30:	08007ef1 	.word	0x08007ef1
 8007f34:	08008075 	.word	0x08008075
 8007f38:	08007f9f 	.word	0x08007f9f
 8007f3c:	0800802f 	.word	0x0800802f
 8007f40:	08007ef1 	.word	0x08007ef1
 8007f44:	08007ef1 	.word	0x08007ef1
 8007f48:	08008097 	.word	0x08008097
 8007f4c:	08007ef1 	.word	0x08007ef1
 8007f50:	08007f9f 	.word	0x08007f9f
 8007f54:	08007ef1 	.word	0x08007ef1
 8007f58:	08007ef1 	.word	0x08007ef1
 8007f5c:	08008037 	.word	0x08008037
 8007f60:	6833      	ldr	r3, [r6, #0]
 8007f62:	1d1a      	adds	r2, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6032      	str	r2, [r6, #0]
 8007f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f70:	2301      	movs	r3, #1
 8007f72:	e09d      	b.n	80080b0 <_printf_i+0x1e8>
 8007f74:	6833      	ldr	r3, [r6, #0]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1d19      	adds	r1, r3, #4
 8007f7a:	6031      	str	r1, [r6, #0]
 8007f7c:	0606      	lsls	r6, r0, #24
 8007f7e:	d501      	bpl.n	8007f84 <_printf_i+0xbc>
 8007f80:	681d      	ldr	r5, [r3, #0]
 8007f82:	e003      	b.n	8007f8c <_printf_i+0xc4>
 8007f84:	0645      	lsls	r5, r0, #25
 8007f86:	d5fb      	bpl.n	8007f80 <_printf_i+0xb8>
 8007f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	da03      	bge.n	8007f98 <_printf_i+0xd0>
 8007f90:	232d      	movs	r3, #45	@ 0x2d
 8007f92:	426d      	negs	r5, r5
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f98:	4859      	ldr	r0, [pc, #356]	@ (8008100 <_printf_i+0x238>)
 8007f9a:	230a      	movs	r3, #10
 8007f9c:	e011      	b.n	8007fc2 <_printf_i+0xfa>
 8007f9e:	6821      	ldr	r1, [r4, #0]
 8007fa0:	6833      	ldr	r3, [r6, #0]
 8007fa2:	0608      	lsls	r0, r1, #24
 8007fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fa8:	d402      	bmi.n	8007fb0 <_printf_i+0xe8>
 8007faa:	0649      	lsls	r1, r1, #25
 8007fac:	bf48      	it	mi
 8007fae:	b2ad      	uxthmi	r5, r5
 8007fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fb2:	4853      	ldr	r0, [pc, #332]	@ (8008100 <_printf_i+0x238>)
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	bf14      	ite	ne
 8007fb8:	230a      	movne	r3, #10
 8007fba:	2308      	moveq	r3, #8
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fc2:	6866      	ldr	r6, [r4, #4]
 8007fc4:	60a6      	str	r6, [r4, #8]
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	bfa2      	ittt	ge
 8007fca:	6821      	ldrge	r1, [r4, #0]
 8007fcc:	f021 0104 	bicge.w	r1, r1, #4
 8007fd0:	6021      	strge	r1, [r4, #0]
 8007fd2:	b90d      	cbnz	r5, 8007fd8 <_printf_i+0x110>
 8007fd4:	2e00      	cmp	r6, #0
 8007fd6:	d04b      	beq.n	8008070 <_printf_i+0x1a8>
 8007fd8:	4616      	mov	r6, r2
 8007fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fde:	fb03 5711 	mls	r7, r3, r1, r5
 8007fe2:	5dc7      	ldrb	r7, [r0, r7]
 8007fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fe8:	462f      	mov	r7, r5
 8007fea:	42bb      	cmp	r3, r7
 8007fec:	460d      	mov	r5, r1
 8007fee:	d9f4      	bls.n	8007fda <_printf_i+0x112>
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d10b      	bne.n	800800c <_printf_i+0x144>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07df      	lsls	r7, r3, #31
 8007ff8:	d508      	bpl.n	800800c <_printf_i+0x144>
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	6861      	ldr	r1, [r4, #4]
 8007ffe:	4299      	cmp	r1, r3
 8008000:	bfde      	ittt	le
 8008002:	2330      	movle	r3, #48	@ 0x30
 8008004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008008:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800800c:	1b92      	subs	r2, r2, r6
 800800e:	6122      	str	r2, [r4, #16]
 8008010:	f8cd a000 	str.w	sl, [sp]
 8008014:	464b      	mov	r3, r9
 8008016:	aa03      	add	r2, sp, #12
 8008018:	4621      	mov	r1, r4
 800801a:	4640      	mov	r0, r8
 800801c:	f7ff fee6 	bl	8007dec <_printf_common>
 8008020:	3001      	adds	r0, #1
 8008022:	d14a      	bne.n	80080ba <_printf_i+0x1f2>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008028:	b004      	add	sp, #16
 800802a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	f043 0320 	orr.w	r3, r3, #32
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	4833      	ldr	r0, [pc, #204]	@ (8008104 <_printf_i+0x23c>)
 8008038:	2778      	movs	r7, #120	@ 0x78
 800803a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	6831      	ldr	r1, [r6, #0]
 8008042:	061f      	lsls	r7, r3, #24
 8008044:	f851 5b04 	ldr.w	r5, [r1], #4
 8008048:	d402      	bmi.n	8008050 <_printf_i+0x188>
 800804a:	065f      	lsls	r7, r3, #25
 800804c:	bf48      	it	mi
 800804e:	b2ad      	uxthmi	r5, r5
 8008050:	6031      	str	r1, [r6, #0]
 8008052:	07d9      	lsls	r1, r3, #31
 8008054:	bf44      	itt	mi
 8008056:	f043 0320 	orrmi.w	r3, r3, #32
 800805a:	6023      	strmi	r3, [r4, #0]
 800805c:	b11d      	cbz	r5, 8008066 <_printf_i+0x19e>
 800805e:	2310      	movs	r3, #16
 8008060:	e7ac      	b.n	8007fbc <_printf_i+0xf4>
 8008062:	4827      	ldr	r0, [pc, #156]	@ (8008100 <_printf_i+0x238>)
 8008064:	e7e9      	b.n	800803a <_printf_i+0x172>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	f023 0320 	bic.w	r3, r3, #32
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	e7f6      	b.n	800805e <_printf_i+0x196>
 8008070:	4616      	mov	r6, r2
 8008072:	e7bd      	b.n	8007ff0 <_printf_i+0x128>
 8008074:	6833      	ldr	r3, [r6, #0]
 8008076:	6825      	ldr	r5, [r4, #0]
 8008078:	6961      	ldr	r1, [r4, #20]
 800807a:	1d18      	adds	r0, r3, #4
 800807c:	6030      	str	r0, [r6, #0]
 800807e:	062e      	lsls	r6, r5, #24
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	d501      	bpl.n	8008088 <_printf_i+0x1c0>
 8008084:	6019      	str	r1, [r3, #0]
 8008086:	e002      	b.n	800808e <_printf_i+0x1c6>
 8008088:	0668      	lsls	r0, r5, #25
 800808a:	d5fb      	bpl.n	8008084 <_printf_i+0x1bc>
 800808c:	8019      	strh	r1, [r3, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	6123      	str	r3, [r4, #16]
 8008092:	4616      	mov	r6, r2
 8008094:	e7bc      	b.n	8008010 <_printf_i+0x148>
 8008096:	6833      	ldr	r3, [r6, #0]
 8008098:	1d1a      	adds	r2, r3, #4
 800809a:	6032      	str	r2, [r6, #0]
 800809c:	681e      	ldr	r6, [r3, #0]
 800809e:	6862      	ldr	r2, [r4, #4]
 80080a0:	2100      	movs	r1, #0
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7f8 f8bc 	bl	8000220 <memchr>
 80080a8:	b108      	cbz	r0, 80080ae <_printf_i+0x1e6>
 80080aa:	1b80      	subs	r0, r0, r6
 80080ac:	6060      	str	r0, [r4, #4]
 80080ae:	6863      	ldr	r3, [r4, #4]
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	2300      	movs	r3, #0
 80080b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080b8:	e7aa      	b.n	8008010 <_printf_i+0x148>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	4632      	mov	r2, r6
 80080be:	4649      	mov	r1, r9
 80080c0:	4640      	mov	r0, r8
 80080c2:	47d0      	blx	sl
 80080c4:	3001      	adds	r0, #1
 80080c6:	d0ad      	beq.n	8008024 <_printf_i+0x15c>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	079b      	lsls	r3, r3, #30
 80080cc:	d413      	bmi.n	80080f6 <_printf_i+0x22e>
 80080ce:	68e0      	ldr	r0, [r4, #12]
 80080d0:	9b03      	ldr	r3, [sp, #12]
 80080d2:	4298      	cmp	r0, r3
 80080d4:	bfb8      	it	lt
 80080d6:	4618      	movlt	r0, r3
 80080d8:	e7a6      	b.n	8008028 <_printf_i+0x160>
 80080da:	2301      	movs	r3, #1
 80080dc:	4632      	mov	r2, r6
 80080de:	4649      	mov	r1, r9
 80080e0:	4640      	mov	r0, r8
 80080e2:	47d0      	blx	sl
 80080e4:	3001      	adds	r0, #1
 80080e6:	d09d      	beq.n	8008024 <_printf_i+0x15c>
 80080e8:	3501      	adds	r5, #1
 80080ea:	68e3      	ldr	r3, [r4, #12]
 80080ec:	9903      	ldr	r1, [sp, #12]
 80080ee:	1a5b      	subs	r3, r3, r1
 80080f0:	42ab      	cmp	r3, r5
 80080f2:	dcf2      	bgt.n	80080da <_printf_i+0x212>
 80080f4:	e7eb      	b.n	80080ce <_printf_i+0x206>
 80080f6:	2500      	movs	r5, #0
 80080f8:	f104 0619 	add.w	r6, r4, #25
 80080fc:	e7f5      	b.n	80080ea <_printf_i+0x222>
 80080fe:	bf00      	nop
 8008100:	080084a9 	.word	0x080084a9
 8008104:	080084ba 	.word	0x080084ba

08008108 <__sflush_r>:
 8008108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	0716      	lsls	r6, r2, #28
 8008112:	4605      	mov	r5, r0
 8008114:	460c      	mov	r4, r1
 8008116:	d454      	bmi.n	80081c2 <__sflush_r+0xba>
 8008118:	684b      	ldr	r3, [r1, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	dc02      	bgt.n	8008124 <__sflush_r+0x1c>
 800811e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	dd48      	ble.n	80081b6 <__sflush_r+0xae>
 8008124:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008126:	2e00      	cmp	r6, #0
 8008128:	d045      	beq.n	80081b6 <__sflush_r+0xae>
 800812a:	2300      	movs	r3, #0
 800812c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008130:	682f      	ldr	r7, [r5, #0]
 8008132:	6a21      	ldr	r1, [r4, #32]
 8008134:	602b      	str	r3, [r5, #0]
 8008136:	d030      	beq.n	800819a <__sflush_r+0x92>
 8008138:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	0759      	lsls	r1, r3, #29
 800813e:	d505      	bpl.n	800814c <__sflush_r+0x44>
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008146:	b10b      	cbz	r3, 800814c <__sflush_r+0x44>
 8008148:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008150:	6a21      	ldr	r1, [r4, #32]
 8008152:	4628      	mov	r0, r5
 8008154:	47b0      	blx	r6
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	d106      	bne.n	800816a <__sflush_r+0x62>
 800815c:	6829      	ldr	r1, [r5, #0]
 800815e:	291d      	cmp	r1, #29
 8008160:	d82b      	bhi.n	80081ba <__sflush_r+0xb2>
 8008162:	4a2a      	ldr	r2, [pc, #168]	@ (800820c <__sflush_r+0x104>)
 8008164:	410a      	asrs	r2, r1
 8008166:	07d6      	lsls	r6, r2, #31
 8008168:	d427      	bmi.n	80081ba <__sflush_r+0xb2>
 800816a:	2200      	movs	r2, #0
 800816c:	6062      	str	r2, [r4, #4]
 800816e:	04d9      	lsls	r1, r3, #19
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	d504      	bpl.n	8008180 <__sflush_r+0x78>
 8008176:	1c42      	adds	r2, r0, #1
 8008178:	d101      	bne.n	800817e <__sflush_r+0x76>
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	b903      	cbnz	r3, 8008180 <__sflush_r+0x78>
 800817e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008182:	602f      	str	r7, [r5, #0]
 8008184:	b1b9      	cbz	r1, 80081b6 <__sflush_r+0xae>
 8008186:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800818a:	4299      	cmp	r1, r3
 800818c:	d002      	beq.n	8008194 <__sflush_r+0x8c>
 800818e:	4628      	mov	r0, r5
 8008190:	f7ff fbf2 	bl	8007978 <_free_r>
 8008194:	2300      	movs	r3, #0
 8008196:	6363      	str	r3, [r4, #52]	@ 0x34
 8008198:	e00d      	b.n	80081b6 <__sflush_r+0xae>
 800819a:	2301      	movs	r3, #1
 800819c:	4628      	mov	r0, r5
 800819e:	47b0      	blx	r6
 80081a0:	4602      	mov	r2, r0
 80081a2:	1c50      	adds	r0, r2, #1
 80081a4:	d1c9      	bne.n	800813a <__sflush_r+0x32>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0c6      	beq.n	800813a <__sflush_r+0x32>
 80081ac:	2b1d      	cmp	r3, #29
 80081ae:	d001      	beq.n	80081b4 <__sflush_r+0xac>
 80081b0:	2b16      	cmp	r3, #22
 80081b2:	d11e      	bne.n	80081f2 <__sflush_r+0xea>
 80081b4:	602f      	str	r7, [r5, #0]
 80081b6:	2000      	movs	r0, #0
 80081b8:	e022      	b.n	8008200 <__sflush_r+0xf8>
 80081ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081be:	b21b      	sxth	r3, r3
 80081c0:	e01b      	b.n	80081fa <__sflush_r+0xf2>
 80081c2:	690f      	ldr	r7, [r1, #16]
 80081c4:	2f00      	cmp	r7, #0
 80081c6:	d0f6      	beq.n	80081b6 <__sflush_r+0xae>
 80081c8:	0793      	lsls	r3, r2, #30
 80081ca:	680e      	ldr	r6, [r1, #0]
 80081cc:	bf08      	it	eq
 80081ce:	694b      	ldreq	r3, [r1, #20]
 80081d0:	600f      	str	r7, [r1, #0]
 80081d2:	bf18      	it	ne
 80081d4:	2300      	movne	r3, #0
 80081d6:	eba6 0807 	sub.w	r8, r6, r7
 80081da:	608b      	str	r3, [r1, #8]
 80081dc:	f1b8 0f00 	cmp.w	r8, #0
 80081e0:	dde9      	ble.n	80081b6 <__sflush_r+0xae>
 80081e2:	6a21      	ldr	r1, [r4, #32]
 80081e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081e6:	4643      	mov	r3, r8
 80081e8:	463a      	mov	r2, r7
 80081ea:	4628      	mov	r0, r5
 80081ec:	47b0      	blx	r6
 80081ee:	2800      	cmp	r0, #0
 80081f0:	dc08      	bgt.n	8008204 <__sflush_r+0xfc>
 80081f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	4407      	add	r7, r0
 8008206:	eba8 0800 	sub.w	r8, r8, r0
 800820a:	e7e7      	b.n	80081dc <__sflush_r+0xd4>
 800820c:	dfbffffe 	.word	0xdfbffffe

08008210 <_fflush_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	4605      	mov	r5, r0
 8008216:	460c      	mov	r4, r1
 8008218:	b913      	cbnz	r3, 8008220 <_fflush_r+0x10>
 800821a:	2500      	movs	r5, #0
 800821c:	4628      	mov	r0, r5
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	b118      	cbz	r0, 800822a <_fflush_r+0x1a>
 8008222:	6a03      	ldr	r3, [r0, #32]
 8008224:	b90b      	cbnz	r3, 800822a <_fflush_r+0x1a>
 8008226:	f7ff f98b 	bl	8007540 <__sinit>
 800822a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f3      	beq.n	800821a <_fflush_r+0xa>
 8008232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008234:	07d0      	lsls	r0, r2, #31
 8008236:	d404      	bmi.n	8008242 <_fflush_r+0x32>
 8008238:	0599      	lsls	r1, r3, #22
 800823a:	d402      	bmi.n	8008242 <_fflush_r+0x32>
 800823c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800823e:	f7ff fb8a 	bl	8007956 <__retarget_lock_acquire_recursive>
 8008242:	4628      	mov	r0, r5
 8008244:	4621      	mov	r1, r4
 8008246:	f7ff ff5f 	bl	8008108 <__sflush_r>
 800824a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800824c:	07da      	lsls	r2, r3, #31
 800824e:	4605      	mov	r5, r0
 8008250:	d4e4      	bmi.n	800821c <_fflush_r+0xc>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	059b      	lsls	r3, r3, #22
 8008256:	d4e1      	bmi.n	800821c <_fflush_r+0xc>
 8008258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800825a:	f7ff fb7d 	bl	8007958 <__retarget_lock_release_recursive>
 800825e:	e7dd      	b.n	800821c <_fflush_r+0xc>

08008260 <__swhatbuf_r>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	2900      	cmp	r1, #0
 800826a:	b096      	sub	sp, #88	@ 0x58
 800826c:	4615      	mov	r5, r2
 800826e:	461e      	mov	r6, r3
 8008270:	da0d      	bge.n	800828e <__swhatbuf_r+0x2e>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008278:	f04f 0100 	mov.w	r1, #0
 800827c:	bf14      	ite	ne
 800827e:	2340      	movne	r3, #64	@ 0x40
 8008280:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008284:	2000      	movs	r0, #0
 8008286:	6031      	str	r1, [r6, #0]
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	b016      	add	sp, #88	@ 0x58
 800828c:	bd70      	pop	{r4, r5, r6, pc}
 800828e:	466a      	mov	r2, sp
 8008290:	f000 f848 	bl	8008324 <_fstat_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	dbec      	blt.n	8008272 <__swhatbuf_r+0x12>
 8008298:	9901      	ldr	r1, [sp, #4]
 800829a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800829e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082a2:	4259      	negs	r1, r3
 80082a4:	4159      	adcs	r1, r3
 80082a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082aa:	e7eb      	b.n	8008284 <__swhatbuf_r+0x24>

080082ac <__smakebuf_r>:
 80082ac:	898b      	ldrh	r3, [r1, #12]
 80082ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b0:	079d      	lsls	r5, r3, #30
 80082b2:	4606      	mov	r6, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	d507      	bpl.n	80082c8 <__smakebuf_r+0x1c>
 80082b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	2301      	movs	r3, #1
 80082c2:	6163      	str	r3, [r4, #20]
 80082c4:	b003      	add	sp, #12
 80082c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c8:	ab01      	add	r3, sp, #4
 80082ca:	466a      	mov	r2, sp
 80082cc:	f7ff ffc8 	bl	8008260 <__swhatbuf_r>
 80082d0:	9f00      	ldr	r7, [sp, #0]
 80082d2:	4605      	mov	r5, r0
 80082d4:	4639      	mov	r1, r7
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff fbba 	bl	8007a50 <_malloc_r>
 80082dc:	b948      	cbnz	r0, 80082f2 <__smakebuf_r+0x46>
 80082de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e2:	059a      	lsls	r2, r3, #22
 80082e4:	d4ee      	bmi.n	80082c4 <__smakebuf_r+0x18>
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	f043 0302 	orr.w	r3, r3, #2
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	e7e2      	b.n	80082b8 <__smakebuf_r+0xc>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	6020      	str	r0, [r4, #0]
 80082f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008302:	b15b      	cbz	r3, 800831c <__smakebuf_r+0x70>
 8008304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008308:	4630      	mov	r0, r6
 800830a:	f000 f81d 	bl	8008348 <_isatty_r>
 800830e:	b128      	cbz	r0, 800831c <__smakebuf_r+0x70>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	f043 0301 	orr.w	r3, r3, #1
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	431d      	orrs	r5, r3
 8008320:	81a5      	strh	r5, [r4, #12]
 8008322:	e7cf      	b.n	80082c4 <__smakebuf_r+0x18>

08008324 <_fstat_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	@ (8008344 <_fstat_r+0x20>)
 8008328:	2300      	movs	r3, #0
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	f7f8 fd22 	bl	8000d7a <_fstat>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d102      	bne.n	8008340 <_fstat_r+0x1c>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	b103      	cbz	r3, 8008340 <_fstat_r+0x1c>
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	20001c68 	.word	0x20001c68

08008348 <_isatty_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d06      	ldr	r5, [pc, #24]	@ (8008364 <_isatty_r+0x1c>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7f8 fd21 	bl	8000d9a <_isatty>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_isatty_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_isatty_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20001c68 	.word	0x20001c68

08008368 <_sbrk_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d06      	ldr	r5, [pc, #24]	@ (8008384 <_sbrk_r+0x1c>)
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	f7f8 fd2a 	bl	8000dcc <_sbrk>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_sbrk_r+0x1a>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_sbrk_r+0x1a>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20001c68 	.word	0x20001c68

08008388 <_init>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr

08008394 <_fini>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	bf00      	nop
 8008398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839a:	bc08      	pop	{r3}
 800839c:	469e      	mov	lr, r3
 800839e:	4770      	bx	lr
