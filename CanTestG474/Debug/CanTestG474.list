
CanTestG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008048  08008048  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008048  08008048  00009048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008050  08008050  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008058  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  2000006c  080080c4  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca8  080080c4  0000aca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f304  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db2  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0002d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ca  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a4  00000000  00000000  000300f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c3  00000000  00000000  00035296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d229  00000000  00000000  00051a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ec82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a44  00000000  00000000  0015ecc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016670c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007f44 	.word	0x08007f44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08007f44 	.word	0x08007f44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_write+0x24>)
 80005c6:	f003 f90f 	bl	80037e8 <HAL_UART_Transmit>
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ec 	.word	0x200000ec

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fc55 	bl	8000e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81a 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f910 	bl	8000808 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005e8:	f000 f862 	bl	80006b0 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8c0 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f003 ffea 	bl	80045c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f4:	4a05      	ldr	r2, [pc, #20]	@ (800060c <main+0x34>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <main+0x38>)
 80005fa:	f004 f82f 	bl	800465c <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <main+0x3c>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f004 f804 	bl	8004610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x30>
 800060c:	08007fa0 	.word	0x08007fa0
 8000610:	080008f9 	.word	0x080008f9
 8000614:	20000180 	.word	0x20000180

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2238      	movs	r2, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fe65 	bl	80072f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800063a:	2000      	movs	r0, #0
 800063c:	f001 fcd6 	bl	8001fec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	@ 0x40
 800064c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065a:	2355      	movs	r3, #85	@ 0x55
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fd70 	bl	8002154 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067a:	f000 f991 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f86e 	bl	8002778 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f97d 	bl	80009a0 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006b8:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_FDCAN1_Init+0xbc>)
 80006ba:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 283;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006e2:	f240 121b 	movw	r2, #283	@ 0x11b
 80006e6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000702:	2201      	movs	r2, #1
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000708:	2201      	movs	r2, #1
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 800070e:	2201      	movs	r2, #1
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 800071a:	2200      	movs	r2, #0
 800071c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000724:	4810      	ldr	r0, [pc, #64]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000726:	f000 fce9 	bl	80010fc <HAL_FDCAN_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8000730:	f000 f936 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000740:	2301      	movs	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x010;
 8000748:	2310      	movs	r3, #16
 800074a:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000752:	f000 fe2d 	bl	80013b0 <HAL_FDCAN_ConfigFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_FDCAN1_Init+0xb0>
  {
	  Error_Handler();
 800075c:	f000 f920 	bl	80009a0 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000088 	.word	0x20000088
 800076c:	40006400 	.word	0x40006400

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_USART2_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007ba:	f002 ffc5 	bl	8003748 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f8ec 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007cc:	f003 fdee 	bl	80043ac <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f8e3 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007de:	f003 fe23 	bl	8004428 <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f8da 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007ee:	f003 fda4 	bl	800433a <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f8d2 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000ec 	.word	0x200000ec
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a23      	ldr	r2, [pc, #140]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a1d      	ldr	r2, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f001 fb7f 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800088a:	2320      	movs	r3, #32
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f001 f9ee 	bl	8001c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_FDCAN_RxFifo0Callback>:
FDCAN_RxHeaderTypeDef g_rxHeader;
uint8_t g_rxData[8];
uint8_t g_dataReadyToPrint = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00b      	beq.n	80008e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &g_rxHeader, g_rxData) == HAL_OK)
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <HAL_FDCAN_RxFifo0Callback+0x34>)
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_FDCAN_RxFifo0Callback+0x38>)
 80008cc:	2140      	movs	r1, #64	@ 0x40
 80008ce:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80008d0:	f000 fdf0 	bl	80014b4 <HAL_FDCAN_GetRxMessage>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			g_dataReadyToPrint = 1;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001ac 	.word	0x200001ac
 80008ec:	20000184 	.word	0x20000184
 80008f0:	20000088 	.word	0x20000088
 80008f4:	200001b4 	.word	0x200001b4

080008f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000900:	4818      	ldr	r0, [pc, #96]	@ (8000964 <StartDefaultTask+0x6c>)
 8000902:	f000 fdaf 	bl	8001464 <HAL_FDCAN_Start>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <StartDefaultTask+0x18>
	{
		Error_Handler();
 800090c:	f000 f848 	bl	80009a0 <Error_Handler>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <StartDefaultTask+0x6c>)
 8000916:	f000 fed5 	bl	80016c4 <HAL_FDCAN_ActivateNotification>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <StartDefaultTask+0x2c>
	{
		Error_Handler();
 8000920:	f000 f83e 	bl	80009a0 <Error_Handler>
	}
	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);
 8000924:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000928:	f003 ff2a 	bl	8004780 <osDelay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800092c:	2120      	movs	r1, #32
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f001 fb41 	bl	8001fb8 <HAL_GPIO_TogglePin>

		if (g_dataReadyToPrint)
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <StartDefaultTask+0x70>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f2      	beq.n	8000924 <StartDefaultTask+0x2c>
		{
			printf("rx message: %s\r\n", g_rxData);
 800093e:	490b      	ldr	r1, [pc, #44]	@ (800096c <StartDefaultTask+0x74>)
 8000940:	480b      	ldr	r0, [pc, #44]	@ (8000970 <StartDefaultTask+0x78>)
 8000942:	f006 fc83 	bl	800724c <iprintf>
			printf("from: %d\r\n", (int)g_rxHeader.Identifier);
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <StartDefaultTask+0x7c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	480a      	ldr	r0, [pc, #40]	@ (8000978 <StartDefaultTask+0x80>)
 800094e:	f006 fc7d 	bl	800724c <iprintf>
			memset(g_rxData, '\0', 8);
 8000952:	2208      	movs	r2, #8
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <StartDefaultTask+0x74>)
 8000958:	f006 fccd 	bl	80072f6 <memset>
			g_dataReadyToPrint = 0;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <StartDefaultTask+0x70>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 8000962:	e7df      	b.n	8000924 <StartDefaultTask+0x2c>
 8000964:	20000088 	.word	0x20000088
 8000968:	200001b4 	.word	0x200001b4
 800096c:	200001ac 	.word	0x200001ac
 8000970:	08007f68 	.word	0x08007f68
 8000974:	20000184 	.word	0x20000184
 8000978:	08007f7c 	.word	0x08007f7c

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fa95 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009a8:	2120      	movs	r1, #32
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f001 fb03 	bl	8001fb8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	@ 0x64
 80009b4:	f000 faa0 	bl	8000ef8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009b8:	bf00      	nop
 80009ba:	e7f5      	b.n	80009a8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_MspInit+0x50>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <HAL_MspInit+0x50>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x50>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_MspInit+0x50>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <HAL_MspInit+0x50>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x50>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fb57 	bl	80010ac <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009fe:	f001 fb99 	bl	8002134 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	@ 0x78
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2254      	movs	r2, #84	@ 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f006 fc60 	bl	80072f6 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a31      	ldr	r2, [pc, #196]	@ (8000b00 <HAL_FDCAN_MspInit+0xf0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d15b      	bne.n	8000af8 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 f8df 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a5c:	f7ff ffa0 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a60:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <HAL_FDCAN_MspInit+0xf4>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a64:	4a27      	ldr	r2, [pc, #156]	@ (8000b04 <HAL_FDCAN_MspInit+0xf4>)
 8000a66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6c:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <HAL_FDCAN_MspInit+0xf4>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <HAL_FDCAN_MspInit+0xf4>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7c:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <HAL_FDCAN_MspInit+0xf4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <HAL_FDCAN_MspInit+0xf4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab0:	f001 f8e8 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ac6:	2309      	movs	r3, #9
 8000ac8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f001 f8d6 	bl	8001c84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2105      	movs	r1, #5
 8000adc:	2015      	movs	r0, #21
 8000ade:	f000 fae5 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ae2:	2015      	movs	r0, #21
 8000ae4:	f000 fafc 	bl	80010e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	2016      	movs	r0, #22
 8000aee:	f000 fadd 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000af2:	2016      	movs	r0, #22
 8000af4:	f000 faf4 	bl	80010e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	3778      	adds	r7, #120	@ 0x78
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40006400 	.word	0x40006400
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	@ 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	@ 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fbe4 	bl	80072f6 <memset>
  if(huart->Instance==USART2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb0 <HAL_UART_MspInit+0xa8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d136      	bne.n	8000ba6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 f865 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ff26 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <HAL_UART_MspInit+0xac>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b58:	4a16      	ldr	r2, [pc, #88]	@ (8000bb4 <HAL_UART_MspInit+0xac>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_UART_MspInit+0xac>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_UART_MspInit+0xac>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <HAL_UART_MspInit+0xac>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_UART_MspInit+0xac>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b84:	230c      	movs	r3, #12
 8000b86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f001 f86f 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3778      	adds	r7, #120	@ 0x78
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	@ 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <HAL_InitTick+0xc4>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8000c7c <HAL_InitTick+0xc4>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <HAL_InitTick+0xc4>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be0:	f107 020c 	add.w	r2, r7, #12
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 ff9a 	bl	8002b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bf0:	f001 ff6c 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8000bf4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <HAL_InitTick+0xc8>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9b      	lsrs	r3, r3, #18
 8000c00:	3b01      	subs	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c06:	4a20      	ldr	r2, [pc, #128]	@ (8000c88 <HAL_InitTick+0xd0>)
 8000c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c24:	4817      	ldr	r0, [pc, #92]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c26:	f002 fa43 	bl	80030b0 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d11b      	bne.n	8000c70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c38:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <HAL_InitTick+0xcc>)
 8000c3a:	f002 fa9b 	bl	8003174 <HAL_TIM_Base_Start_IT>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d111      	bne.n	8000c70 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4c:	2036      	movs	r0, #54	@ 0x36
 8000c4e:	f000 fa47 	bl	80010e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d808      	bhi.n	8000c6a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2036      	movs	r0, #54	@ 0x36
 8000c5e:	f000 fa25 	bl	80010ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_InitTick+0xd4>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e002      	b.n	8000c70 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3730      	adds	r7, #48	@ 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	200001b8 	.word	0x200001b8
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <NMI_Handler+0x4>

08000c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000cce:	f000 fddf 	bl	8001890 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000088 	.word	0x20000088

08000cdc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <FDCAN1_IT1_IRQHandler+0x10>)
 8000ce2:	f000 fdd5 	bl	8001890 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000088 	.word	0x20000088

08000cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <TIM6_DAC_IRQHandler+0x10>)
 8000cf6:	f002 fab5 	bl	8003264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001b8 	.word	0x200001b8

08000d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e00a      	b.n	8000d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d16:	f3af 8000 	nop.w
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf0      	blt.n	8000d16 <_read+0x12>
  }

  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f006 fadc 	bl	8007394 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000204 	.word	0x20000204
 8000e10:	20001ca8 	.word	0x20001ca8

08000e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f006 fa9b 	bl	80073a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fbb5 	bl	80005d8 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e7c:	08008058 	.word	0x08008058
  ldr r2, =_sbss
 8000e80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e84:	20001ca8 	.word	0x20001ca8

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>

08000e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8fe 	bl	8001096 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff fe8c 	bl	8000bb8 <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	e001      	b.n	8000eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eac:	f7ff fd86 	bl	80009bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a03      	ldr	r2, [pc, #12]	@ (8000ed8 <HAL_IncTick+0x1c>)
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000208 	.word	0x20000208
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000208 	.word	0x20000208

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f10:	d004      	beq.n	8000f1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <HAL_Delay+0x40>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1c:	bf00      	nop
 8000f1e:	f7ff ffdf 	bl	8000ee0 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d8f7      	bhi.n	8000f1e <HAL_Delay+0x26>
  {
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff4c 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff63 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb3 	bl	8001030 <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff82 	bl	8000fdc <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff56 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e147      	b.n	800139e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fc74 	bl	8000a10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	699a      	ldr	r2, [r3, #24]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0210 	bic.w	r2, r2, #16
 8001136:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001138:	f7ff fed2 	bl	8000ee0 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800113e:	e012      	b.n	8001166 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001140:	f7ff fece 	bl	8000ee0 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d90b      	bls.n	8001166 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e11b      	b.n	800139e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b08      	cmp	r3, #8
 8001172:	d0e5      	beq.n	8001140 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001184:	f7ff feac 	bl	8000ee0 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800118a:	e012      	b.n	80011b2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800118c:	f7ff fea8 	bl	8000ee0 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d90b      	bls.n	80011b2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0f5      	b.n	800139e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0e5      	beq.n	800118c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699a      	ldr	r2, [r3, #24]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0202 	orr.w	r2, r2, #2
 80011ce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a74      	ldr	r2, [pc, #464]	@ (80013a8 <HAL_FDCAN_Init+0x2ac>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d103      	bne.n	80011e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011da:	4a74      	ldr	r2, [pc, #464]	@ (80013ac <HAL_FDCAN_Init+0x2b0>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7c1b      	ldrb	r3, [r3, #16]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	e007      	b.n	800120c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699a      	ldr	r2, [r3, #24]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800120a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7c5b      	ldrb	r3, [r3, #17]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001222:	619a      	str	r2, [r3, #24]
 8001224:	e007      	b.n	8001236 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001234:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7c9b      	ldrb	r3, [r3, #18]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699a      	ldr	r2, [r3, #24]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800124c:	619a      	str	r2, [r3, #24]
 800124e:	e007      	b.n	8001260 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800125e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001284:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0210 	bic.w	r2, r2, #16
 8001294:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d108      	bne.n	80012b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0204 	orr.w	r2, r2, #4
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	e02c      	b.n	800130a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d028      	beq.n	800130a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d01c      	beq.n	80012fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0210 	orr.w	r2, r2, #16
 80012de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d110      	bne.n	800130a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	e007      	b.n	800130a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	3b01      	subs	r3, #1
 8001310:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	3b01      	subs	r3, #1
 8001318:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800131a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001322:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	3b01      	subs	r3, #1
 800132c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001332:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001334:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800133e:	d115      	bne.n	800136c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134a:	3b01      	subs	r3, #1
 800134c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800134e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	3b01      	subs	r3, #1
 8001356:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001358:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	3b01      	subs	r3, #1
 8001362:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001368:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800136a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fc12 	bl	8001bac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40006400 	.word	0x40006400
 80013ac:	40006500 	.word	0x40006500

080013b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013c0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d002      	beq.n	80013ce <HAL_FDCAN_ConfigFilter+0x1e>
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d13d      	bne.n	800144a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d119      	bne.n	800140a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013e2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80013ea:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e01d      	b.n	8001446 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	075a      	lsls	r2, r3, #29
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	079a      	lsls	r2, r3, #30
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3304      	adds	r3, #4
 800143e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e006      	b.n	8001458 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	f043 0202 	orr.w	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d110      	bne.n	800149a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e006      	b.n	80014a8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	f043 0204 	orr.w	r2, r3, #4
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
  }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b08b      	sub	sp, #44	@ 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014cc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014ce:	7efb      	ldrb	r3, [r7, #27]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	f040 80e8 	bne.w	80016a6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b40      	cmp	r3, #64	@ 0x40
 80014da:	d137      	bne.n	800154c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0db      	b.n	80016b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001504:	0e1b      	lsrs	r3, r3, #24
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10a      	bne.n	8001524 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001516:	0a5b      	lsrs	r3, r3, #9
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
 800154a:	e036      	b.n	80015ba <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	2b00      	cmp	r3, #0
 800155a:	d107      	bne.n	800156c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001560:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0a3      	b.n	80016b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001574:	0e1b      	lsrs	r3, r3, #24
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d10a      	bne.n	8001594 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001590:	2301      	movs	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0c9b      	lsrs	r3, r3, #18
 80015d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e005      	b.n	80015ea <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	3304      	adds	r3, #4
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0c1b      	lsrs	r3, r3, #16
 8001618:	f003 020f 	and.w	r2, r3, #15
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e1b      	lsrs	r3, r3, #24
 800163e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0fda      	lsrs	r2, r3, #31
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	3304      	adds	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	e00a      	b.n	8001676 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	441a      	add	r2, r3
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	440b      	add	r3, r1
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	461a      	mov	r2, r3
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	4293      	cmp	r3, r2
 8001684:	d3ec      	bcc.n	8001660 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b40      	cmp	r3, #64	@ 0x40
 800168a:	d105      	bne.n	8001698 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001696:	e004      	b.n	80016a2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e006      	b.n	80016b4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	f043 0208 	orr.w	r2, r3, #8
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
  }
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	372c      	adds	r7, #44	@ 0x2c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	08007fdc 	.word	0x08007fdc

080016c4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016d6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d003      	beq.n	80016e6 <HAL_FDCAN_ActivateNotification+0x22>
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	f040 80c8 	bne.w	8001876 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d03b      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d031      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	d027      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01d      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d013      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00c      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d13b      	bne.n	8001816 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d131      	bne.n	8001816 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d127      	bne.n	8001816 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11d      	bne.n	8001816 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d113      	bne.n	8001816 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00c      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0202 	orr.w	r2, r2, #2
 8001824:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	430a      	orrs	r2, r1
 8001840:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	430a      	orrs	r2, r1
 800185e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	430a      	orrs	r2, r1
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e006      	b.n	8001884 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
  }
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	@ 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ac:	4013      	ands	r3, r2
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018c4:	4013      	ands	r3, r2
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018dc:	4013      	ands	r3, r2
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80018ea:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f2:	6a3a      	ldr	r2, [r7, #32]
 80018f4:	4013      	ands	r3, r2
 80018f6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018fe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001902:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001916:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2240      	movs	r2, #64	@ 0x40
 800193a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f916 	bl	8001b6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d019      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d014      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800195e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001976:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001978:	6939      	ldr	r1, [r7, #16]
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8d8 	bl	8001b30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800198c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800198e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f8a2 	bl	8001ada <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe ff84 	bl	80008b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f897 	bl	8001af0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f890 	bl	8001b06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d018      	beq.n	8001a22 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d013      	beq.n	8001a22 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a02:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f87c 	bl	8001b1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f880 	bl	8001b46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00c      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f878 	bl	8001b5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00f      	beq.n	8001a94 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00a      	beq.n	8001a94 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001aa2:	69f9      	ldr	r1, [r7, #28]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f876 	bl	8001b96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f858 	bl	8001b82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	@ 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001bb4:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001bb6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8001c7c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bc8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2c      	ldr	r2, [pc, #176]	@ (8001c80 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d103      	bne.n	8001bdc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001bda:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bea:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c10:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c18:	061a      	lsls	r2, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e005      	b.n	8001c5e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d3f3      	bcc.n	8001c52 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	4000a400 	.word	0x4000a400
 8001c7c:	40006800 	.word	0x40006800
 8001c80:	40006c00 	.word	0x40006c00

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c92:	e15a      	b.n	8001f4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 814c 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a6 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e04:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e10:	4a56      	ldr	r2, [pc, #344]	@ (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x1f8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x1f4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a49      	ldr	r2, [pc, #292]	@ (8001f7c <HAL_GPIO_Init+0x2f8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a48      	ldr	r2, [pc, #288]	@ (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e4>
 8001e64:	2305      	movs	r3, #5
 8001e66:	e00a      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e68:	2306      	movs	r3, #6
 8001e6a:	e008      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8e:	4937      	ldr	r1, [pc, #220]	@ (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9c:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec0:	4a30      	ldr	r2, [pc, #192]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eea:	4a26      	ldr	r2, [pc, #152]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f14:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f47f ae9d 	bne.w	8001c94 <HAL_GPIO_Init+0x10>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	48001400 	.word	0x48001400
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43d9      	mvns	r1, r3
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	400b      	ands	r3, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d141      	bne.n	800207e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002006:	d131      	bne.n	800206c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002008:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200e:	4a46      	ldr	r2, [pc, #280]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002014:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002018:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002020:	4a41      	ldr	r2, [pc, #260]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002026:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002028:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2232      	movs	r2, #50	@ 0x32
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a3f      	ldr	r2, [pc, #252]	@ (8002130 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203e:	e002      	b.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3b01      	subs	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002046:	4b38      	ldr	r3, [pc, #224]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d102      	bne.n	800205a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f2      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800205a:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	d158      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e057      	b.n	800211c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800206c:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002072:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002078:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800207c:	e04d      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002084:	d141      	bne.n	800210a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002092:	d131      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002094:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800209a:	4a23      	ldr	r2, [pc, #140]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a4:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2232      	movs	r2, #50	@ 0x32
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ca:	e002      	b.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020de:	d102      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f2      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f2:	d112      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e011      	b.n	800211c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002104:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002108:	e007      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002118:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40007000 	.word	0x40007000
 800212c:	20000000 	.word	0x20000000
 8002130:	431bde83 	.word	0x431bde83

08002134 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800213e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002142:	6093      	str	r3, [r2, #8]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e2fe      	b.n	8002764 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d075      	beq.n	800225e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002172:	4b97      	ldr	r3, [pc, #604]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217c:	4b94      	ldr	r3, [pc, #592]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0x3e>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d002      	beq.n	8002198 <HAL_RCC_OscConfig+0x44>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4b8d      	ldr	r3, [pc, #564]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d05b      	beq.n	800225c <HAL_RCC_OscConfig+0x108>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e2d9      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x74>
 80021ba:	4b85      	ldr	r3, [pc, #532]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a84      	ldr	r2, [pc, #528]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xb0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b7f      	ldr	r3, [pc, #508]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7e      	ldr	r2, [pc, #504]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b7c      	ldr	r3, [pc, #496]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7b      	ldr	r2, [pc, #492]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xb0>
 80021ec:	4b78      	ldr	r3, [pc, #480]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a77      	ldr	r2, [pc, #476]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b75      	ldr	r3, [pc, #468]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a74      	ldr	r2, [pc, #464]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fe68 	bl	8000ee0 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fe64 	bl	8000ee0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e29e      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xc0>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fe54 	bl	8000ee0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fe50 	bl	8000ee0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e28a      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224e:	4b60      	ldr	r3, [pc, #384]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0xe8>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d075      	beq.n	8002356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002274:	4b56      	ldr	r3, [pc, #344]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0x136>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d002      	beq.n	8002290 <HAL_RCC_OscConfig+0x13c>
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11f      	bne.n	80022d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002290:	4b4f      	ldr	r3, [pc, #316]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_OscConfig+0x154>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e25d      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	4946      	ldr	r1, [pc, #280]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022bc:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fc79 	bl	8000bb8 <HAL_InitTick>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d043      	beq.n	8002354 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e249      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a3c      	ldr	r2, [pc, #240]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fdfc 	bl	8000ee0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe fdf8 	bl	8000ee0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e232      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fe:	4b34      	ldr	r3, [pc, #208]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	061b      	lsls	r3, r3, #24
 8002318:	492d      	ldr	r1, [pc, #180]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
 800231e:	e01a      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2a      	ldr	r2, [pc, #168]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800232a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fdd8 	bl	8000ee0 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7fe fdd4 	bl	8000ee0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e20e      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002346:	4b22      	ldr	r3, [pc, #136]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1e0>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d041      	beq.n	80023e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002370:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fdb1 	bl	8000ee0 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fdad 	bl	8000ee0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1e7      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 8002396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ef      	beq.n	8002382 <HAL_RCC_OscConfig+0x22e>
 80023a2:	e020      	b.n	80023e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	4a09      	ldr	r2, [pc, #36]	@ (80023d0 <HAL_RCC_OscConfig+0x27c>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe fd94 	bl	8000ee0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ba:	e00d      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe fd90 	bl	8000ee0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d906      	bls.n	80023d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1ca      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d8:	4b8c      	ldr	r3, [pc, #560]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ea      	bne.n	80023bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80a6 	beq.w	8002540 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f8:	4b84      	ldr	r3, [pc, #528]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_OscConfig+0x2b4>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x2b6>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b7f      	ldr	r3, [pc, #508]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	4a7e      	ldr	r2, [pc, #504]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002418:	6593      	str	r3, [r2, #88]	@ 0x58
 800241a:	4b7c      	ldr	r3, [pc, #496]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242a:	4b79      	ldr	r3, [pc, #484]	@ (8002610 <HAL_RCC_OscConfig+0x4bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002436:	4b76      	ldr	r3, [pc, #472]	@ (8002610 <HAL_RCC_OscConfig+0x4bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	@ (8002610 <HAL_RCC_OscConfig+0x4bc>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7fe fd4d 	bl	8000ee0 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fd49 	bl	8000ee0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e183      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245c:	4b6c      	ldr	r3, [pc, #432]	@ (8002610 <HAL_RCC_OscConfig+0x4bc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_RCC_OscConfig+0x32e>
 8002470:	4b66      	ldr	r3, [pc, #408]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002476:	4a65      	ldr	r2, [pc, #404]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002480:	e024      	b.n	80024cc <HAL_RCC_OscConfig+0x378>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d110      	bne.n	80024ac <HAL_RCC_OscConfig+0x358>
 800248a:	4b60      	ldr	r3, [pc, #384]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002490:	4a5e      	ldr	r2, [pc, #376]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800249a:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	4a5a      	ldr	r2, [pc, #360]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024aa:	e00f      	b.n	80024cc <HAL_RCC_OscConfig+0x378>
 80024ac:	4b57      	ldr	r3, [pc, #348]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b2:	4a56      	ldr	r2, [pc, #344]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024bc:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c2:	4a52      	ldr	r2, [pc, #328]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d016      	beq.n	8002502 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe fd04 	bl	8000ee0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fd00 	bl	8000ee0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e138      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	4b46      	ldr	r3, [pc, #280]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ed      	beq.n	80024dc <HAL_RCC_OscConfig+0x388>
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fe fced 	bl	8000ee0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fce9 	bl	8000ee0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e121      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002520:	4b3a      	ldr	r3, [pc, #232]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ed      	bne.n	800250a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800252e:	7ffb      	ldrb	r3, [r7, #31]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b35      	ldr	r3, [pc, #212]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	4a34      	ldr	r2, [pc, #208]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 800253a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800253e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01c      	beq.n	800258e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002554:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800255a:	4a2c      	ldr	r2, [pc, #176]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fcbc 	bl	8000ee0 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256c:	f7fe fcb8 	bl	8000ee0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0f2      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257e:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x418>
 800258c:	e01b      	b.n	80025c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258e:	4b1f      	ldr	r3, [pc, #124]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002590:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002594:	4a1d      	ldr	r2, [pc, #116]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe fc9f 	bl	8000ee0 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a6:	f7fe fc9b 	bl	8000ee0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0d5      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b8:	4b14      	ldr	r3, [pc, #80]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ef      	bne.n	80025a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80c9 	beq.w	8002762 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	f000 8083 	beq.w	80026e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d15e      	bne.n	80026a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fc75 	bl	8000ee0 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	e00c      	b.n	8002614 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fc71 	bl	8000ee0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d905      	bls.n	8002614 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0ab      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002614:	4b55      	ldr	r3, [pc, #340]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ec      	bne.n	80025fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002620:	4b52      	ldr	r3, [pc, #328]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	4b52      	ldr	r3, [pc, #328]	@ (8002770 <HAL_RCC_OscConfig+0x61c>)
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6a11      	ldr	r1, [r2, #32]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002630:	3a01      	subs	r2, #1
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800263a:	0212      	lsls	r2, r2, #8
 800263c:	4311      	orrs	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002642:	0852      	lsrs	r2, r2, #1
 8002644:	3a01      	subs	r2, #1
 8002646:	0552      	lsls	r2, r2, #21
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0652      	lsls	r2, r2, #25
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800265a:	06d2      	lsls	r2, r2, #27
 800265c:	430a      	orrs	r2, r1
 800265e:	4943      	ldr	r1, [pc, #268]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002660:	4313      	orrs	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002664:	4b41      	ldr	r3, [pc, #260]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a40      	ldr	r2, [pc, #256]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002670:	4b3e      	ldr	r3, [pc, #248]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a3d      	ldr	r2, [pc, #244]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800267a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fc30 	bl	8000ee0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fc2c 	bl	8000ee0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e066      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b35      	ldr	r3, [pc, #212]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x530>
 80026a2:	e05e      	b.n	8002762 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b31      	ldr	r3, [pc, #196]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a30      	ldr	r2, [pc, #192]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fc16 	bl	8000ee0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fc12 	bl	8000ee0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e04c      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ca:	4b28      	ldr	r3, [pc, #160]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026d6:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	4924      	ldr	r1, [pc, #144]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_RCC_OscConfig+0x620>)
 80026de:	4013      	ands	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
 80026e2:	e03e      	b.n	8002762 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e039      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026f0:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <HAL_RCC_OscConfig+0x618>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0203 	and.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	429a      	cmp	r2, r3
 8002702:	d12c      	bne.n	800275e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	3b01      	subs	r3, #1
 8002710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d123      	bne.n	800275e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d11b      	bne.n	800275e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d113      	bne.n	800275e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d109      	bne.n	800275e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	019f800c 	.word	0x019f800c
 8002774:	feeefffc 	.word	0xfeeefffc

08002778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e11e      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b91      	ldr	r3, [pc, #580]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b8e      	ldr	r3, [pc, #568]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 020f 	bic.w	r2, r3, #15
 80027a6:	498c      	ldr	r1, [pc, #560]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b8a      	ldr	r3, [pc, #552]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e106      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d073      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d129      	bne.n	8002828 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d4:	4b81      	ldr	r3, [pc, #516]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0f4      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027e4:	f000 f9d0 	bl	8002b88 <RCC_GetSysClockFreqFromPLLSource>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4a7c      	ldr	r2, [pc, #496]	@ (80029e0 <HAL_RCC_ClockConfig+0x268>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d93f      	bls.n	8002872 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027f2:	4b7a      	ldr	r3, [pc, #488]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d033      	beq.n	8002872 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d12f      	bne.n	8002872 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002812:	4b72      	ldr	r3, [pc, #456]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800281a:	4a70      	ldr	r2, [pc, #448]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002820:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e024      	b.n	8002872 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d107      	bne.n	8002840 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002830:	4b6a      	ldr	r3, [pc, #424]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0c6      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	4b66      	ldr	r3, [pc, #408]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0be      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002850:	f000 f8ce 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4a61      	ldr	r2, [pc, #388]	@ (80029e0 <HAL_RCC_ClockConfig+0x268>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d909      	bls.n	8002872 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800285e:	4b5f      	ldr	r3, [pc, #380]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002866:	4a5d      	ldr	r2, [pc, #372]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800286c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b5a      	ldr	r3, [pc, #360]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4957      	ldr	r1, [pc, #348]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fb2c 	bl	8000ee0 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fb28 	bl	8000ee0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e095      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b4e      	ldr	r3, [pc, #312]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d023      	beq.n	8002908 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b43      	ldr	r3, [pc, #268]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a42      	ldr	r2, [pc, #264]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80028d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028e4:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028ec:	4a3b      	ldr	r2, [pc, #236]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80028ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b39      	ldr	r3, [pc, #228]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4936      	ldr	r1, [pc, #216]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
 8002906:	e008      	b.n	800291a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b80      	cmp	r3, #128	@ 0x80
 800290c:	d105      	bne.n	800291a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800290e:	4b33      	ldr	r3, [pc, #204]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a32      	ldr	r2, [pc, #200]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002914:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002918:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800291a:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d21d      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002928:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 020f 	bic.w	r2, r3, #15
 8002930:	4929      	ldr	r1, [pc, #164]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002938:	f7fe fad2 	bl	8000ee0 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fe face 	bl	8000ee0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e03b      	b.n	80029ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d1ed      	bne.n	8002940 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4917      	ldr	r1, [pc, #92]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490f      	ldr	r1, [pc, #60]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a2:	f000 f825 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_RCC_ClockConfig+0x264>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490c      	ldr	r1, [pc, #48]	@ (80029e4 <HAL_RCC_ClockConfig+0x26c>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x270>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029c2:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_RCC_ClockConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f8f6 	bl	8000bb8 <HAL_InitTick>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	04c4b400 	.word	0x04c4b400
 80029e4:	08007fc4 	.word	0x08007fc4
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029f6:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a02:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	e047      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d102      	bne.n	8002a1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a14:	4b26      	ldr	r3, [pc, #152]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e03e      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a1a:	4b23      	ldr	r3, [pc, #140]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d136      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a44:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	4a16      	ldr	r2, [pc, #88]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4e:	68d2      	ldr	r2, [r2, #12]
 8002a50:	0a12      	lsrs	r2, r2, #8
 8002a52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
      break;
 8002a5c:	e00c      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5e:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4a10      	ldr	r2, [pc, #64]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	0a12      	lsrs	r2, r2, #8
 8002a6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
      break;
 8002a76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0e5b      	lsrs	r3, r3, #25
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e001      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a98:	693b      	ldr	r3, [r7, #16]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	016e3600 	.word	0x016e3600

08002ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08007fd4 	.word	0x08007fd4

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002afc:	f7ff ffda 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0adb      	lsrs	r3, r3, #11
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4904      	ldr	r1, [pc, #16]	@ (8002b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08007fd4 	.word	0x08007fd4

08002b24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	220f      	movs	r2, #15
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_RCC_GetClockConfig+0x60>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 020f 	and.w	r2, r3, #15
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40022000 	.word	0x40022000

08002b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d10c      	bne.n	8002bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bac:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb6:	68d2      	ldr	r2, [r2, #12]
 8002bb8:	0a12      	lsrs	r2, r2, #8
 8002bba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
    break;
 8002bc4:	e00c      	b.n	8002be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	4a0e      	ldr	r2, [pc, #56]	@ (8002c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	0a12      	lsrs	r2, r2, #8
 8002bd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
    break;
 8002bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be0:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0e5b      	lsrs	r3, r3, #25
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	016e3600 	.word	0x016e3600
 8002c10:	00f42400 	.word	0x00f42400

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8098 	beq.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b43      	ldr	r3, [pc, #268]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	4a3f      	ldr	r2, [pc, #252]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a39      	ldr	r2, [pc, #228]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6a:	f7fe f939 	bl	8000ee0 <HAL_GetTick>
 8002c6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c70:	e009      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe f935 	bl	8000ee0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d902      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	74fb      	strb	r3, [r7, #19]
        break;
 8002c84:	e005      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ef      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d159      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c98:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01e      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d019      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb4:	4b23      	ldr	r3, [pc, #140]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc0:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce0:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f8f5 	bl	8000ee0 <HAL_GetTick>
 8002cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f8f1 	bl	8000ee0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ec      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d34:	4903      	ldr	r1, [pc, #12]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d3c:	e008      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	74bb      	strb	r3, [r7, #18]
 8002d42:	e005      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d50:	7c7b      	ldrb	r3, [r7, #17]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4ba7      	ldr	r3, [pc, #668]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f023 0203 	bic.w	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	499d      	ldr	r1, [pc, #628]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d90:	4b98      	ldr	r3, [pc, #608]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f023 020c 	bic.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4995      	ldr	r1, [pc, #596]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db2:	4b90      	ldr	r3, [pc, #576]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	498c      	ldr	r1, [pc, #560]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd4:	4b87      	ldr	r3, [pc, #540]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	4984      	ldr	r1, [pc, #528]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002df6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	497b      	ldr	r1, [pc, #492]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e18:	4b76      	ldr	r3, [pc, #472]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	4973      	ldr	r1, [pc, #460]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	496a      	ldr	r1, [pc, #424]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5c:	4b65      	ldr	r3, [pc, #404]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4962      	ldr	r1, [pc, #392]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	4959      	ldr	r1, [pc, #356]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ea0:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	4951      	ldr	r1, [pc, #324]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	4948      	ldr	r1, [pc, #288]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee4:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4940      	ldr	r1, [pc, #256]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f02:	d105      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f04:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a3a      	ldr	r2, [pc, #232]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2a:	4932      	ldr	r1, [pc, #200]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f46:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f62:	4924      	ldr	r1, [pc, #144]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	4916      	ldr	r1, [pc, #88]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d019      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	4908      	ldr	r1, [pc, #32]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a02      	ldr	r2, [pc, #8]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fee:	60d3      	str	r3, [r2, #12]
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4926      	ldr	r1, [pc, #152]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003022:	d105      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003024:	4b21      	ldr	r3, [pc, #132]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a20      	ldr	r2, [pc, #128]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304a:	4918      	ldr	r1, [pc, #96]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305a:	d105      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003066:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003074:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800307a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003082:	490a      	ldr	r1, [pc, #40]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003092:	d105      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800309a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800309e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e049      	b.n	8003156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f841 	bl	800315e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 fa30 	bl	8003554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e054      	b.n	8003236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <HAL_TIM_Base_Start_IT+0xd0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d022      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d01d      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a22      	ldr	r2, [pc, #136]	@ (8003248 <HAL_TIM_Base_Start_IT+0xd4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d018      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_TIM_Base_Start_IT+0xd8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <HAL_TIM_Base_Start_IT+0xdc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00e      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1e      	ldr	r2, [pc, #120]	@ (8003254 <HAL_TIM_Base_Start_IT+0xe0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003258 <HAL_TIM_Base_Start_IT+0xe4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x80>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1b      	ldr	r2, [pc, #108]	@ (800325c <HAL_TIM_Base_Start_IT+0xe8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d115      	bne.n	8003220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_TIM_Base_Start_IT+0xec>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b06      	cmp	r3, #6
 8003204:	d015      	beq.n	8003232 <HAL_TIM_Base_Start_IT+0xbe>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	d011      	beq.n	8003232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	e008      	b.n	8003232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e000      	b.n	8003234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40013400 	.word	0x40013400
 8003258:	40014000 	.word	0x40014000
 800325c:	40015000 	.word	0x40015000
 8003260:	00010007 	.word	0x00010007

08003264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d020      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0202 	mvn.w	r2, #2
 8003298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f931 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f923 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f934 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d020      	beq.n	8003314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01b      	beq.n	8003314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0204 	mvn.w	r2, #4
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f90b 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8fd 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f90e 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0208 	mvn.w	r2, #8
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8e5 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8d7 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8e8 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d020      	beq.n	80033ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0210 	mvn.w	r2, #16
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2208      	movs	r2, #8
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8bf 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8b1 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8c2 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0201 	mvn.w	r2, #1
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd fad6 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f969 	bl	80036d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f961 	bl	80036e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800343e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f87c 	bl	800353e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0220 	mvn.w	r2, #32
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f929 	bl	80036bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f935 	bl	80036f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00c      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80034aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f92d 	bl	800370c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80034ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f925 	bl	8003720 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f91d 	bl	8003734 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <TIM_Base_SetConfig+0x144>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d017      	beq.n	800359c <TIM_Base_SetConfig+0x48>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003572:	d013      	beq.n	800359c <TIM_Base_SetConfig+0x48>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a49      	ldr	r2, [pc, #292]	@ (800369c <TIM_Base_SetConfig+0x148>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <TIM_Base_SetConfig+0x48>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a48      	ldr	r2, [pc, #288]	@ (80036a0 <TIM_Base_SetConfig+0x14c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <TIM_Base_SetConfig+0x48>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a47      	ldr	r2, [pc, #284]	@ (80036a4 <TIM_Base_SetConfig+0x150>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_Base_SetConfig+0x48>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a46      	ldr	r2, [pc, #280]	@ (80036a8 <TIM_Base_SetConfig+0x154>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0x48>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a45      	ldr	r2, [pc, #276]	@ (80036ac <TIM_Base_SetConfig+0x158>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d108      	bne.n	80035ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a39      	ldr	r2, [pc, #228]	@ (8003698 <TIM_Base_SetConfig+0x144>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d023      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035bc:	d01f      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a36      	ldr	r2, [pc, #216]	@ (800369c <TIM_Base_SetConfig+0x148>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01b      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <TIM_Base_SetConfig+0x14c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d017      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <TIM_Base_SetConfig+0x150>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a33      	ldr	r2, [pc, #204]	@ (80036a8 <TIM_Base_SetConfig+0x154>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00f      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a33      	ldr	r2, [pc, #204]	@ (80036b0 <TIM_Base_SetConfig+0x15c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a32      	ldr	r2, [pc, #200]	@ (80036b4 <TIM_Base_SetConfig+0x160>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a31      	ldr	r2, [pc, #196]	@ (80036b8 <TIM_Base_SetConfig+0x164>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_Base_SetConfig+0xaa>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2c      	ldr	r2, [pc, #176]	@ (80036ac <TIM_Base_SetConfig+0x158>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <TIM_Base_SetConfig+0x144>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <TIM_Base_SetConfig+0x110>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <TIM_Base_SetConfig+0x154>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00f      	beq.n	8003664 <TIM_Base_SetConfig+0x110>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <TIM_Base_SetConfig+0x15c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00b      	beq.n	8003664 <TIM_Base_SetConfig+0x110>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a19      	ldr	r2, [pc, #100]	@ (80036b4 <TIM_Base_SetConfig+0x160>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_Base_SetConfig+0x110>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <TIM_Base_SetConfig+0x164>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_Base_SetConfig+0x110>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a13      	ldr	r2, [pc, #76]	@ (80036ac <TIM_Base_SetConfig+0x158>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d103      	bne.n	800366c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f023 0201 	bic.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]
  }
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40013400 	.word	0x40013400
 80036ac:	40015000 	.word	0x40015000
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800

080036bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e042      	b.n	80037e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd f9cb 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2224      	movs	r2, #36	@ 0x24
 8003776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fbb2 	bl	8003efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8b3 	bl	8003904 <UART_SetConfig>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e01b      	b.n	80037e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fc31 	bl	8004040 <UART_CheckIdleState>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d17b      	bne.n	80038fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_Transmit+0x26>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e074      	b.n	80038fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	@ 0x21
 800381e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003822:	f7fd fb5d 	bl	8000ee0 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003840:	d108      	bne.n	8003854 <HAL_UART_Transmit+0x6c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	e003      	b.n	800385c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800385c:	e030      	b.n	80038c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	@ 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fc93 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e03d      	b.n	80038fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003894:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	3302      	adds	r3, #2
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	e007      	b.n	80038ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	3301      	adds	r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1c8      	bne.n	800385e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2140      	movs	r1, #64	@ 0x40
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fc5c 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e006      	b.n	80038fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b08c      	sub	sp, #48	@ 0x30
 800390a:	af00      	add	r7, sp, #0
 800390c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4313      	orrs	r3, r2
 800392a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4baa      	ldr	r3, [pc, #680]	@ (8003bdc <UART_SetConfig+0x2d8>)
 8003934:	4013      	ands	r3, r2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393c:	430b      	orrs	r3, r1
 800393e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a9f      	ldr	r2, [pc, #636]	@ (8003be0 <UART_SetConfig+0x2dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396c:	4313      	orrs	r3, r2
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800397a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003984:	430b      	orrs	r3, r1
 8003986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	f023 010f 	bic.w	r1, r3, #15
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a90      	ldr	r2, [pc, #576]	@ (8003be4 <UART_SetConfig+0x2e0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d125      	bne.n	80039f4 <UART_SetConfig+0xf0>
 80039a8:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <UART_SetConfig+0x2e4>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d81a      	bhi.n	80039ec <UART_SetConfig+0xe8>
 80039b6:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <UART_SetConfig+0xb8>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039e5 	.word	0x080039e5
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d2:	e116      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e112      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e2:	e10e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ea:	e10a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e106      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bec <UART_SetConfig+0x2e8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d138      	bne.n	8003a70 <UART_SetConfig+0x16c>
 80039fe:	4b7a      	ldr	r3, [pc, #488]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d82d      	bhi.n	8003a68 <UART_SetConfig+0x164>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <UART_SetConfig+0x110>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	08003a69 	.word	0x08003a69
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a69 	.word	0x08003a69
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4e:	e0d8      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e0d4      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e0d0      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e0cc      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e0c8      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <UART_SetConfig+0x2ec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d125      	bne.n	8003ac6 <UART_SetConfig+0x1c2>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a84:	2b30      	cmp	r3, #48	@ 0x30
 8003a86:	d016      	beq.n	8003ab6 <UART_SetConfig+0x1b2>
 8003a88:	2b30      	cmp	r3, #48	@ 0x30
 8003a8a:	d818      	bhi.n	8003abe <UART_SetConfig+0x1ba>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d00a      	beq.n	8003aa6 <UART_SetConfig+0x1a2>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d814      	bhi.n	8003abe <UART_SetConfig+0x1ba>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <UART_SetConfig+0x19a>
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d008      	beq.n	8003aae <UART_SetConfig+0x1aa>
 8003a9c:	e00f      	b.n	8003abe <UART_SetConfig+0x1ba>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa4:	e0ad      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aac:	e0a9      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab4:	e0a5      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abc:	e0a1      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003abe:	2310      	movs	r3, #16
 8003ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac4:	e09d      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <UART_SetConfig+0x2f0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <UART_SetConfig+0x218>
 8003ad0:	4b45      	ldr	r3, [pc, #276]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8003adc:	d016      	beq.n	8003b0c <UART_SetConfig+0x208>
 8003ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae0:	d818      	bhi.n	8003b14 <UART_SetConfig+0x210>
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d00a      	beq.n	8003afc <UART_SetConfig+0x1f8>
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d814      	bhi.n	8003b14 <UART_SetConfig+0x210>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <UART_SetConfig+0x1f0>
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d008      	beq.n	8003b04 <UART_SetConfig+0x200>
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x210>
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e082      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e07e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	e07a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b12:	e076      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	e072      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a35      	ldr	r2, [pc, #212]	@ (8003bf8 <UART_SetConfig+0x2f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12a      	bne.n	8003b7c <UART_SetConfig+0x278>
 8003b26:	4b30      	ldr	r3, [pc, #192]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b34:	d01a      	beq.n	8003b6c <UART_SetConfig+0x268>
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d81b      	bhi.n	8003b74 <UART_SetConfig+0x270>
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	d00c      	beq.n	8003b5c <UART_SetConfig+0x258>
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b46:	d815      	bhi.n	8003b74 <UART_SetConfig+0x270>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <UART_SetConfig+0x250>
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b50:	d008      	beq.n	8003b64 <UART_SetConfig+0x260>
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x270>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5a:	e052      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e04e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6a:	e04a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e046      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e042      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <UART_SetConfig+0x2dc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d13a      	bne.n	8003bfc <UART_SetConfig+0x2f8>
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b94:	d01a      	beq.n	8003bcc <UART_SetConfig+0x2c8>
 8003b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b9a:	d81b      	bhi.n	8003bd4 <UART_SetConfig+0x2d0>
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba0:	d00c      	beq.n	8003bbc <UART_SetConfig+0x2b8>
 8003ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba6:	d815      	bhi.n	8003bd4 <UART_SetConfig+0x2d0>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <UART_SetConfig+0x2b0>
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	d008      	beq.n	8003bc4 <UART_SetConfig+0x2c0>
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x2d0>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bba:	e022      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc2:	e01e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bca:	e01a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	e016      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e012      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bdc:	cfff69f3 	.word	0xcfff69f3
 8003be0:	40008000 	.word	0x40008000
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40004400 	.word	0x40004400
 8003bf0:	40004800 	.word	0x40004800
 8003bf4:	40004c00 	.word	0x40004c00
 8003bf8:	40005000 	.word	0x40005000
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4aae      	ldr	r2, [pc, #696]	@ (8003ec0 <UART_SetConfig+0x5bc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f040 8097 	bne.w	8003d3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d823      	bhi.n	8003c5e <UART_SetConfig+0x35a>
 8003c16:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0x318>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c4f 	.word	0x08003c4f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c5f 	.word	0x08003c5f
 8003c38:	08003c5f 	.word	0x08003c5f
 8003c3c:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe ff44 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b9e      	ldr	r3, [pc, #632]	@ (8003ec4 <UART_SetConfig+0x5c0>)
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fecf 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003c52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8130 	beq.w	8003ed2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	4a94      	ldr	r2, [pc, #592]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d305      	bcc.n	8003ca2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d903      	bls.n	8003caa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ca8:	e113      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2200      	movs	r2, #0
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	60fa      	str	r2, [r7, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	4a84      	ldr	r2, [pc, #528]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ccc:	f7fc faf8 	bl	80002c0 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	020b      	lsls	r3, r1, #8
 8003ce2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ce6:	0202      	lsls	r2, r0, #8
 8003ce8:	6979      	ldr	r1, [r7, #20]
 8003cea:	6849      	ldr	r1, [r1, #4]
 8003cec:	0849      	lsrs	r1, r1, #1
 8003cee:	2000      	movs	r0, #0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	eb12 0804 	adds.w	r8, r2, r4
 8003cf8:	eb43 0905 	adc.w	r9, r3, r5
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	469a      	mov	sl, r3
 8003d04:	4693      	mov	fp, r2
 8003d06:	4652      	mov	r2, sl
 8003d08:	465b      	mov	r3, fp
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	f7fc fad7 	bl	80002c0 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4613      	mov	r3, r2
 8003d18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d20:	d308      	bcc.n	8003d34 <UART_SetConfig+0x430>
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d28:	d204      	bcs.n	8003d34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e0ce      	b.n	8003ed2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d3a:	e0ca      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	d166      	bne.n	8003e14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d827      	bhi.n	8003d9e <UART_SetConfig+0x49a>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0x450>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fea8 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe feba 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec4 <UART_SetConfig+0x5c0>)
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe fe2f 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003d92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8090 	beq.w	8003ed2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	4a44      	ldr	r2, [pc, #272]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc4:	005a      	lsls	r2, r3, #1
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	441a      	add	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d916      	bls.n	8003e0c <UART_SetConfig+0x508>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de4:	d212      	bcs.n	8003e0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f023 030f 	bic.w	r3, r3, #15
 8003dee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	8bfb      	ldrh	r3, [r7, #30]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	8bfa      	ldrh	r2, [r7, #30]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	e062      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e12:	e05e      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d828      	bhi.n	8003e6e <UART_SetConfig+0x56a>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x520>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e6f 	.word	0x08003e6f
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e6f 	.word	0x08003e6f
 8003e3c:	08003e6f 	.word	0x08003e6f
 8003e40:	08003e6f 	.word	0x08003e6f
 8003e44:	08003e67 	.word	0x08003e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fe40 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e4e:	e014      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fe fe52 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e56:	e010      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <UART_SetConfig+0x5c0>)
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e5c:	e00d      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7fe fdc7 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e64:	e009      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e6c:	e005      	b.n	8003e7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e78:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	4a10      	ldr	r2, [pc, #64]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d910      	bls.n	8003ecc <UART_SetConfig+0x5c8>
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d20c      	bcs.n	8003ecc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e009      	b.n	8003ed2 <UART_SetConfig+0x5ce>
 8003ebe:	bf00      	nop
 8003ec0:	40008000 	.word	0x40008000
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	08007fec 	.word	0x08007fec
      }
      else
      {
        ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2200      	movs	r2, #0
 8003eec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003eee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3730      	adds	r7, #48	@ 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01a      	beq.n	8004012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffa:	d10a      	bne.n	8004012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b098      	sub	sp, #96	@ 0x60
 8004044:	af02      	add	r7, sp, #8
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004050:	f7fc ff46 	bl	8000ee0 <HAL_GetTick>
 8004054:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d12f      	bne.n	80040c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f88e 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d022      	beq.n	80040c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800408c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004092:	653b      	str	r3, [r7, #80]	@ 0x50
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e6      	bne.n	800407e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e063      	b.n	800418c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d149      	bne.n	8004166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f857 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03c      	beq.n	8004166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	623b      	str	r3, [r7, #32]
   return(result);
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	633b      	str	r3, [r7, #48]	@ 0x30
 800410c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e6      	bne.n	80040ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	60fb      	str	r3, [r7, #12]
   return(result);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413e:	61fa      	str	r2, [r7, #28]
 8004140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	617b      	str	r3, [r7, #20]
   return(result);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e012      	b.n	800418c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3758      	adds	r7, #88	@ 0x58
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	e04f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ac:	d04b      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fc fe97 	bl	8000ee0 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e04e      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d037      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d034      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b40      	cmp	r3, #64	@ 0x40
 80041e0:	d031      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d110      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f838 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2208      	movs	r2, #8
 8004202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e029      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d111      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f81e 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d0a0      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b095      	sub	sp, #84	@ 0x54
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004294:	643b      	str	r3, [r7, #64]	@ 0x40
 8004296:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800429a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e3      	bne.n	80042a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d118      	bne.n	800431a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 0310 	bic.w	r3, r3, #16
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6979      	ldr	r1, [r7, #20]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	613b      	str	r3, [r7, #16]
   return(result);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e6      	bne.n	80042e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800432e:	bf00      	nop
 8004330:	3754      	adds	r7, #84	@ 0x54
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UARTEx_DisableFifoMode+0x16>
 800434c:	2302      	movs	r3, #2
 800434e:	e027      	b.n	80043a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800437e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e02d      	b.n	8004420 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	@ 0x24
 80043d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f84f 	bl	80044a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e02d      	b.n	800449c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	@ 0x24
 800444c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f811 	bl	80044a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d108      	bne.n	80044c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044c4:	e031      	b.n	800452a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044c6:	2308      	movs	r3, #8
 80044c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044ca:	2308      	movs	r3, #8
 80044cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	0e5b      	lsrs	r3, r3, #25
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0f5b      	lsrs	r3, r3, #29
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	7b3a      	ldrb	r2, [r7, #12]
 80044f2:	4911      	ldr	r1, [pc, #68]	@ (8004538 <UARTEx_SetNbDataToProcess+0x94>)
 80044f4:	5c8a      	ldrb	r2, [r1, r2]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044fa:	7b3a      	ldrb	r2, [r7, #12]
 80044fc:	490f      	ldr	r1, [pc, #60]	@ (800453c <UARTEx_SetNbDataToProcess+0x98>)
 80044fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004500:	fb93 f3f2 	sdiv	r3, r3, r2
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	7b7a      	ldrb	r2, [r7, #13]
 8004510:	4909      	ldr	r1, [pc, #36]	@ (8004538 <UARTEx_SetNbDataToProcess+0x94>)
 8004512:	5c8a      	ldrb	r2, [r1, r2]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004518:	7b7a      	ldrb	r2, [r7, #13]
 800451a:	4908      	ldr	r1, [pc, #32]	@ (800453c <UARTEx_SetNbDataToProcess+0x98>)
 800451c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800451e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	08008004 	.word	0x08008004
 800453c:	0800800c 	.word	0x0800800c

08004540 <__NVIC_SetPriority>:
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	@ (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	@ (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <SysTick_Handler+0x1c>)
 800459a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800459c:	f001 fd18 	bl	8005fd0 <xTaskGetSchedulerState>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045a6:	f002 fb0f 	bl	8006bc8 <xPortSysTickHandler>
  }
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045b8:	2100      	movs	r1, #0
 80045ba:	f06f 0004 	mvn.w	r0, #4
 80045be:	f7ff ffbf 	bl	8004540 <__NVIC_SetPriority>
#endif
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ce:	f3ef 8305 	mrs	r3, IPSR
 80045d2:	603b      	str	r3, [r7, #0]
  return(result);
 80045d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045da:	f06f 0305 	mvn.w	r3, #5
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	e00c      	b.n	80045fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045e2:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <osKernelInitialize+0x44>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d105      	bne.n	80045f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045ea:	4b08      	ldr	r3, [pc, #32]	@ (800460c <osKernelInitialize+0x44>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	e002      	b.n	80045fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045fc:	687b      	ldr	r3, [r7, #4]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000020c 	.word	0x2000020c

08004610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004616:	f3ef 8305 	mrs	r3, IPSR
 800461a:	603b      	str	r3, [r7, #0]
  return(result);
 800461c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004622:	f06f 0305 	mvn.w	r3, #5
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e010      	b.n	800464c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800462a:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <osKernelStart+0x48>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d109      	bne.n	8004646 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004632:	f7ff ffbf 	bl	80045b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004636:	4b08      	ldr	r3, [pc, #32]	@ (8004658 <osKernelStart+0x48>)
 8004638:	2202      	movs	r2, #2
 800463a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800463c:	f001 f87a 	bl	8005734 <vTaskStartScheduler>
      stat = osOK;
 8004640:	2300      	movs	r3, #0
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	e002      	b.n	800464c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800464a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800464c:	687b      	ldr	r3, [r7, #4]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000020c 	.word	0x2000020c

0800465c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b08e      	sub	sp, #56	@ 0x38
 8004660:	af04      	add	r7, sp, #16
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466c:	f3ef 8305 	mrs	r3, IPSR
 8004670:	617b      	str	r3, [r7, #20]
  return(result);
 8004672:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004674:	2b00      	cmp	r3, #0
 8004676:	d17e      	bne.n	8004776 <osThreadNew+0x11a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d07b      	beq.n	8004776 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004682:	2318      	movs	r3, #24
 8004684:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800468e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d045      	beq.n	8004722 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <osThreadNew+0x48>
        name = attr->name;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <osThreadNew+0x6e>
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2b38      	cmp	r3, #56	@ 0x38
 80046bc:	d805      	bhi.n	80046ca <osThreadNew+0x6e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <osThreadNew+0x72>
        return (NULL);
 80046ca:	2300      	movs	r3, #0
 80046cc:	e054      	b.n	8004778 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00e      	beq.n	8004704 <osThreadNew+0xa8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80046ec:	d90a      	bls.n	8004704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <osThreadNew+0xa8>
        mem = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	e010      	b.n	8004726 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10c      	bne.n	8004726 <osThreadNew+0xca>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d108      	bne.n	8004726 <osThreadNew+0xca>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <osThreadNew+0xca>
          mem = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e001      	b.n	8004726 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d110      	bne.n	800474e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004734:	9202      	str	r2, [sp, #8]
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6a3a      	ldr	r2, [r7, #32]
 8004740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fe1a 	bl	800537c <xTaskCreateStatic>
 8004748:	4603      	mov	r3, r0
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e013      	b.n	8004776 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d110      	bne.n	8004776 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	b29a      	uxth	r2, r3
 8004758:	f107 0310 	add.w	r3, r7, #16
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fe68 	bl	800543c <xTaskCreate>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <osThreadNew+0x11a>
            hTask = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004776:	693b      	ldr	r3, [r7, #16]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004788:	f3ef 8305 	mrs	r3, IPSR
 800478c:	60bb      	str	r3, [r7, #8]
  return(result);
 800478e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <osDelay+0x1c>
    stat = osErrorISR;
 8004794:	f06f 0305 	mvn.w	r3, #5
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e007      	b.n	80047ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 ff8e 	bl	80056c8 <vTaskDelay>
    }
  }

  return (stat);
 80047ac:	68fb      	ldr	r3, [r7, #12]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a07      	ldr	r2, [pc, #28]	@ (80047e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80047c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a06      	ldr	r2, [pc, #24]	@ (80047e8 <vApplicationGetIdleTaskMemory+0x30>)
 80047ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2280      	movs	r2, #128	@ 0x80
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000210 	.word	0x20000210
 80047e8:	2000026c 	.word	0x2000026c

080047ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a07      	ldr	r2, [pc, #28]	@ (8004818 <vApplicationGetTimerTaskMemory+0x2c>)
 80047fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a06      	ldr	r2, [pc, #24]	@ (800481c <vApplicationGetTimerTaskMemory+0x30>)
 8004802:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800480a:	601a      	str	r2, [r3, #0]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	2000046c 	.word	0x2000046c
 800481c:	200004c8 	.word	0x200004c8

08004820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0208 	add.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f103 0208 	add.w	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f103 0208 	add.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048d8:	d103      	bne.n	80048e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e00c      	b.n	80048fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3308      	adds	r3, #8
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e002      	b.n	80048f0 <vListInsert+0x2e>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d2f6      	bcs.n	80048ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6852      	ldr	r2, [r2, #4]
 8004954:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d103      	bne.n	8004968 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	1e5a      	subs	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049b4:	f002 f878 	bl	8006aa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	441a      	add	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	3b01      	subs	r3, #1
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	22ff      	movs	r2, #255	@ 0xff
 80049f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	22ff      	movs	r2, #255	@ 0xff
 8004a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d114      	bne.n	8004a34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01a      	beq.n	8004a48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3310      	adds	r3, #16
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f91a 	bl	8005c50 <xTaskRemoveFromEventList>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a22:	4b0d      	ldr	r3, [pc, #52]	@ (8004a58 <xQueueGenericReset+0xd0>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	e009      	b.n	8004a48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3310      	adds	r3, #16
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fef1 	bl	8004820 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3324      	adds	r3, #36	@ 0x24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff feec 	bl	8004820 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a48:	f002 f860 	bl	8006b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a4c:	2301      	movs	r3, #1
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08e      	sub	sp, #56	@ 0x38
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <xQueueGenericCreateStatic+0x56>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <xQueueGenericCreateStatic+0x5a>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueGenericCreateStatic+0x5c>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	623b      	str	r3, [r7, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <xQueueGenericCreateStatic+0x84>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <xQueueGenericCreateStatic+0x88>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <xQueueGenericCreateStatic+0x8a>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	61fb      	str	r3, [r7, #28]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b02:	2350      	movs	r3, #80	@ 0x50
 8004b04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b50      	cmp	r3, #80	@ 0x50
 8004b0a:	d00b      	beq.n	8004b24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61bb      	str	r3, [r7, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f805 	bl	8004b56 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3730      	adds	r7, #48	@ 0x30
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b84:	2101      	movs	r1, #1
 8004b86:	69b8      	ldr	r0, [r7, #24]
 8004b88:	f7ff fefe 	bl	8004988 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	@ 0x38
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004baa:	2300      	movs	r3, #0
 8004bac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <xQueueGenericSend+0x34>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <xQueueGenericSend+0x42>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <xQueueGenericSend+0x46>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xQueueGenericSend+0x48>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <xQueueGenericSend+0x64>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d103      	bne.n	8004c0e <xQueueGenericSend+0x72>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <xQueueGenericSend+0x76>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <xQueueGenericSend+0x78>
 8004c12:	2300      	movs	r3, #0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10b      	bne.n	8004c30 <xQueueGenericSend+0x94>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	623b      	str	r3, [r7, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c30:	f001 f9ce 	bl	8005fd0 <xTaskGetSchedulerState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <xQueueGenericSend+0xa4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <xQueueGenericSend+0xa8>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <xQueueGenericSend+0xaa>
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <xQueueGenericSend+0xc6>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	61fb      	str	r3, [r7, #28]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c62:	f001 ff21 	bl	8006aa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d302      	bcc.n	8004c78 <xQueueGenericSend+0xdc>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d129      	bne.n	8004ccc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c7e:	f000 fa0f 	bl	80050a0 <prvCopyDataToQueue>
 8004c82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	3324      	adds	r3, #36	@ 0x24
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 ffdd 	bl	8005c50 <xTaskRemoveFromEventList>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d013      	beq.n	8004cc4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <xQueueGenericSend+0x200>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	e00a      	b.n	8004cc4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cb4:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <xQueueGenericSend+0x200>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cc4:	f001 ff22 	bl	8006b0c <vPortExitCritical>
				return pdPASS;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e063      	b.n	8004d94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cd2:	f001 ff1b 	bl	8006b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e05c      	b.n	8004d94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 f817 	bl	8005d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cea:	2301      	movs	r3, #1
 8004cec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cee:	f001 ff0d 	bl	8006b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cf2:	f000 fd87 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cf6:	f001 fed7 	bl	8006aa8 <vPortEnterCritical>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d00:	b25b      	sxtb	r3, r3
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d06:	d103      	bne.n	8004d10 <xQueueGenericSend+0x174>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d16:	b25b      	sxtb	r3, r3
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d1c:	d103      	bne.n	8004d26 <xQueueGenericSend+0x18a>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d26:	f001 fef1 	bl	8006b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d2a:	1d3a      	adds	r2, r7, #4
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 f806 	bl	8005d44 <xTaskCheckForTimeOut>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d124      	bne.n	8004d88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d40:	f000 faa6 	bl	8005290 <prvIsQueueFull>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 ff2a 	bl	8005bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d5a:	f000 fa31 	bl	80051c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d5e:	f000 fd5f 	bl	8005820 <xTaskResumeAll>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f47f af7c 	bne.w	8004c62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <xQueueGenericSend+0x200>)
 8004d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	e772      	b.n	8004c62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d7e:	f000 fa1f 	bl	80051c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d82:	f000 fd4d 	bl	8005820 <xTaskResumeAll>
 8004d86:	e76c      	b.n	8004c62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d8a:	f000 fa19 	bl	80051c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d8e:	f000 fd47 	bl	8005820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3738      	adds	r7, #56	@ 0x38
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b090      	sub	sp, #64	@ 0x40
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
 8004dce:	e7fd      	b.n	8004dcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <xQueueGenericSendFromISR+0x3e>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <xQueueGenericSendFromISR+0x42>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <xQueueGenericSendFromISR+0x44>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d103      	bne.n	8004e0e <xQueueGenericSendFromISR+0x6e>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <xQueueGenericSendFromISR+0x72>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <xQueueGenericSendFromISR+0x74>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	623b      	str	r3, [r7, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e30:	f001 ff1a 	bl	8006c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e34:	f3ef 8211 	mrs	r2, BASEPRI
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61fa      	str	r2, [r7, #28]
 8004e4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d302      	bcc.n	8004e62 <xQueueGenericSendFromISR+0xc2>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d12f      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e78:	f000 f912 	bl	80050a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e84:	d112      	bne.n	8004eac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	3324      	adds	r3, #36	@ 0x24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fedc 	bl	8005c50 <xTaskRemoveFromEventList>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00e      	beq.n	8004ebc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e007      	b.n	8004ebc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	b25a      	sxtb	r2, r3
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ec0:	e001      	b.n	8004ec6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ed0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3740      	adds	r7, #64	@ 0x40
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	@ 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <xQueueReceive+0x32>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	623b      	str	r3, [r7, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	e7fd      	b.n	8004f0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <xQueueReceive+0x40>
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <xQueueReceive+0x44>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <xQueueReceive+0x46>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <xQueueReceive+0x62>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61fb      	str	r3, [r7, #28]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f3e:	f001 f847 	bl	8005fd0 <xTaskGetSchedulerState>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <xQueueReceive+0x72>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <xQueueReceive+0x76>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <xQueueReceive+0x78>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <xQueueReceive+0x94>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61bb      	str	r3, [r7, #24]
}
 8004f6a:	bf00      	nop
 8004f6c:	bf00      	nop
 8004f6e:	e7fd      	b.n	8004f6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f70:	f001 fd9a 	bl	8006aa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01f      	beq.n	8004fc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f84:	f000 f8f6 	bl	8005174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	1e5a      	subs	r2, r3, #1
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00f      	beq.n	8004fb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	3310      	adds	r3, #16
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fe57 	bl	8005c50 <xTaskRemoveFromEventList>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800509c <xQueueReceive+0x1c0>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fb8:	f001 fda8 	bl	8006b0c <vPortExitCritical>
				return pdPASS;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e069      	b.n	8005094 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fc6:	f001 fda1 	bl	8006b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e062      	b.n	8005094 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fe9d 	bl	8005d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fe2:	f001 fd93 	bl	8006b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fe6:	f000 fc0d 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fea:	f001 fd5d 	bl	8006aa8 <vPortEnterCritical>
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ffa:	d103      	bne.n	8005004 <xQueueReceive+0x128>
 8004ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800500a:	b25b      	sxtb	r3, r3
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005010:	d103      	bne.n	800501a <xQueueReceive+0x13e>
 8005012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800501a:	f001 fd77 	bl	8006b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800501e:	1d3a      	adds	r2, r7, #4
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fe8c 	bl	8005d44 <xTaskCheckForTimeOut>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d123      	bne.n	800507a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005034:	f000 f916 	bl	8005264 <prvIsQueueEmpty>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	3324      	adds	r3, #36	@ 0x24
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fdb0 	bl	8005bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800504c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800504e:	f000 f8b7 	bl	80051c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005052:	f000 fbe5 	bl	8005820 <xTaskResumeAll>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d189      	bne.n	8004f70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800505c:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <xQueueReceive+0x1c0>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	e780      	b.n	8004f70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800506e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005070:	f000 f8a6 	bl	80051c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005074:	f000 fbd4 	bl	8005820 <xTaskResumeAll>
 8005078:	e77a      	b.n	8004f70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800507a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800507c:	f000 f8a0 	bl	80051c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005080:	f000 fbce 	bl	8005820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005086:	f000 f8ed 	bl	8005264 <prvIsQueueEmpty>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f43f af6f 	beq.w	8004f70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005092:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005094:	4618      	mov	r0, r3
 8005096:	3730      	adds	r7, #48	@ 0x30
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14d      	bne.n	8005162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 ff9e 	bl	800600c <xTaskPriorityDisinherit>
 80050d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	e043      	b.n	8005162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d119      	bne.n	8005114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6858      	ldr	r0, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	461a      	mov	r2, r3
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	f002 f97f 	bl	80073ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	441a      	add	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d32b      	bcc.n	8005162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e026      	b.n	8005162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68d8      	ldr	r0, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	461a      	mov	r2, r3
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	f002 f965 	bl	80073ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	425b      	negs	r3, r3
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d207      	bcs.n	8005150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	425b      	negs	r3, r3
 800514a:	441a      	add	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d105      	bne.n	8005162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3b01      	subs	r3, #1
 8005160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d303      	bcc.n	80051a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68d9      	ldr	r1, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	461a      	mov	r2, r3
 80051b2:	6838      	ldr	r0, [r7, #0]
 80051b4:	f002 f91b 	bl	80073ee <memcpy>
	}
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051c8:	f001 fc6e 	bl	8006aa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051d4:	e011      	b.n	80051fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	@ 0x24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd34 	bl	8005c50 <xTaskRemoveFromEventList>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051ee:	f000 fe0d 	bl	8005e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dce9      	bgt.n	80051d6 <prvUnlockQueue+0x16>
 8005202:	e000      	b.n	8005206 <prvUnlockQueue+0x46>
					break;
 8005204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	22ff      	movs	r2, #255	@ 0xff
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800520e:	f001 fc7d 	bl	8006b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005212:	f001 fc49 	bl	8006aa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800521c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800521e:	e011      	b.n	8005244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d012      	beq.n	800524e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fd0f 	bl	8005c50 <xTaskRemoveFromEventList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005238:	f000 fde8 	bl	8005e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	3b01      	subs	r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dce9      	bgt.n	8005220 <prvUnlockQueue+0x60>
 800524c:	e000      	b.n	8005250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800524e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	22ff      	movs	r2, #255	@ 0xff
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005258:	f001 fc58 	bl	8006b0c <vPortExitCritical>
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526c:	f001 fc1c 	bl	8006aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e001      	b.n	8005282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005282:	f001 fc43 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005298:	f001 fc06 	bl	8006aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d102      	bne.n	80052ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e001      	b.n	80052b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052b2:	f001 fc2b 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e014      	b.n	80052fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005310 <vQueueAddToRegistry+0x50>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052dc:	490c      	ldr	r1, [pc, #48]	@ (8005310 <vQueueAddToRegistry+0x50>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005310 <vQueueAddToRegistry+0x50>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052f2:	e006      	b.n	8005302 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b07      	cmp	r3, #7
 80052fe:	d9e7      	bls.n	80052d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	200008c8 	.word	0x200008c8

08005314 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005324:	f001 fbc0 	bl	8006aa8 <vPortEnterCritical>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005334:	d103      	bne.n	800533e <vQueueWaitForMessageRestricted+0x2a>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005344:	b25b      	sxtb	r3, r3
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534a:	d103      	bne.n	8005354 <vQueueWaitForMessageRestricted+0x40>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005354:	f001 fbda 	bl	8006b0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3324      	adds	r3, #36	@ 0x24
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fc45 	bl	8005bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7ff ff26 	bl	80051c0 <prvUnlockQueue>
	}
 8005374:	bf00      	nop
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	@ 0x38
 8005380:	af04      	add	r7, sp, #16
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800538a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	623b      	str	r3, [r7, #32]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053c6:	235c      	movs	r3, #92	@ 0x5c
 80053c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80053ce:	d00b      	beq.n	80053e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61bb      	str	r3, [r7, #24]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01e      	beq.n	800542e <xTaskCreateStatic+0xb2>
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01b      	beq.n	800542e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005408:	2300      	movs	r3, #0
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	9302      	str	r3, [sp, #8]
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f850 	bl	80054c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005426:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005428:	f000 f8de 	bl	80055e8 <prvAddNewTaskToReadyList>
 800542c:	e001      	b.n	8005432 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005432:	697b      	ldr	r3, [r7, #20]
	}
 8005434:	4618      	mov	r0, r3
 8005436:	3728      	adds	r7, #40	@ 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	@ 0x30
 8005440:	af04      	add	r7, sp, #16
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fc4b 	bl	8006cec <pvPortMalloc>
 8005456:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800545e:	205c      	movs	r0, #92	@ 0x5c
 8005460:	f001 fc44 	bl	8006cec <pvPortMalloc>
 8005464:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	631a      	str	r2, [r3, #48]	@ 0x30
 8005472:	e005      	b.n	8005480 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f001 fd07 	bl	8006e88 <vPortFree>
 800547a:	e001      	b.n	8005480 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d017      	beq.n	80054b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	2300      	movs	r3, #0
 8005492:	9303      	str	r3, [sp, #12]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f80e 	bl	80054c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054aa:	69f8      	ldr	r0, [r7, #28]
 80054ac:	f000 f89c 	bl	80055e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e002      	b.n	80054bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054bc:	69bb      	ldr	r3, [r7, #24]
	}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	461a      	mov	r2, r3
 80054de:	21a5      	movs	r1, #165	@ 0xa5
 80054e0:	f001 ff09 	bl	80072f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054ee:	3b01      	subs	r3, #1
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f023 0307 	bic.w	r3, r3, #7
 80054fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	617b      	str	r3, [r7, #20]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01f      	beq.n	8005566 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	e012      	b.n	8005552 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	7819      	ldrb	r1, [r3, #0]
 8005534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	3334      	adds	r3, #52	@ 0x34
 800553c:	460a      	mov	r2, r1
 800553e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3301      	adds	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d9e9      	bls.n	800552c <prvInitialiseNewTask+0x66>
 8005558:	e000      	b.n	800555c <prvInitialiseNewTask+0x96>
			{
				break;
 800555a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005564:	e003      	b.n	800556e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	2b37      	cmp	r3, #55	@ 0x37
 8005572:	d901      	bls.n	8005578 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005574:	2337      	movs	r3, #55	@ 0x37
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005582:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	2200      	movs	r2, #0
 8005588:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	3304      	adds	r3, #4
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff f966 	bl	8004860 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	3318      	adds	r3, #24
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff f961 	bl	8004860 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	69b8      	ldr	r0, [r7, #24]
 80055c8:	f001 f93e 	bl	8006848 <pxPortInitialiseStack>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055de:	bf00      	nop
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055f0:	f001 fa5a 	bl	8006aa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055f4:	4b2d      	ldr	r3, [pc, #180]	@ (80056ac <prvAddNewTaskToReadyList+0xc4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a2c      	ldr	r2, [pc, #176]	@ (80056ac <prvAddNewTaskToReadyList+0xc4>)
 80055fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055fe:	4b2c      	ldr	r3, [pc, #176]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005606:	4a2a      	ldr	r2, [pc, #168]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800560c:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <prvAddNewTaskToReadyList+0xc4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005614:	f000 fc1e 	bl	8005e54 <prvInitialiseTaskLists>
 8005618:	e00d      	b.n	8005636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800561a:	4b26      	ldr	r3, [pc, #152]	@ (80056b4 <prvAddNewTaskToReadyList+0xcc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005622:	4b23      	ldr	r3, [pc, #140]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	429a      	cmp	r2, r3
 800562e:	d802      	bhi.n	8005636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005630:	4a1f      	ldr	r2, [pc, #124]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <prvAddNewTaskToReadyList+0xd0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	4a1e      	ldr	r2, [pc, #120]	@ (80056b8 <prvAddNewTaskToReadyList+0xd0>)
 800563e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <prvAddNewTaskToReadyList+0xd0>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564c:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <prvAddNewTaskToReadyList+0xd4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <prvAddNewTaskToReadyList+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <prvAddNewTaskToReadyList+0xd4>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <prvAddNewTaskToReadyList+0xd8>)
 800566a:	441a      	add	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7ff f901 	bl	800487a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005678:	f001 fa48 	bl	8006b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800567c:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <prvAddNewTaskToReadyList+0xcc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005684:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	429a      	cmp	r2, r3
 8005690:	d207      	bcs.n	80056a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <prvAddNewTaskToReadyList+0xdc>)
 8005694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000ddc 	.word	0x20000ddc
 80056b0:	20000908 	.word	0x20000908
 80056b4:	20000de8 	.word	0x20000de8
 80056b8:	20000df8 	.word	0x20000df8
 80056bc:	20000de4 	.word	0x20000de4
 80056c0:	2000090c 	.word	0x2000090c
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <vTaskDelay+0x64>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <vTaskDelay+0x32>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056fa:	f000 f883 	bl	8005804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056fe:	2100      	movs	r1, #0
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fcf3 	bl	80060ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005706:	f000 f88b 	bl	8005820 <xTaskResumeAll>
 800570a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <vTaskDelay+0x68>)
 8005714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000e04 	.word	0x20000e04
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005742:	463a      	mov	r2, r7
 8005744:	1d39      	adds	r1, r7, #4
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff f834 	bl	80047b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	9202      	str	r2, [sp, #8]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	460a      	mov	r2, r1
 8005762:	4922      	ldr	r1, [pc, #136]	@ (80057ec <vTaskStartScheduler+0xb8>)
 8005764:	4822      	ldr	r0, [pc, #136]	@ (80057f0 <vTaskStartScheduler+0xbc>)
 8005766:	f7ff fe09 	bl	800537c <xTaskCreateStatic>
 800576a:	4603      	mov	r3, r0
 800576c:	4a21      	ldr	r2, [pc, #132]	@ (80057f4 <vTaskStartScheduler+0xc0>)
 800576e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005770:	4b20      	ldr	r3, [pc, #128]	@ (80057f4 <vTaskStartScheduler+0xc0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e001      	b.n	8005782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d102      	bne.n	800578e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005788:	f000 fd04 	bl	8006194 <xTimerCreateTimerTask>
 800578c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d116      	bne.n	80057c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	613b      	str	r3, [r7, #16]
}
 80057a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a8:	4b13      	ldr	r3, [pc, #76]	@ (80057f8 <vTaskStartScheduler+0xc4>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057b0:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <vTaskStartScheduler+0xc8>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057b6:	4b12      	ldr	r3, [pc, #72]	@ (8005800 <vTaskStartScheduler+0xcc>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057bc:	f001 f8d0 	bl	8006960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057c0:	e00f      	b.n	80057e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057c8:	d10b      	bne.n	80057e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60fb      	str	r3, [r7, #12]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <vTaskStartScheduler+0xaa>
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	08007f88 	.word	0x08007f88
 80057f0:	08005e25 	.word	0x08005e25
 80057f4:	20000e00 	.word	0x20000e00
 80057f8:	20000dfc 	.word	0x20000dfc
 80057fc:	20000de8 	.word	0x20000de8
 8005800:	20000de0 	.word	0x20000de0

08005804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005808:	4b04      	ldr	r3, [pc, #16]	@ (800581c <vTaskSuspendAll+0x18>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a03      	ldr	r2, [pc, #12]	@ (800581c <vTaskSuspendAll+0x18>)
 8005810:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000e04 	.word	0x20000e04

08005820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800582e:	4b42      	ldr	r3, [pc, #264]	@ (8005938 <xTaskResumeAll+0x118>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <xTaskResumeAll+0x2e>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	603b      	str	r3, [r7, #0]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800584e:	f001 f92b 	bl	8006aa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005852:	4b39      	ldr	r3, [pc, #228]	@ (8005938 <xTaskResumeAll+0x118>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	4a37      	ldr	r2, [pc, #220]	@ (8005938 <xTaskResumeAll+0x118>)
 800585a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585c:	4b36      	ldr	r3, [pc, #216]	@ (8005938 <xTaskResumeAll+0x118>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d162      	bne.n	800592a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005864:	4b35      	ldr	r3, [pc, #212]	@ (800593c <xTaskResumeAll+0x11c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05e      	beq.n	800592a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586c:	e02f      	b.n	80058ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586e:	4b34      	ldr	r3, [pc, #208]	@ (8005940 <xTaskResumeAll+0x120>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3318      	adds	r3, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f85a 	bl	8004934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3304      	adds	r3, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff f855 	bl	8004934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588e:	4b2d      	ldr	r3, [pc, #180]	@ (8005944 <xTaskResumeAll+0x124>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d903      	bls.n	800589e <xTaskResumeAll+0x7e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <xTaskResumeAll+0x124>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a27      	ldr	r2, [pc, #156]	@ (8005948 <xTaskResumeAll+0x128>)
 80058ac:	441a      	add	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f7fe ffe0 	bl	800487a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058be:	4b23      	ldr	r3, [pc, #140]	@ (800594c <xTaskResumeAll+0x12c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058c8:	4b21      	ldr	r3, [pc, #132]	@ (8005950 <xTaskResumeAll+0x130>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005940 <xTaskResumeAll+0x120>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1cb      	bne.n	800586e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058dc:	f000 fb58 	bl	8005f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <xTaskResumeAll+0x134>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d010      	beq.n	800590e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058ec:	f000 f846 	bl	800597c <xTaskIncrementTick>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058f6:	4b16      	ldr	r3, [pc, #88]	@ (8005950 <xTaskResumeAll+0x130>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3b01      	subs	r3, #1
 8005900:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f1      	bne.n	80058ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005908:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <xTaskResumeAll+0x134>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800590e:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <xTaskResumeAll+0x130>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005916:	2301      	movs	r3, #1
 8005918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <xTaskResumeAll+0x138>)
 800591c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800592a:	f001 f8ef 	bl	8006b0c <vPortExitCritical>

	return xAlreadyYielded;
 800592e:	68bb      	ldr	r3, [r7, #8]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000e04 	.word	0x20000e04
 800593c:	20000ddc 	.word	0x20000ddc
 8005940:	20000d9c 	.word	0x20000d9c
 8005944:	20000de4 	.word	0x20000de4
 8005948:	2000090c 	.word	0x2000090c
 800594c:	20000908 	.word	0x20000908
 8005950:	20000df0 	.word	0x20000df0
 8005954:	20000dec 	.word	0x20000dec
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005962:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <xTaskGetTickCount+0x1c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005968:	687b      	ldr	r3, [r7, #4]
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000de0 	.word	0x20000de0

0800597c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005986:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac4 <xTaskIncrementTick+0x148>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 8090 	bne.w	8005ab0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005990:	4b4d      	ldr	r3, [pc, #308]	@ (8005ac8 <xTaskIncrementTick+0x14c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005998:	4a4b      	ldr	r2, [pc, #300]	@ (8005ac8 <xTaskIncrementTick+0x14c>)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d121      	bne.n	80059e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059a4:	4b49      	ldr	r3, [pc, #292]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	603b      	str	r3, [r7, #0]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <xTaskIncrementTick+0x46>
 80059c6:	4b41      	ldr	r3, [pc, #260]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	4b40      	ldr	r3, [pc, #256]	@ (8005ad0 <xTaskIncrementTick+0x154>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3e      	ldr	r2, [pc, #248]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad0 <xTaskIncrementTick+0x154>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <xTaskIncrementTick+0x158>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad4 <xTaskIncrementTick+0x158>)
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	f000 fad4 	bl	8005f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059e8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <xTaskIncrementTick+0x15c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d349      	bcc.n	8005a86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f2:	4b36      	ldr	r3, [pc, #216]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fc:	4b36      	ldr	r3, [pc, #216]	@ (8005ad8 <xTaskIncrementTick+0x15c>)
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a02:	601a      	str	r2, [r3, #0]
					break;
 8005a04:	e03f      	b.n	8005a86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b31      	ldr	r3, [pc, #196]	@ (8005acc <xTaskIncrementTick+0x150>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d203      	bcs.n	8005a26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad8 <xTaskIncrementTick+0x15c>)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a24:	e02f      	b.n	8005a86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe ff82 	bl	8004934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe ff79 	bl	8004934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a46:	4b25      	ldr	r3, [pc, #148]	@ (8005adc <xTaskIncrementTick+0x160>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d903      	bls.n	8005a56 <xTaskIncrementTick+0xda>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	4a22      	ldr	r2, [pc, #136]	@ (8005adc <xTaskIncrementTick+0x160>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae0 <xTaskIncrementTick+0x164>)
 8005a64:	441a      	add	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe ff04 	bl	800487a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae4 <xTaskIncrementTick+0x168>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3b8      	bcc.n	80059f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a84:	e7b5      	b.n	80059f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a86:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <xTaskIncrementTick+0x168>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8c:	4914      	ldr	r1, [pc, #80]	@ (8005ae0 <xTaskIncrementTick+0x164>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d901      	bls.n	8005aa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aa2:	4b11      	ldr	r3, [pc, #68]	@ (8005ae8 <xTaskIncrementTick+0x16c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e004      	b.n	8005aba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8005aec <xTaskIncrementTick+0x170>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8005aec <xTaskIncrementTick+0x170>)
 8005ab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000e04 	.word	0x20000e04
 8005ac8:	20000de0 	.word	0x20000de0
 8005acc:	20000d94 	.word	0x20000d94
 8005ad0:	20000d98 	.word	0x20000d98
 8005ad4:	20000df4 	.word	0x20000df4
 8005ad8:	20000dfc 	.word	0x20000dfc
 8005adc:	20000de4 	.word	0x20000de4
 8005ae0:	2000090c 	.word	0x2000090c
 8005ae4:	20000908 	.word	0x20000908
 8005ae8:	20000df0 	.word	0x20000df0
 8005aec:	20000dec 	.word	0x20000dec

08005af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005af6:	4b28      	ldr	r3, [pc, #160]	@ (8005b98 <vTaskSwitchContext+0xa8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <vTaskSwitchContext+0xac>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b04:	e042      	b.n	8005b8c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005b06:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <vTaskSwitchContext+0xac>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ba0 <vTaskSwitchContext+0xb0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e011      	b.n	8005b38 <vTaskSwitchContext+0x48>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <vTaskSwitchContext+0x42>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	607b      	str	r3, [r7, #4]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <vTaskSwitchContext+0x3e>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	491a      	ldr	r1, [pc, #104]	@ (8005ba4 <vTaskSwitchContext+0xb4>)
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0e3      	beq.n	8005b14 <vTaskSwitchContext+0x24>
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a13      	ldr	r2, [pc, #76]	@ (8005ba4 <vTaskSwitchContext+0xb4>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d104      	bne.n	8005b7c <vTaskSwitchContext+0x8c>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <vTaskSwitchContext+0xb8>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4a06      	ldr	r2, [pc, #24]	@ (8005ba0 <vTaskSwitchContext+0xb0>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000e04 	.word	0x20000e04
 8005b9c:	20000df0 	.word	0x20000df0
 8005ba0:	20000de4 	.word	0x20000de4
 8005ba4:	2000090c 	.word	0x2000090c
 8005ba8:	20000908 	.word	0x20000908

08005bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60fb      	str	r3, [r7, #12]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bd4:	4b07      	ldr	r3, [pc, #28]	@ (8005bf4 <vTaskPlaceOnEventList+0x48>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fe fe70 	bl	80048c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005be2:	2101      	movs	r1, #1
 8005be4:	6838      	ldr	r0, [r7, #0]
 8005be6:	f000 fa81 	bl	80060ec <prvAddCurrentTaskToDelayedList>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000908 	.word	0x20000908

08005bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	617b      	str	r3, [r7, #20]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c22:	4b0a      	ldr	r3, [pc, #40]	@ (8005c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3318      	adds	r3, #24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7fe fe25 	bl	800487a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	f000 fa54 	bl	80060ec <prvAddCurrentTaskToDelayedList>
	}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000908 	.word	0x20000908

08005c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3318      	adds	r3, #24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fe56 	bl	8004934 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c88:	4b1d      	ldr	r3, [pc, #116]	@ (8005d00 <xTaskRemoveFromEventList+0xb0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11d      	bne.n	8005ccc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fe4d 	bl	8004934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9e:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <xTaskRemoveFromEventList+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d903      	bls.n	8005cae <xTaskRemoveFromEventList+0x5e>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	4a16      	ldr	r2, [pc, #88]	@ (8005d04 <xTaskRemoveFromEventList+0xb4>)
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4a13      	ldr	r2, [pc, #76]	@ (8005d08 <xTaskRemoveFromEventList+0xb8>)
 8005cbc:	441a      	add	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fe fdd8 	bl	800487a <vListInsertEnd>
 8005cca:	e005      	b.n	8005cd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	480e      	ldr	r0, [pc, #56]	@ (8005d0c <xTaskRemoveFromEventList+0xbc>)
 8005cd4:	f7fe fdd1 	bl	800487a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <xTaskRemoveFromEventList+0xc0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d905      	bls.n	8005cf2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cea:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <xTaskRemoveFromEventList+0xc4>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e001      	b.n	8005cf6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000e04 	.word	0x20000e04
 8005d04:	20000de4 	.word	0x20000de4
 8005d08:	2000090c 	.word	0x2000090c
 8005d0c:	20000d9c 	.word	0x20000d9c
 8005d10:	20000908 	.word	0x20000908
 8005d14:	20000df0 	.word	0x20000df0

08005d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <vTaskInternalSetTimeOutState+0x24>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <vTaskInternalSetTimeOutState+0x28>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000df4 	.word	0x20000df4
 8005d40:	20000de0 	.word	0x20000de0

08005d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	bf00      	nop
 8005d6a:	e7fd      	b.n	8005d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d8a:	f000 fe8d 	bl	8006aa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <xTaskCheckForTimeOut+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005da6:	d102      	bne.n	8005dae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e023      	b.n	8005df6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <xTaskCheckForTimeOut+0xc4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d007      	beq.n	8005dca <xTaskCheckForTimeOut+0x86>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e015      	b.n	8005df6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d20b      	bcs.n	8005dec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff99 	bl	8005d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e004      	b.n	8005df6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005df6:	f000 fe89 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000de0 	.word	0x20000de0
 8005e08:	20000df4 	.word	0x20000df4

08005e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e10:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <vTaskMissedYield+0x14>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	20000df0 	.word	0x20000df0

08005e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e2c:	f000 f852 	bl	8005ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <prvIdleTask+0x28>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d9f9      	bls.n	8005e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <prvIdleTask+0x2c>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e48:	e7f0      	b.n	8005e2c <prvIdleTask+0x8>
 8005e4a:	bf00      	nop
 8005e4c:	2000090c 	.word	0x2000090c
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	e00c      	b.n	8005e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <prvInitialiseTaskLists+0x60>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fcd6 	bl	8004820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3301      	adds	r3, #1
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b37      	cmp	r3, #55	@ 0x37
 8005e7e:	d9ef      	bls.n	8005e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e80:	480d      	ldr	r0, [pc, #52]	@ (8005eb8 <prvInitialiseTaskLists+0x64>)
 8005e82:	f7fe fccd 	bl	8004820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e86:	480d      	ldr	r0, [pc, #52]	@ (8005ebc <prvInitialiseTaskLists+0x68>)
 8005e88:	f7fe fcca 	bl	8004820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e8c:	480c      	ldr	r0, [pc, #48]	@ (8005ec0 <prvInitialiseTaskLists+0x6c>)
 8005e8e:	f7fe fcc7 	bl	8004820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e92:	480c      	ldr	r0, [pc, #48]	@ (8005ec4 <prvInitialiseTaskLists+0x70>)
 8005e94:	f7fe fcc4 	bl	8004820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e98:	480b      	ldr	r0, [pc, #44]	@ (8005ec8 <prvInitialiseTaskLists+0x74>)
 8005e9a:	f7fe fcc1 	bl	8004820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <prvInitialiseTaskLists+0x78>)
 8005ea0:	4a05      	ldr	r2, [pc, #20]	@ (8005eb8 <prvInitialiseTaskLists+0x64>)
 8005ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <prvInitialiseTaskLists+0x7c>)
 8005ea6:	4a05      	ldr	r2, [pc, #20]	@ (8005ebc <prvInitialiseTaskLists+0x68>)
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2000090c 	.word	0x2000090c
 8005eb8:	20000d6c 	.word	0x20000d6c
 8005ebc:	20000d80 	.word	0x20000d80
 8005ec0:	20000d9c 	.word	0x20000d9c
 8005ec4:	20000db0 	.word	0x20000db0
 8005ec8:	20000dc8 	.word	0x20000dc8
 8005ecc:	20000d94 	.word	0x20000d94
 8005ed0:	20000d98 	.word	0x20000d98

08005ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eda:	e019      	b.n	8005f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005edc:	f000 fde4 	bl	8006aa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee0:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <prvCheckTasksWaitingTermination+0x50>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fd21 	bl	8004934 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <prvCheckTasksWaitingTermination+0x54>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f28 <prvCheckTasksWaitingTermination+0x54>)
 8005efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f06:	f000 fe01 	bl	8006b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f810 	bl	8005f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f10:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e1      	bne.n	8005edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000db0 	.word	0x20000db0
 8005f28:	20000ddc 	.word	0x20000ddc
 8005f2c:	20000dc4 	.word	0x20000dc4

08005f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 ff9e 	bl	8006e88 <vPortFree>
				vPortFree( pxTCB );
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 ff9b 	bl	8006e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f52:	e019      	b.n	8005f88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d103      	bne.n	8005f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 ff92 	bl	8006e88 <vPortFree>
	}
 8005f64:	e010      	b.n	8005f88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d00b      	beq.n	8005f88 <prvDeleteTCB+0x58>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <prvDeleteTCB+0x54>
	}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <prvResetNextTaskUnblockTime+0x38>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <prvResetNextTaskUnblockTime+0x3c>)
 8005fa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fa8:	e008      	b.n	8005fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <prvResetNextTaskUnblockTime+0x38>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <prvResetNextTaskUnblockTime+0x3c>)
 8005fba:	6013      	str	r3, [r2, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	20000d94 	.word	0x20000d94
 8005fcc:	20000dfc 	.word	0x20000dfc

08005fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <xTaskGetSchedulerState+0x34>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	e008      	b.n	8005ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe4:	4b08      	ldr	r3, [pc, #32]	@ (8006008 <xTaskGetSchedulerState+0x38>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fec:	2302      	movs	r3, #2
 8005fee:	607b      	str	r3, [r7, #4]
 8005ff0:	e001      	b.n	8005ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ff6:	687b      	ldr	r3, [r7, #4]
	}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	20000de8 	.word	0x20000de8
 8006008:	20000e04 	.word	0x20000e04

0800600c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d058      	beq.n	80060d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006022:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <xTaskPriorityDisinherit+0xd4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	d00b      	beq.n	8006044 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60bb      	str	r3, [r7, #8]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	1e5a      	subs	r2, r3, #1
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006076:	429a      	cmp	r2, r3
 8006078:	d02c      	beq.n	80060d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607e:	2b00      	cmp	r3, #0
 8006080:	d128      	bne.n	80060d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe fc54 	bl	8004934 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <xTaskPriorityDisinherit+0xd8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d903      	bls.n	80060b4 <xTaskPriorityDisinherit+0xa8>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4a0c      	ldr	r2, [pc, #48]	@ (80060e4 <xTaskPriorityDisinherit+0xd8>)
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4a09      	ldr	r2, [pc, #36]	@ (80060e8 <xTaskPriorityDisinherit+0xdc>)
 80060c2:	441a      	add	r2, r3
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fe fbd5 	bl	800487a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060d4:	697b      	ldr	r3, [r7, #20]
	}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000908 	.word	0x20000908
 80060e4:	20000de4 	.word	0x20000de4
 80060e8:	2000090c 	.word	0x2000090c

080060ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060f6:	4b21      	ldr	r3, [pc, #132]	@ (800617c <prvAddCurrentTaskToDelayedList+0x90>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060fc:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fc16 	bl	8004934 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800610e:	d10a      	bne.n	8006126 <prvAddCurrentTaskToDelayedList+0x3a>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006116:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4819      	ldr	r0, [pc, #100]	@ (8006184 <prvAddCurrentTaskToDelayedList+0x98>)
 8006120:	f7fe fbab 	bl	800487a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006124:	e026      	b.n	8006174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800612e:	4b14      	ldr	r3, [pc, #80]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	429a      	cmp	r2, r3
 800613c:	d209      	bcs.n	8006152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613e:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe fbb9 	bl	80048c2 <vListInsert>
}
 8006150:	e010      	b.n	8006174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006152:	4b0e      	ldr	r3, [pc, #56]	@ (800618c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7fe fbaf 	bl	80048c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006164:	4b0a      	ldr	r3, [pc, #40]	@ (8006190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d202      	bcs.n	8006174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800616e:	4a08      	ldr	r2, [pc, #32]	@ (8006190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6013      	str	r3, [r2, #0]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000de0 	.word	0x20000de0
 8006180:	20000908 	.word	0x20000908
 8006184:	20000dc8 	.word	0x20000dc8
 8006188:	20000d98 	.word	0x20000d98
 800618c:	20000d94 	.word	0x20000d94
 8006190:	20000dfc 	.word	0x20000dfc

08006194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	@ 0x28
 8006198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800619e:	f000 fb13 	bl	80067c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006218 <xTimerCreateTimerTask+0x84>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d021      	beq.n	80061ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061b2:	1d3a      	adds	r2, r7, #4
 80061b4:	f107 0108 	add.w	r1, r7, #8
 80061b8:	f107 030c 	add.w	r3, r7, #12
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fb15 	bl	80047ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	9202      	str	r2, [sp, #8]
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	2302      	movs	r3, #2
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	460a      	mov	r2, r1
 80061d4:	4911      	ldr	r1, [pc, #68]	@ (800621c <xTimerCreateTimerTask+0x88>)
 80061d6:	4812      	ldr	r0, [pc, #72]	@ (8006220 <xTimerCreateTimerTask+0x8c>)
 80061d8:	f7ff f8d0 	bl	800537c <xTaskCreateStatic>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a11      	ldr	r2, [pc, #68]	@ (8006224 <xTimerCreateTimerTask+0x90>)
 80061e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <xTimerCreateTimerTask+0x90>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061ea:	2301      	movs	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	613b      	str	r3, [r7, #16]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800620c:	697b      	ldr	r3, [r7, #20]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000e38 	.word	0x20000e38
 800621c:	08007f90 	.word	0x08007f90
 8006220:	08006361 	.word	0x08006361
 8006224:	20000e3c 	.word	0x20000e3c

08006228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <xTimerGenericCommand+0x30>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	623b      	str	r3, [r7, #32]
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006258:	4b19      	ldr	r3, [pc, #100]	@ (80062c0 <xTimerGenericCommand+0x98>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02a      	beq.n	80062b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	dc18      	bgt.n	80062a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006272:	f7ff fead 	bl	8005fd0 <xTaskGetSchedulerState>
 8006276:	4603      	mov	r3, r0
 8006278:	2b02      	cmp	r3, #2
 800627a:	d109      	bne.n	8006290 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800627c:	4b10      	ldr	r3, [pc, #64]	@ (80062c0 <xTimerGenericCommand+0x98>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f107 0110 	add.w	r1, r7, #16
 8006284:	2300      	movs	r3, #0
 8006286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006288:	f7fe fc88 	bl	8004b9c <xQueueGenericSend>
 800628c:	6278      	str	r0, [r7, #36]	@ 0x24
 800628e:	e012      	b.n	80062b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <xTimerGenericCommand+0x98>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f107 0110 	add.w	r1, r7, #16
 8006298:	2300      	movs	r3, #0
 800629a:	2200      	movs	r2, #0
 800629c:	f7fe fc7e 	bl	8004b9c <xQueueGenericSend>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80062a2:	e008      	b.n	80062b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <xTimerGenericCommand+0x98>)
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	f107 0110 	add.w	r1, r7, #16
 80062ac:	2300      	movs	r3, #0
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	f7fe fd76 	bl	8004da0 <xQueueGenericSendFromISR>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3728      	adds	r7, #40	@ 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000e38 	.word	0x20000e38

080062c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ce:	4b23      	ldr	r3, [pc, #140]	@ (800635c <prvProcessExpiredTimer+0x98>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fb29 	bl	8004934 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d023      	beq.n	8006338 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	18d1      	adds	r1, r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	6978      	ldr	r0, [r7, #20]
 80062fe:	f000 f8d5 	bl	80064ac <prvInsertTimerInActiveList>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006308:	2300      	movs	r3, #0
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2300      	movs	r3, #0
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	2100      	movs	r1, #0
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f7ff ff88 	bl	8006228 <xTimerGenericCommand>
 8006318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d114      	bne.n	800634a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	6978      	ldr	r0, [r7, #20]
 8006350:	4798      	blx	r3
}
 8006352:	bf00      	nop
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000e30 	.word	0x20000e30

08006360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f859 	bl	8006424 <prvGetNextExpireTime>
 8006372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f805 	bl	8006388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800637e:	f000 f8d7 	bl	8006530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006382:	bf00      	nop
 8006384:	e7f0      	b.n	8006368 <prvTimerTask+0x8>
	...

08006388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006392:	f7ff fa37 	bl	8005804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f866 	bl	800646c <prvSampleTimeNow>
 80063a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d130      	bne.n	800640a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <prvProcessTimerOrBlockTask+0x3c>
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d806      	bhi.n	80063c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063b6:	f7ff fa33 	bl	8005820 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff81 	bl	80062c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063c2:	e024      	b.n	800640e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ca:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <prvProcessTimerOrBlockTask+0x90>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <prvProcessTimerOrBlockTask+0x50>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <prvProcessTimerOrBlockTask+0x52>
 80063d8:	2300      	movs	r3, #0
 80063da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063dc:	4b0f      	ldr	r3, [pc, #60]	@ (800641c <prvProcessTimerOrBlockTask+0x94>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fe ff93 	bl	8005314 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063ee:	f7ff fa17 	bl	8005820 <xTaskResumeAll>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063f8:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <prvProcessTimerOrBlockTask+0x98>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
}
 8006408:	e001      	b.n	800640e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800640a:	f7ff fa09 	bl	8005820 <xTaskResumeAll>
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000e34 	.word	0x20000e34
 800641c:	20000e38 	.word	0x20000e38
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800642c:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <prvGetNextExpireTime+0x44>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <prvGetNextExpireTime+0x16>
 8006436:	2201      	movs	r2, #1
 8006438:	e000      	b.n	800643c <prvGetNextExpireTime+0x18>
 800643a:	2200      	movs	r2, #0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006448:	4b07      	ldr	r3, [pc, #28]	@ (8006468 <prvGetNextExpireTime+0x44>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e001      	b.n	8006458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000e30 	.word	0x20000e30

0800646c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006474:	f7ff fa72 	bl	800595c <xTaskGetTickCount>
 8006478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800647a:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <prvSampleTimeNow+0x3c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d205      	bcs.n	8006490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006484:	f000 f93a 	bl	80066fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e002      	b.n	8006496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006496:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <prvSampleTimeNow+0x3c>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800649c:	68fb      	ldr	r3, [r7, #12]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000e40 	.word	0x20000e40

080064ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d812      	bhi.n	80064f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e01b      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064e6:	4b10      	ldr	r3, [pc, #64]	@ (8006528 <prvInsertTimerInActiveList+0x7c>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3304      	adds	r3, #4
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fe f9e6 	bl	80048c2 <vListInsert>
 80064f6:	e012      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d206      	bcs.n	800650e <prvInsertTimerInActiveList+0x62>
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e007      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <prvInsertTimerInActiveList+0x80>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7fe f9d2 	bl	80048c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800651e:	697b      	ldr	r3, [r7, #20]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000e34 	.word	0x20000e34
 800652c:	20000e30 	.word	0x20000e30

08006530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	@ 0x38
 8006534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006536:	e0ce      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da19      	bge.n	8006572 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	3304      	adds	r3, #4
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006568:	6850      	ldr	r0, [r2, #4]
 800656a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800656c:	6892      	ldr	r2, [r2, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f2c0 80ae 	blt.w	80066d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	3304      	adds	r3, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe f9d2 	bl	8004934 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006590:	463b      	mov	r3, r7
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff ff6a 	bl	800646c <prvSampleTimeNow>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b09      	cmp	r3, #9
 800659e:	f200 8097 	bhi.w	80066d0 <prvProcessReceivedCommands+0x1a0>
 80065a2:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <prvProcessReceivedCommands+0x78>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065d1 	.word	0x080065d1
 80065b4:	08006647 	.word	0x08006647
 80065b8:	0800665b 	.word	0x0800665b
 80065bc:	080066a7 	.word	0x080066a7
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065d1 	.word	0x080065d1
 80065c8:	08006647 	.word	0x08006647
 80065cc:	0800665b 	.word	0x0800665b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	18d1      	adds	r1, r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f0:	f7ff ff5c 	bl	80064ac <prvInsertTimerInActiveList>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d06c      	beq.n	80066d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d061      	beq.n	80066d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	441a      	add	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2300      	movs	r3, #0
 800661e:	2100      	movs	r1, #0
 8006620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006622:	f7ff fe01 	bl	8006228 <xTimerGenericCommand>
 8006626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d152      	bne.n	80066d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	61bb      	str	r3, [r7, #24]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006658:	e03d      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	18d1      	adds	r1, r2, r3
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a0:	f7ff ff04 	bl	80064ac <prvInsertTimerInActiveList>
					break;
 80066a4:	e017      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80066b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b6:	f000 fbe7 	bl	8006e88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066ba:	e00c      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066ce:	e002      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80066d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066d6:	4b08      	ldr	r3, [pc, #32]	@ (80066f8 <prvProcessReceivedCommands+0x1c8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	1d39      	adds	r1, r7, #4
 80066dc:	2200      	movs	r2, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fbfc 	bl	8004edc <xQueueReceive>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f47f af26 	bne.w	8006538 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	3730      	adds	r7, #48	@ 0x30
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000e38 	.word	0x20000e38

080066fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006702:	e049      	b.n	8006798 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006704:	4b2e      	ldr	r3, [pc, #184]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670e:	4b2c      	ldr	r3, [pc, #176]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3304      	adds	r3, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe f909 	bl	8004934 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d02f      	beq.n	8006798 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d90e      	bls.n	8006768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006756:	4b1a      	ldr	r3, [pc, #104]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fe f8ae 	bl	80048c2 <vListInsert>
 8006766:	e017      	b.n	8006798 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006768:	2300      	movs	r3, #0
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	2100      	movs	r1, #0
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fd58 	bl	8006228 <xTimerGenericCommand>
 8006778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	603b      	str	r3, [r7, #0]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006798:	4b09      	ldr	r3, [pc, #36]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1b0      	bne.n	8006704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067a2:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067a8:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <prvSwitchTimerLists+0xc8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a04      	ldr	r2, [pc, #16]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 80067ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067b0:	4a04      	ldr	r2, [pc, #16]	@ (80067c4 <prvSwitchTimerLists+0xc8>)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000e30 	.word	0x20000e30
 80067c4:	20000e34 	.word	0x20000e34

080067c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067ce:	f000 f96b 	bl	8006aa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d120      	bne.n	800681c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067da:	4814      	ldr	r0, [pc, #80]	@ (800682c <prvCheckForValidListAndQueue+0x64>)
 80067dc:	f7fe f820 	bl	8004820 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067e0:	4813      	ldr	r0, [pc, #76]	@ (8006830 <prvCheckForValidListAndQueue+0x68>)
 80067e2:	f7fe f81d 	bl	8004820 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067e6:	4b13      	ldr	r3, [pc, #76]	@ (8006834 <prvCheckForValidListAndQueue+0x6c>)
 80067e8:	4a10      	ldr	r2, [pc, #64]	@ (800682c <prvCheckForValidListAndQueue+0x64>)
 80067ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067ec:	4b12      	ldr	r3, [pc, #72]	@ (8006838 <prvCheckForValidListAndQueue+0x70>)
 80067ee:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <prvCheckForValidListAndQueue+0x68>)
 80067f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067f2:	2300      	movs	r3, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	4b11      	ldr	r3, [pc, #68]	@ (800683c <prvCheckForValidListAndQueue+0x74>)
 80067f8:	4a11      	ldr	r2, [pc, #68]	@ (8006840 <prvCheckForValidListAndQueue+0x78>)
 80067fa:	2110      	movs	r1, #16
 80067fc:	200a      	movs	r0, #10
 80067fe:	f7fe f92d 	bl	8004a5c <xQueueGenericCreateStatic>
 8006802:	4603      	mov	r3, r0
 8006804:	4a08      	ldr	r2, [pc, #32]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 8006806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006808:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	490b      	ldr	r1, [pc, #44]	@ (8006844 <prvCheckForValidListAndQueue+0x7c>)
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fd52 	bl	80052c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800681c:	f000 f976 	bl	8006b0c <vPortExitCritical>
}
 8006820:	bf00      	nop
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000e38 	.word	0x20000e38
 800682c:	20000e08 	.word	0x20000e08
 8006830:	20000e1c 	.word	0x20000e1c
 8006834:	20000e30 	.word	0x20000e30
 8006838:	20000e34 	.word	0x20000e34
 800683c:	20000ee4 	.word	0x20000ee4
 8006840:	20000e44 	.word	0x20000e44
 8006844:	08007f98 	.word	0x08007f98

08006848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b04      	subs	r3, #4
 8006858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b04      	subs	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b04      	subs	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006878:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <pxPortInitialiseStack+0x64>)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b14      	subs	r3, #20
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3b04      	subs	r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f06f 0202 	mvn.w	r2, #2
 8006896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3b20      	subs	r3, #32
 800689c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	080068b1 	.word	0x080068b1

080068b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ba:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <prvTaskExitError+0x58>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068c2:	d00b      	beq.n	80068dc <prvTaskExitError+0x2c>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <prvTaskExitError+0x28>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60bb      	str	r3, [r7, #8]
}
 80068ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068f0:	bf00      	nop
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0fc      	beq.n	80068f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	2000000c 	.word	0x2000000c
 800690c:	00000000 	.word	0x00000000

08006910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006910:	4b07      	ldr	r3, [pc, #28]	@ (8006930 <pxCurrentTCBConst2>)
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6808      	ldr	r0, [r1, #0]
 8006916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	f380 8809 	msr	PSP, r0
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8811 	msr	BASEPRI, r0
 800692a:	4770      	bx	lr
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst2>:
 8006930:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006938:	4808      	ldr	r0, [pc, #32]	@ (800695c <prvPortStartFirstTask+0x24>)
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	6800      	ldr	r0, [r0, #0]
 800693e:	f380 8808 	msr	MSP, r0
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8814 	msr	CONTROL, r0
 800694a:	b662      	cpsie	i
 800694c:	b661      	cpsie	f
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	df00      	svc	0
 8006958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800695a:	bf00      	nop
 800695c:	e000ed08 	.word	0xe000ed08

08006960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006966:	4b47      	ldr	r3, [pc, #284]	@ (8006a84 <xPortStartScheduler+0x124>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a47      	ldr	r2, [pc, #284]	@ (8006a88 <xPortStartScheduler+0x128>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10b      	bne.n	8006988 <xPortStartScheduler+0x28>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	613b      	str	r3, [r7, #16]
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006988:	4b3e      	ldr	r3, [pc, #248]	@ (8006a84 <xPortStartScheduler+0x124>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a8c <xPortStartScheduler+0x12c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d10b      	bne.n	80069aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069aa:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <xPortStartScheduler+0x130>)
 80069ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	22ff      	movs	r2, #255	@ 0xff
 80069ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	4b31      	ldr	r3, [pc, #196]	@ (8006a94 <xPortStartScheduler+0x134>)
 80069d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069d2:	4b31      	ldr	r3, [pc, #196]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069d4:	2207      	movs	r2, #7
 80069d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069d8:	e009      	b.n	80069ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069da:	4b2f      	ldr	r3, [pc, #188]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3b01      	subs	r3, #1
 80069e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f6:	2b80      	cmp	r3, #128	@ 0x80
 80069f8:	d0ef      	beq.n	80069da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069fa:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1c3 0307 	rsb	r3, r3, #7
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d00b      	beq.n	8006a1e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	4a1c      	ldr	r2, [pc, #112]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a30:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a3c:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a48:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a54:	f000 f8da 	bl	8006c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <xPortStartScheduler+0x140>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a5e:	f000 f8f9 	bl	8006c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <xPortStartScheduler+0x144>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0f      	ldr	r2, [pc, #60]	@ (8006aa4 <xPortStartScheduler+0x144>)
 8006a68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a6e:	f7ff ff63 	bl	8006938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a72:	f7ff f83d 	bl	8005af0 <vTaskSwitchContext>
	prvTaskExitError();
 8006a76:	f7ff ff1b 	bl	80068b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	e000ed00 	.word	0xe000ed00
 8006a88:	410fc271 	.word	0x410fc271
 8006a8c:	410fc270 	.word	0x410fc270
 8006a90:	e000e400 	.word	0xe000e400
 8006a94:	20000f34 	.word	0x20000f34
 8006a98:	20000f38 	.word	0x20000f38
 8006a9c:	e000ed20 	.word	0xe000ed20
 8006aa0:	2000000c 	.word	0x2000000c
 8006aa4:	e000ef34 	.word	0xe000ef34

08006aa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ac2:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006aca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006acc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d110      	bne.n	8006af6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <vPortEnterCritical+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	603b      	str	r3, [r7, #0]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <vPortEnterCritical+0x4a>
	}
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	2000000c 	.word	0x2000000c
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b12:	4b12      	ldr	r3, [pc, #72]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <vPortExitCritical+0x26>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b32:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4a08      	ldr	r2, [pc, #32]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b3c:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <vPortExitCritical+0x44>
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f383 8811 	msr	BASEPRI, r3
}
 8006b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	2000000c 	.word	0x2000000c

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b15      	ldr	r3, [pc, #84]	@ (8006bc0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f01e 0f10 	tst.w	lr, #16
 8006b70:	bf08      	it	eq
 8006b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b84:	f380 8811 	msr	BASEPRI, r0
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f7fe ffae 	bl	8005af0 <vTaskSwitchContext>
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	f380 8811 	msr	BASEPRI, r0
 8006b9c:	bc09      	pop	{r0, r3}
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba6:	f01e 0f10 	tst.w	lr, #16
 8006baa:	bf08      	it	eq
 8006bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bb0:	f380 8809 	msr	PSP, r0
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst>:
 8006bc0:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006be2:	f7fe fecb 	bl	800597c <xTaskIncrementTick>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bec:	4b06      	ldr	r3, [pc, #24]	@ (8006c08 <xPortSysTickHandler+0x40>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <vPortSetupTimerInterrupt+0x34>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	@ (8006c44 <vPortSetupTimerInterrupt+0x38>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <vPortSetupTimerInterrupt+0x3c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	@ (8006c4c <vPortSetupTimerInterrupt+0x40>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	4a09      	ldr	r2, [pc, #36]	@ (8006c50 <vPortSetupTimerInterrupt+0x44>)
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c2e:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <vPortSetupTimerInterrupt+0x34>)
 8006c30:	2207      	movs	r2, #7
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	e000e010 	.word	0xe000e010
 8006c44:	e000e018 	.word	0xe000e018
 8006c48:	20000000 	.word	0x20000000
 8006c4c:	10624dd3 	.word	0x10624dd3
 8006c50:	e000e014 	.word	0xe000e014

08006c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c64 <vPortEnableVFP+0x10>
 8006c58:	6801      	ldr	r1, [r0, #0]
 8006c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c5e:	6001      	str	r1, [r0, #0]
 8006c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c62:	bf00      	nop
 8006c64:	e000ed88 	.word	0xe000ed88

08006c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c6e:	f3ef 8305 	mrs	r3, IPSR
 8006c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d915      	bls.n	8006ca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <vPortValidateInterruptPriority+0x74>)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c84:	4b16      	ldr	r3, [pc, #88]	@ (8006ce0 <vPortValidateInterruptPriority+0x78>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	7afa      	ldrb	r2, [r7, #11]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d20b      	bcs.n	8006ca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <vPortValidateInterruptPriority+0x7c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce8 <vPortValidateInterruptPriority+0x80>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d90b      	bls.n	8006cce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	603b      	str	r3, [r7, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <vPortValidateInterruptPriority+0x62>
	}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	e000e3f0 	.word	0xe000e3f0
 8006ce0:	20000f34 	.word	0x20000f34
 8006ce4:	e000ed0c 	.word	0xe000ed0c
 8006ce8:	20000f38 	.word	0x20000f38

08006cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	@ 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cf8:	f7fe fd84 	bl	8005804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e70 <pvPortMalloc+0x184>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d04:	f000 f924 	bl	8006f50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d08:	4b5a      	ldr	r3, [pc, #360]	@ (8006e74 <pvPortMalloc+0x188>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 8095 	bne.w	8006e40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01e      	beq.n	8006d5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d015      	beq.n	8006d5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f023 0307 	bic.w	r3, r3, #7
 8006d34:	3308      	adds	r3, #8
 8006d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <pvPortMalloc+0x6e>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	617b      	str	r3, [r7, #20]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d06f      	beq.n	8006e40 <pvPortMalloc+0x154>
 8006d60:	4b45      	ldr	r3, [pc, #276]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d86a      	bhi.n	8006e40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d6a:	4b44      	ldr	r3, [pc, #272]	@ (8006e7c <pvPortMalloc+0x190>)
 8006d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d6e:	4b43      	ldr	r3, [pc, #268]	@ (8006e7c <pvPortMalloc+0x190>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d74:	e004      	b.n	8006d80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d903      	bls.n	8006d92 <pvPortMalloc+0xa6>
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1f1      	bne.n	8006d76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d92:	4b37      	ldr	r3, [pc, #220]	@ (8006e70 <pvPortMalloc+0x184>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d051      	beq.n	8006e40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2208      	movs	r2, #8
 8006da2:	4413      	add	r3, r2
 8006da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	1ad2      	subs	r2, r2, r3
 8006db6:	2308      	movs	r3, #8
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d920      	bls.n	8006e00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <pvPortMalloc+0xfc>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dfa:	69b8      	ldr	r0, [r7, #24]
 8006dfc:	f000 f90a 	bl	8007014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e00:	4b1d      	ldr	r3, [pc, #116]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b1b      	ldr	r3, [pc, #108]	@ (8006e80 <pvPortMalloc+0x194>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d203      	bcs.n	8006e22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e1a:	4b17      	ldr	r3, [pc, #92]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a18      	ldr	r2, [pc, #96]	@ (8006e80 <pvPortMalloc+0x194>)
 8006e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <pvPortMalloc+0x188>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e36:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <pvPortMalloc+0x198>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	4a11      	ldr	r2, [pc, #68]	@ (8006e84 <pvPortMalloc+0x198>)
 8006e3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e40:	f7fe fcee 	bl	8005820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <pvPortMalloc+0x17a>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60fb      	str	r3, [r7, #12]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <pvPortMalloc+0x176>
	return pvReturn;
 8006e66:	69fb      	ldr	r3, [r7, #28]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	@ 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20001b44 	.word	0x20001b44
 8006e74:	20001b58 	.word	0x20001b58
 8006e78:	20001b48 	.word	0x20001b48
 8006e7c:	20001b3c 	.word	0x20001b3c
 8006e80:	20001b4c 	.word	0x20001b4c
 8006e84:	20001b50 	.word	0x20001b50

08006e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d04f      	beq.n	8006f3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	425b      	negs	r3, r3
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4b25      	ldr	r3, [pc, #148]	@ (8006f44 <vPortFree+0xbc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <vPortFree+0x46>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60fb      	str	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <vPortFree+0x66>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60bb      	str	r3, [r7, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	e7fd      	b.n	8006eea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <vPortFree+0xbc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01e      	beq.n	8006f3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d11a      	bne.n	8006f3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <vPortFree+0xbc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	401a      	ands	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f14:	f7fe fc76 	bl	8005804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <vPortFree+0xc0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <vPortFree+0xc0>)
 8006f24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f26:	6938      	ldr	r0, [r7, #16]
 8006f28:	f000 f874 	bl	8007014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f2c:	4b07      	ldr	r3, [pc, #28]	@ (8006f4c <vPortFree+0xc4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4a06      	ldr	r2, [pc, #24]	@ (8006f4c <vPortFree+0xc4>)
 8006f34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f36:	f7fe fc73 	bl	8005820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20001b58 	.word	0x20001b58
 8006f48:	20001b48 	.word	0x20001b48
 8006f4c:	20001b54 	.word	0x20001b54

08006f50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006f5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f5c:	4b27      	ldr	r3, [pc, #156]	@ (8006ffc <prvHeapInit+0xac>)
 8006f5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3307      	adds	r3, #7
 8006f6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0307 	bic.w	r3, r3, #7
 8006f76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ffc <prvHeapInit+0xac>)
 8006f80:	4413      	add	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f88:	4a1d      	ldr	r2, [pc, #116]	@ (8007000 <prvHeapInit+0xb0>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <prvHeapInit+0xb0>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	4413      	add	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0307 	bic.w	r3, r3, #7
 8006faa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a15      	ldr	r2, [pc, #84]	@ (8007004 <prvHeapInit+0xb4>)
 8006fb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fb2:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <prvHeapInit+0xb4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fba:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <prvHeapInit+0xb4>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <prvHeapInit+0xb4>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8007008 <prvHeapInit+0xb8>)
 8006fde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4a09      	ldr	r2, [pc, #36]	@ (800700c <prvHeapInit+0xbc>)
 8006fe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fe8:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <prvHeapInit+0xc0>)
 8006fea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006fee:	601a      	str	r2, [r3, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	20000f3c 	.word	0x20000f3c
 8007000:	20001b3c 	.word	0x20001b3c
 8007004:	20001b44 	.word	0x20001b44
 8007008:	20001b4c 	.word	0x20001b4c
 800700c:	20001b48 	.word	0x20001b48
 8007010:	20001b58 	.word	0x20001b58

08007014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800701c:	4b28      	ldr	r3, [pc, #160]	@ (80070c0 <prvInsertBlockIntoFreeList+0xac>)
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e002      	b.n	8007028 <prvInsertBlockIntoFreeList+0x14>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	429a      	cmp	r2, r3
 8007030:	d8f7      	bhi.n	8007022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d108      	bne.n	8007056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	441a      	add	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d118      	bne.n	800709c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b15      	ldr	r3, [pc, #84]	@ (80070c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d00d      	beq.n	8007092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e008      	b.n	80070a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007092:	4b0c      	ldr	r3, [pc, #48]	@ (80070c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e003      	b.n	80070a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d002      	beq.n	80070b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20001b3c 	.word	0x20001b3c
 80070c4:	20001b44 	.word	0x20001b44

080070c8 <std>:
 80070c8:	2300      	movs	r3, #0
 80070ca:	b510      	push	{r4, lr}
 80070cc:	4604      	mov	r4, r0
 80070ce:	e9c0 3300 	strd	r3, r3, [r0]
 80070d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070d6:	6083      	str	r3, [r0, #8]
 80070d8:	8181      	strh	r1, [r0, #12]
 80070da:	6643      	str	r3, [r0, #100]	@ 0x64
 80070dc:	81c2      	strh	r2, [r0, #14]
 80070de:	6183      	str	r3, [r0, #24]
 80070e0:	4619      	mov	r1, r3
 80070e2:	2208      	movs	r2, #8
 80070e4:	305c      	adds	r0, #92	@ 0x5c
 80070e6:	f000 f906 	bl	80072f6 <memset>
 80070ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007120 <std+0x58>)
 80070ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80070ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007124 <std+0x5c>)
 80070f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007128 <std+0x60>)
 80070f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <std+0x64>)
 80070f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80070fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <std+0x68>)
 80070fc:	6224      	str	r4, [r4, #32]
 80070fe:	429c      	cmp	r4, r3
 8007100:	d006      	beq.n	8007110 <std+0x48>
 8007102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007106:	4294      	cmp	r4, r2
 8007108:	d002      	beq.n	8007110 <std+0x48>
 800710a:	33d0      	adds	r3, #208	@ 0xd0
 800710c:	429c      	cmp	r4, r3
 800710e:	d105      	bne.n	800711c <std+0x54>
 8007110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007118:	f000 b966 	b.w	80073e8 <__retarget_lock_init_recursive>
 800711c:	bd10      	pop	{r4, pc}
 800711e:	bf00      	nop
 8007120:	08007271 	.word	0x08007271
 8007124:	08007293 	.word	0x08007293
 8007128:	080072cb 	.word	0x080072cb
 800712c:	080072ef 	.word	0x080072ef
 8007130:	20001b5c 	.word	0x20001b5c

08007134 <stdio_exit_handler>:
 8007134:	4a02      	ldr	r2, [pc, #8]	@ (8007140 <stdio_exit_handler+0xc>)
 8007136:	4903      	ldr	r1, [pc, #12]	@ (8007144 <stdio_exit_handler+0x10>)
 8007138:	4803      	ldr	r0, [pc, #12]	@ (8007148 <stdio_exit_handler+0x14>)
 800713a:	f000 b869 	b.w	8007210 <_fwalk_sglue>
 800713e:	bf00      	nop
 8007140:	20000010 	.word	0x20000010
 8007144:	08007ca5 	.word	0x08007ca5
 8007148:	20000020 	.word	0x20000020

0800714c <cleanup_stdio>:
 800714c:	6841      	ldr	r1, [r0, #4]
 800714e:	4b0c      	ldr	r3, [pc, #48]	@ (8007180 <cleanup_stdio+0x34>)
 8007150:	4299      	cmp	r1, r3
 8007152:	b510      	push	{r4, lr}
 8007154:	4604      	mov	r4, r0
 8007156:	d001      	beq.n	800715c <cleanup_stdio+0x10>
 8007158:	f000 fda4 	bl	8007ca4 <_fflush_r>
 800715c:	68a1      	ldr	r1, [r4, #8]
 800715e:	4b09      	ldr	r3, [pc, #36]	@ (8007184 <cleanup_stdio+0x38>)
 8007160:	4299      	cmp	r1, r3
 8007162:	d002      	beq.n	800716a <cleanup_stdio+0x1e>
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fd9d 	bl	8007ca4 <_fflush_r>
 800716a:	68e1      	ldr	r1, [r4, #12]
 800716c:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <cleanup_stdio+0x3c>)
 800716e:	4299      	cmp	r1, r3
 8007170:	d004      	beq.n	800717c <cleanup_stdio+0x30>
 8007172:	4620      	mov	r0, r4
 8007174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007178:	f000 bd94 	b.w	8007ca4 <_fflush_r>
 800717c:	bd10      	pop	{r4, pc}
 800717e:	bf00      	nop
 8007180:	20001b5c 	.word	0x20001b5c
 8007184:	20001bc4 	.word	0x20001bc4
 8007188:	20001c2c 	.word	0x20001c2c

0800718c <global_stdio_init.part.0>:
 800718c:	b510      	push	{r4, lr}
 800718e:	4b0b      	ldr	r3, [pc, #44]	@ (80071bc <global_stdio_init.part.0+0x30>)
 8007190:	4c0b      	ldr	r4, [pc, #44]	@ (80071c0 <global_stdio_init.part.0+0x34>)
 8007192:	4a0c      	ldr	r2, [pc, #48]	@ (80071c4 <global_stdio_init.part.0+0x38>)
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	4620      	mov	r0, r4
 8007198:	2200      	movs	r2, #0
 800719a:	2104      	movs	r1, #4
 800719c:	f7ff ff94 	bl	80070c8 <std>
 80071a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071a4:	2201      	movs	r2, #1
 80071a6:	2109      	movs	r1, #9
 80071a8:	f7ff ff8e 	bl	80070c8 <std>
 80071ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071b0:	2202      	movs	r2, #2
 80071b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b6:	2112      	movs	r1, #18
 80071b8:	f7ff bf86 	b.w	80070c8 <std>
 80071bc:	20001c94 	.word	0x20001c94
 80071c0:	20001b5c 	.word	0x20001b5c
 80071c4:	08007135 	.word	0x08007135

080071c8 <__sfp_lock_acquire>:
 80071c8:	4801      	ldr	r0, [pc, #4]	@ (80071d0 <__sfp_lock_acquire+0x8>)
 80071ca:	f000 b90e 	b.w	80073ea <__retarget_lock_acquire_recursive>
 80071ce:	bf00      	nop
 80071d0:	20001c9d 	.word	0x20001c9d

080071d4 <__sfp_lock_release>:
 80071d4:	4801      	ldr	r0, [pc, #4]	@ (80071dc <__sfp_lock_release+0x8>)
 80071d6:	f000 b909 	b.w	80073ec <__retarget_lock_release_recursive>
 80071da:	bf00      	nop
 80071dc:	20001c9d 	.word	0x20001c9d

080071e0 <__sinit>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	4604      	mov	r4, r0
 80071e4:	f7ff fff0 	bl	80071c8 <__sfp_lock_acquire>
 80071e8:	6a23      	ldr	r3, [r4, #32]
 80071ea:	b11b      	cbz	r3, 80071f4 <__sinit+0x14>
 80071ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f0:	f7ff bff0 	b.w	80071d4 <__sfp_lock_release>
 80071f4:	4b04      	ldr	r3, [pc, #16]	@ (8007208 <__sinit+0x28>)
 80071f6:	6223      	str	r3, [r4, #32]
 80071f8:	4b04      	ldr	r3, [pc, #16]	@ (800720c <__sinit+0x2c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f5      	bne.n	80071ec <__sinit+0xc>
 8007200:	f7ff ffc4 	bl	800718c <global_stdio_init.part.0>
 8007204:	e7f2      	b.n	80071ec <__sinit+0xc>
 8007206:	bf00      	nop
 8007208:	0800714d 	.word	0x0800714d
 800720c:	20001c94 	.word	0x20001c94

08007210 <_fwalk_sglue>:
 8007210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007214:	4607      	mov	r7, r0
 8007216:	4688      	mov	r8, r1
 8007218:	4614      	mov	r4, r2
 800721a:	2600      	movs	r6, #0
 800721c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007220:	f1b9 0901 	subs.w	r9, r9, #1
 8007224:	d505      	bpl.n	8007232 <_fwalk_sglue+0x22>
 8007226:	6824      	ldr	r4, [r4, #0]
 8007228:	2c00      	cmp	r4, #0
 800722a:	d1f7      	bne.n	800721c <_fwalk_sglue+0xc>
 800722c:	4630      	mov	r0, r6
 800722e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d907      	bls.n	8007248 <_fwalk_sglue+0x38>
 8007238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800723c:	3301      	adds	r3, #1
 800723e:	d003      	beq.n	8007248 <_fwalk_sglue+0x38>
 8007240:	4629      	mov	r1, r5
 8007242:	4638      	mov	r0, r7
 8007244:	47c0      	blx	r8
 8007246:	4306      	orrs	r6, r0
 8007248:	3568      	adds	r5, #104	@ 0x68
 800724a:	e7e9      	b.n	8007220 <_fwalk_sglue+0x10>

0800724c <iprintf>:
 800724c:	b40f      	push	{r0, r1, r2, r3}
 800724e:	b507      	push	{r0, r1, r2, lr}
 8007250:	4906      	ldr	r1, [pc, #24]	@ (800726c <iprintf+0x20>)
 8007252:	ab04      	add	r3, sp, #16
 8007254:	6808      	ldr	r0, [r1, #0]
 8007256:	f853 2b04 	ldr.w	r2, [r3], #4
 800725a:	6881      	ldr	r1, [r0, #8]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	f000 f9f7 	bl	8007650 <_vfiprintf_r>
 8007262:	b003      	add	sp, #12
 8007264:	f85d eb04 	ldr.w	lr, [sp], #4
 8007268:	b004      	add	sp, #16
 800726a:	4770      	bx	lr
 800726c:	2000001c 	.word	0x2000001c

08007270 <__sread>:
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	f000 f868 	bl	800734c <_read_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	bfab      	itete	ge
 8007280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007282:	89a3      	ldrhlt	r3, [r4, #12]
 8007284:	181b      	addge	r3, r3, r0
 8007286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800728a:	bfac      	ite	ge
 800728c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800728e:	81a3      	strhlt	r3, [r4, #12]
 8007290:	bd10      	pop	{r4, pc}

08007292 <__swrite>:
 8007292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	461f      	mov	r7, r3
 8007298:	898b      	ldrh	r3, [r1, #12]
 800729a:	05db      	lsls	r3, r3, #23
 800729c:	4605      	mov	r5, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	4616      	mov	r6, r2
 80072a2:	d505      	bpl.n	80072b0 <__swrite+0x1e>
 80072a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a8:	2302      	movs	r3, #2
 80072aa:	2200      	movs	r2, #0
 80072ac:	f000 f83c 	bl	8007328 <_lseek_r>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	4628      	mov	r0, r5
 80072c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c6:	f000 b853 	b.w	8007370 <_write_r>

080072ca <__sseek>:
 80072ca:	b510      	push	{r4, lr}
 80072cc:	460c      	mov	r4, r1
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 f829 	bl	8007328 <_lseek_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	bf15      	itete	ne
 80072dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072e6:	81a3      	strheq	r3, [r4, #12]
 80072e8:	bf18      	it	ne
 80072ea:	81a3      	strhne	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__sclose>:
 80072ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f2:	f000 b809 	b.w	8007308 <_close_r>

080072f6 <memset>:
 80072f6:	4402      	add	r2, r0
 80072f8:	4603      	mov	r3, r0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d100      	bne.n	8007300 <memset+0xa>
 80072fe:	4770      	bx	lr
 8007300:	f803 1b01 	strb.w	r1, [r3], #1
 8007304:	e7f9      	b.n	80072fa <memset+0x4>
	...

08007308 <_close_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d06      	ldr	r5, [pc, #24]	@ (8007324 <_close_r+0x1c>)
 800730c:	2300      	movs	r3, #0
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	602b      	str	r3, [r5, #0]
 8007314:	f7f9 fd13 	bl	8000d3e <_close>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_close_r+0x1a>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_close_r+0x1a>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	20001c98 	.word	0x20001c98

08007328 <_lseek_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d07      	ldr	r5, [pc, #28]	@ (8007348 <_lseek_r+0x20>)
 800732c:	4604      	mov	r4, r0
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	2200      	movs	r2, #0
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7f9 fd28 	bl	8000d8c <_lseek>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_lseek_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_lseek_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20001c98 	.word	0x20001c98

0800734c <_read_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	@ (800736c <_read_r+0x20>)
 8007350:	4604      	mov	r4, r0
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	2200      	movs	r2, #0
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7f9 fcd2 	bl	8000d04 <_read>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_read_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_read_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20001c98 	.word	0x20001c98

08007370 <_write_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d07      	ldr	r5, [pc, #28]	@ (8007390 <_write_r+0x20>)
 8007374:	4604      	mov	r4, r0
 8007376:	4608      	mov	r0, r1
 8007378:	4611      	mov	r1, r2
 800737a:	2200      	movs	r2, #0
 800737c:	602a      	str	r2, [r5, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	f7f9 f916 	bl	80005b0 <_write>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_write_r+0x1e>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_write_r+0x1e>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20001c98 	.word	0x20001c98

08007394 <__errno>:
 8007394:	4b01      	ldr	r3, [pc, #4]	@ (800739c <__errno+0x8>)
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	2000001c 	.word	0x2000001c

080073a0 <__libc_init_array>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	4d0d      	ldr	r5, [pc, #52]	@ (80073d8 <__libc_init_array+0x38>)
 80073a4:	4c0d      	ldr	r4, [pc, #52]	@ (80073dc <__libc_init_array+0x3c>)
 80073a6:	1b64      	subs	r4, r4, r5
 80073a8:	10a4      	asrs	r4, r4, #2
 80073aa:	2600      	movs	r6, #0
 80073ac:	42a6      	cmp	r6, r4
 80073ae:	d109      	bne.n	80073c4 <__libc_init_array+0x24>
 80073b0:	4d0b      	ldr	r5, [pc, #44]	@ (80073e0 <__libc_init_array+0x40>)
 80073b2:	4c0c      	ldr	r4, [pc, #48]	@ (80073e4 <__libc_init_array+0x44>)
 80073b4:	f000 fdc6 	bl	8007f44 <_init>
 80073b8:	1b64      	subs	r4, r4, r5
 80073ba:	10a4      	asrs	r4, r4, #2
 80073bc:	2600      	movs	r6, #0
 80073be:	42a6      	cmp	r6, r4
 80073c0:	d105      	bne.n	80073ce <__libc_init_array+0x2e>
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c8:	4798      	blx	r3
 80073ca:	3601      	adds	r6, #1
 80073cc:	e7ee      	b.n	80073ac <__libc_init_array+0xc>
 80073ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d2:	4798      	blx	r3
 80073d4:	3601      	adds	r6, #1
 80073d6:	e7f2      	b.n	80073be <__libc_init_array+0x1e>
 80073d8:	08008050 	.word	0x08008050
 80073dc:	08008050 	.word	0x08008050
 80073e0:	08008050 	.word	0x08008050
 80073e4:	08008054 	.word	0x08008054

080073e8 <__retarget_lock_init_recursive>:
 80073e8:	4770      	bx	lr

080073ea <__retarget_lock_acquire_recursive>:
 80073ea:	4770      	bx	lr

080073ec <__retarget_lock_release_recursive>:
 80073ec:	4770      	bx	lr

080073ee <memcpy>:
 80073ee:	440a      	add	r2, r1
 80073f0:	4291      	cmp	r1, r2
 80073f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80073f6:	d100      	bne.n	80073fa <memcpy+0xc>
 80073f8:	4770      	bx	lr
 80073fa:	b510      	push	{r4, lr}
 80073fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007404:	4291      	cmp	r1, r2
 8007406:	d1f9      	bne.n	80073fc <memcpy+0xe>
 8007408:	bd10      	pop	{r4, pc}
	...

0800740c <_free_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4605      	mov	r5, r0
 8007410:	2900      	cmp	r1, #0
 8007412:	d041      	beq.n	8007498 <_free_r+0x8c>
 8007414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007418:	1f0c      	subs	r4, r1, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfb8      	it	lt
 800741e:	18e4      	addlt	r4, r4, r3
 8007420:	f000 f8e0 	bl	80075e4 <__malloc_lock>
 8007424:	4a1d      	ldr	r2, [pc, #116]	@ (800749c <_free_r+0x90>)
 8007426:	6813      	ldr	r3, [r2, #0]
 8007428:	b933      	cbnz	r3, 8007438 <_free_r+0x2c>
 800742a:	6063      	str	r3, [r4, #4]
 800742c:	6014      	str	r4, [r2, #0]
 800742e:	4628      	mov	r0, r5
 8007430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007434:	f000 b8dc 	b.w	80075f0 <__malloc_unlock>
 8007438:	42a3      	cmp	r3, r4
 800743a:	d908      	bls.n	800744e <_free_r+0x42>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	1821      	adds	r1, r4, r0
 8007440:	428b      	cmp	r3, r1
 8007442:	bf01      	itttt	eq
 8007444:	6819      	ldreq	r1, [r3, #0]
 8007446:	685b      	ldreq	r3, [r3, #4]
 8007448:	1809      	addeq	r1, r1, r0
 800744a:	6021      	streq	r1, [r4, #0]
 800744c:	e7ed      	b.n	800742a <_free_r+0x1e>
 800744e:	461a      	mov	r2, r3
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	b10b      	cbz	r3, 8007458 <_free_r+0x4c>
 8007454:	42a3      	cmp	r3, r4
 8007456:	d9fa      	bls.n	800744e <_free_r+0x42>
 8007458:	6811      	ldr	r1, [r2, #0]
 800745a:	1850      	adds	r0, r2, r1
 800745c:	42a0      	cmp	r0, r4
 800745e:	d10b      	bne.n	8007478 <_free_r+0x6c>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	4401      	add	r1, r0
 8007464:	1850      	adds	r0, r2, r1
 8007466:	4283      	cmp	r3, r0
 8007468:	6011      	str	r1, [r2, #0]
 800746a:	d1e0      	bne.n	800742e <_free_r+0x22>
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	6053      	str	r3, [r2, #4]
 8007472:	4408      	add	r0, r1
 8007474:	6010      	str	r0, [r2, #0]
 8007476:	e7da      	b.n	800742e <_free_r+0x22>
 8007478:	d902      	bls.n	8007480 <_free_r+0x74>
 800747a:	230c      	movs	r3, #12
 800747c:	602b      	str	r3, [r5, #0]
 800747e:	e7d6      	b.n	800742e <_free_r+0x22>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	1821      	adds	r1, r4, r0
 8007484:	428b      	cmp	r3, r1
 8007486:	bf04      	itt	eq
 8007488:	6819      	ldreq	r1, [r3, #0]
 800748a:	685b      	ldreq	r3, [r3, #4]
 800748c:	6063      	str	r3, [r4, #4]
 800748e:	bf04      	itt	eq
 8007490:	1809      	addeq	r1, r1, r0
 8007492:	6021      	streq	r1, [r4, #0]
 8007494:	6054      	str	r4, [r2, #4]
 8007496:	e7ca      	b.n	800742e <_free_r+0x22>
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	20001ca4 	.word	0x20001ca4

080074a0 <sbrk_aligned>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0f      	ldr	r6, [pc, #60]	@ (80074e0 <sbrk_aligned+0x40>)
 80074a4:	460c      	mov	r4, r1
 80074a6:	6831      	ldr	r1, [r6, #0]
 80074a8:	4605      	mov	r5, r0
 80074aa:	b911      	cbnz	r1, 80074b2 <sbrk_aligned+0x12>
 80074ac:	f000 fcb6 	bl	8007e1c <_sbrk_r>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 fcb1 	bl	8007e1c <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d103      	bne.n	80074c6 <sbrk_aligned+0x26>
 80074be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074c2:	4620      	mov	r0, r4
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	1cc4      	adds	r4, r0, #3
 80074c8:	f024 0403 	bic.w	r4, r4, #3
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d0f8      	beq.n	80074c2 <sbrk_aligned+0x22>
 80074d0:	1a21      	subs	r1, r4, r0
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 fca2 	bl	8007e1c <_sbrk_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d1f2      	bne.n	80074c2 <sbrk_aligned+0x22>
 80074dc:	e7ef      	b.n	80074be <sbrk_aligned+0x1e>
 80074de:	bf00      	nop
 80074e0:	20001ca0 	.word	0x20001ca0

080074e4 <_malloc_r>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	1ccd      	adds	r5, r1, #3
 80074ea:	f025 0503 	bic.w	r5, r5, #3
 80074ee:	3508      	adds	r5, #8
 80074f0:	2d0c      	cmp	r5, #12
 80074f2:	bf38      	it	cc
 80074f4:	250c      	movcc	r5, #12
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	4606      	mov	r6, r0
 80074fa:	db01      	blt.n	8007500 <_malloc_r+0x1c>
 80074fc:	42a9      	cmp	r1, r5
 80074fe:	d904      	bls.n	800750a <_malloc_r+0x26>
 8007500:	230c      	movs	r3, #12
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	2000      	movs	r0, #0
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075e0 <_malloc_r+0xfc>
 800750e:	f000 f869 	bl	80075e4 <__malloc_lock>
 8007512:	f8d8 3000 	ldr.w	r3, [r8]
 8007516:	461c      	mov	r4, r3
 8007518:	bb44      	cbnz	r4, 800756c <_malloc_r+0x88>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffbf 	bl	80074a0 <sbrk_aligned>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	4604      	mov	r4, r0
 8007526:	d158      	bne.n	80075da <_malloc_r+0xf6>
 8007528:	f8d8 4000 	ldr.w	r4, [r8]
 800752c:	4627      	mov	r7, r4
 800752e:	2f00      	cmp	r7, #0
 8007530:	d143      	bne.n	80075ba <_malloc_r+0xd6>
 8007532:	2c00      	cmp	r4, #0
 8007534:	d04b      	beq.n	80075ce <_malloc_r+0xea>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	4639      	mov	r1, r7
 800753a:	4630      	mov	r0, r6
 800753c:	eb04 0903 	add.w	r9, r4, r3
 8007540:	f000 fc6c 	bl	8007e1c <_sbrk_r>
 8007544:	4581      	cmp	r9, r0
 8007546:	d142      	bne.n	80075ce <_malloc_r+0xea>
 8007548:	6821      	ldr	r1, [r4, #0]
 800754a:	1a6d      	subs	r5, r5, r1
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffa6 	bl	80074a0 <sbrk_aligned>
 8007554:	3001      	adds	r0, #1
 8007556:	d03a      	beq.n	80075ce <_malloc_r+0xea>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	442b      	add	r3, r5
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	f8d8 3000 	ldr.w	r3, [r8]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	bb62      	cbnz	r2, 80075c0 <_malloc_r+0xdc>
 8007566:	f8c8 7000 	str.w	r7, [r8]
 800756a:	e00f      	b.n	800758c <_malloc_r+0xa8>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	d420      	bmi.n	80075b4 <_malloc_r+0xd0>
 8007572:	2a0b      	cmp	r2, #11
 8007574:	d917      	bls.n	80075a6 <_malloc_r+0xc2>
 8007576:	1961      	adds	r1, r4, r5
 8007578:	42a3      	cmp	r3, r4
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	6059      	strne	r1, [r3, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	bf08      	it	eq
 8007584:	f8c8 1000 	streq.w	r1, [r8]
 8007588:	5162      	str	r2, [r4, r5]
 800758a:	604b      	str	r3, [r1, #4]
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f82f 	bl	80075f0 <__malloc_unlock>
 8007592:	f104 000b 	add.w	r0, r4, #11
 8007596:	1d23      	adds	r3, r4, #4
 8007598:	f020 0007 	bic.w	r0, r0, #7
 800759c:	1ac2      	subs	r2, r0, r3
 800759e:	bf1c      	itt	ne
 80075a0:	1a1b      	subne	r3, r3, r0
 80075a2:	50a3      	strne	r3, [r4, r2]
 80075a4:	e7af      	b.n	8007506 <_malloc_r+0x22>
 80075a6:	6862      	ldr	r2, [r4, #4]
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	bf0c      	ite	eq
 80075ac:	f8c8 2000 	streq.w	r2, [r8]
 80075b0:	605a      	strne	r2, [r3, #4]
 80075b2:	e7eb      	b.n	800758c <_malloc_r+0xa8>
 80075b4:	4623      	mov	r3, r4
 80075b6:	6864      	ldr	r4, [r4, #4]
 80075b8:	e7ae      	b.n	8007518 <_malloc_r+0x34>
 80075ba:	463c      	mov	r4, r7
 80075bc:	687f      	ldr	r7, [r7, #4]
 80075be:	e7b6      	b.n	800752e <_malloc_r+0x4a>
 80075c0:	461a      	mov	r2, r3
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d1fb      	bne.n	80075c0 <_malloc_r+0xdc>
 80075c8:	2300      	movs	r3, #0
 80075ca:	6053      	str	r3, [r2, #4]
 80075cc:	e7de      	b.n	800758c <_malloc_r+0xa8>
 80075ce:	230c      	movs	r3, #12
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	f000 f80c 	bl	80075f0 <__malloc_unlock>
 80075d8:	e794      	b.n	8007504 <_malloc_r+0x20>
 80075da:	6005      	str	r5, [r0, #0]
 80075dc:	e7d6      	b.n	800758c <_malloc_r+0xa8>
 80075de:	bf00      	nop
 80075e0:	20001ca4 	.word	0x20001ca4

080075e4 <__malloc_lock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__malloc_lock+0x8>)
 80075e6:	f7ff bf00 	b.w	80073ea <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20001c9c 	.word	0x20001c9c

080075f0 <__malloc_unlock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__malloc_unlock+0x8>)
 80075f2:	f7ff befb 	b.w	80073ec <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20001c9c 	.word	0x20001c9c

080075fc <__sfputc_r>:
 80075fc:	6893      	ldr	r3, [r2, #8]
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	b410      	push	{r4}
 8007604:	6093      	str	r3, [r2, #8]
 8007606:	da08      	bge.n	800761a <__sfputc_r+0x1e>
 8007608:	6994      	ldr	r4, [r2, #24]
 800760a:	42a3      	cmp	r3, r4
 800760c:	db01      	blt.n	8007612 <__sfputc_r+0x16>
 800760e:	290a      	cmp	r1, #10
 8007610:	d103      	bne.n	800761a <__sfputc_r+0x1e>
 8007612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007616:	f000 bb6d 	b.w	8007cf4 <__swbuf_r>
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	1c58      	adds	r0, r3, #1
 800761e:	6010      	str	r0, [r2, #0]
 8007620:	7019      	strb	r1, [r3, #0]
 8007622:	4608      	mov	r0, r1
 8007624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007628:	4770      	bx	lr

0800762a <__sfputs_r>:
 800762a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762c:	4606      	mov	r6, r0
 800762e:	460f      	mov	r7, r1
 8007630:	4614      	mov	r4, r2
 8007632:	18d5      	adds	r5, r2, r3
 8007634:	42ac      	cmp	r4, r5
 8007636:	d101      	bne.n	800763c <__sfputs_r+0x12>
 8007638:	2000      	movs	r0, #0
 800763a:	e007      	b.n	800764c <__sfputs_r+0x22>
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	463a      	mov	r2, r7
 8007642:	4630      	mov	r0, r6
 8007644:	f7ff ffda 	bl	80075fc <__sfputc_r>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d1f3      	bne.n	8007634 <__sfputs_r+0xa>
 800764c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007650 <_vfiprintf_r>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	460d      	mov	r5, r1
 8007656:	b09d      	sub	sp, #116	@ 0x74
 8007658:	4614      	mov	r4, r2
 800765a:	4698      	mov	r8, r3
 800765c:	4606      	mov	r6, r0
 800765e:	b118      	cbz	r0, 8007668 <_vfiprintf_r+0x18>
 8007660:	6a03      	ldr	r3, [r0, #32]
 8007662:	b90b      	cbnz	r3, 8007668 <_vfiprintf_r+0x18>
 8007664:	f7ff fdbc 	bl	80071e0 <__sinit>
 8007668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	d405      	bmi.n	800767a <_vfiprintf_r+0x2a>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	059a      	lsls	r2, r3, #22
 8007672:	d402      	bmi.n	800767a <_vfiprintf_r+0x2a>
 8007674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007676:	f7ff feb8 	bl	80073ea <__retarget_lock_acquire_recursive>
 800767a:	89ab      	ldrh	r3, [r5, #12]
 800767c:	071b      	lsls	r3, r3, #28
 800767e:	d501      	bpl.n	8007684 <_vfiprintf_r+0x34>
 8007680:	692b      	ldr	r3, [r5, #16]
 8007682:	b99b      	cbnz	r3, 80076ac <_vfiprintf_r+0x5c>
 8007684:	4629      	mov	r1, r5
 8007686:	4630      	mov	r0, r6
 8007688:	f000 fb72 	bl	8007d70 <__swsetup_r>
 800768c:	b170      	cbz	r0, 80076ac <_vfiprintf_r+0x5c>
 800768e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007690:	07dc      	lsls	r4, r3, #31
 8007692:	d504      	bpl.n	800769e <_vfiprintf_r+0x4e>
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007698:	b01d      	add	sp, #116	@ 0x74
 800769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	89ab      	ldrh	r3, [r5, #12]
 80076a0:	0598      	lsls	r0, r3, #22
 80076a2:	d4f7      	bmi.n	8007694 <_vfiprintf_r+0x44>
 80076a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076a6:	f7ff fea1 	bl	80073ec <__retarget_lock_release_recursive>
 80076aa:	e7f3      	b.n	8007694 <_vfiprintf_r+0x44>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80076b0:	2320      	movs	r3, #32
 80076b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ba:	2330      	movs	r3, #48	@ 0x30
 80076bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800786c <_vfiprintf_r+0x21c>
 80076c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076c4:	f04f 0901 	mov.w	r9, #1
 80076c8:	4623      	mov	r3, r4
 80076ca:	469a      	mov	sl, r3
 80076cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d0:	b10a      	cbz	r2, 80076d6 <_vfiprintf_r+0x86>
 80076d2:	2a25      	cmp	r2, #37	@ 0x25
 80076d4:	d1f9      	bne.n	80076ca <_vfiprintf_r+0x7a>
 80076d6:	ebba 0b04 	subs.w	fp, sl, r4
 80076da:	d00b      	beq.n	80076f4 <_vfiprintf_r+0xa4>
 80076dc:	465b      	mov	r3, fp
 80076de:	4622      	mov	r2, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ffa1 	bl	800762a <__sfputs_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	f000 80a7 	beq.w	800783c <_vfiprintf_r+0x1ec>
 80076ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f0:	445a      	add	r2, fp
 80076f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f4:	f89a 3000 	ldrb.w	r3, [sl]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 809f 	beq.w	800783c <_vfiprintf_r+0x1ec>
 80076fe:	2300      	movs	r3, #0
 8007700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007708:	f10a 0a01 	add.w	sl, sl, #1
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007714:	931a      	str	r3, [sp, #104]	@ 0x68
 8007716:	4654      	mov	r4, sl
 8007718:	2205      	movs	r2, #5
 800771a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771e:	4853      	ldr	r0, [pc, #332]	@ (800786c <_vfiprintf_r+0x21c>)
 8007720:	f7f8 fd7e 	bl	8000220 <memchr>
 8007724:	9a04      	ldr	r2, [sp, #16]
 8007726:	b9d8      	cbnz	r0, 8007760 <_vfiprintf_r+0x110>
 8007728:	06d1      	lsls	r1, r2, #27
 800772a:	bf44      	itt	mi
 800772c:	2320      	movmi	r3, #32
 800772e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007732:	0713      	lsls	r3, r2, #28
 8007734:	bf44      	itt	mi
 8007736:	232b      	movmi	r3, #43	@ 0x2b
 8007738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800773c:	f89a 3000 	ldrb.w	r3, [sl]
 8007740:	2b2a      	cmp	r3, #42	@ 0x2a
 8007742:	d015      	beq.n	8007770 <_vfiprintf_r+0x120>
 8007744:	9a07      	ldr	r2, [sp, #28]
 8007746:	4654      	mov	r4, sl
 8007748:	2000      	movs	r0, #0
 800774a:	f04f 0c0a 	mov.w	ip, #10
 800774e:	4621      	mov	r1, r4
 8007750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007754:	3b30      	subs	r3, #48	@ 0x30
 8007756:	2b09      	cmp	r3, #9
 8007758:	d94b      	bls.n	80077f2 <_vfiprintf_r+0x1a2>
 800775a:	b1b0      	cbz	r0, 800778a <_vfiprintf_r+0x13a>
 800775c:	9207      	str	r2, [sp, #28]
 800775e:	e014      	b.n	800778a <_vfiprintf_r+0x13a>
 8007760:	eba0 0308 	sub.w	r3, r0, r8
 8007764:	fa09 f303 	lsl.w	r3, r9, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	46a2      	mov	sl, r4
 800776e:	e7d2      	b.n	8007716 <_vfiprintf_r+0xc6>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	1d19      	adds	r1, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	9103      	str	r1, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfbb      	ittet	lt
 800777c:	425b      	neglt	r3, r3
 800777e:	f042 0202 	orrlt.w	r2, r2, #2
 8007782:	9307      	strge	r3, [sp, #28]
 8007784:	9307      	strlt	r3, [sp, #28]
 8007786:	bfb8      	it	lt
 8007788:	9204      	strlt	r2, [sp, #16]
 800778a:	7823      	ldrb	r3, [r4, #0]
 800778c:	2b2e      	cmp	r3, #46	@ 0x2e
 800778e:	d10a      	bne.n	80077a6 <_vfiprintf_r+0x156>
 8007790:	7863      	ldrb	r3, [r4, #1]
 8007792:	2b2a      	cmp	r3, #42	@ 0x2a
 8007794:	d132      	bne.n	80077fc <_vfiprintf_r+0x1ac>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	9203      	str	r2, [sp, #12]
 800779e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077a2:	3402      	adds	r4, #2
 80077a4:	9305      	str	r3, [sp, #20]
 80077a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800787c <_vfiprintf_r+0x22c>
 80077aa:	7821      	ldrb	r1, [r4, #0]
 80077ac:	2203      	movs	r2, #3
 80077ae:	4650      	mov	r0, sl
 80077b0:	f7f8 fd36 	bl	8000220 <memchr>
 80077b4:	b138      	cbz	r0, 80077c6 <_vfiprintf_r+0x176>
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	eba0 000a 	sub.w	r0, r0, sl
 80077bc:	2240      	movs	r2, #64	@ 0x40
 80077be:	4082      	lsls	r2, r0
 80077c0:	4313      	orrs	r3, r2
 80077c2:	3401      	adds	r4, #1
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ca:	4829      	ldr	r0, [pc, #164]	@ (8007870 <_vfiprintf_r+0x220>)
 80077cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077d0:	2206      	movs	r2, #6
 80077d2:	f7f8 fd25 	bl	8000220 <memchr>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d03f      	beq.n	800785a <_vfiprintf_r+0x20a>
 80077da:	4b26      	ldr	r3, [pc, #152]	@ (8007874 <_vfiprintf_r+0x224>)
 80077dc:	bb1b      	cbnz	r3, 8007826 <_vfiprintf_r+0x1d6>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	3307      	adds	r3, #7
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	3308      	adds	r3, #8
 80077e8:	9303      	str	r3, [sp, #12]
 80077ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ec:	443b      	add	r3, r7
 80077ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f0:	e76a      	b.n	80076c8 <_vfiprintf_r+0x78>
 80077f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f6:	460c      	mov	r4, r1
 80077f8:	2001      	movs	r0, #1
 80077fa:	e7a8      	b.n	800774e <_vfiprintf_r+0xfe>
 80077fc:	2300      	movs	r3, #0
 80077fe:	3401      	adds	r4, #1
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	4620      	mov	r0, r4
 800780a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780e:	3a30      	subs	r2, #48	@ 0x30
 8007810:	2a09      	cmp	r2, #9
 8007812:	d903      	bls.n	800781c <_vfiprintf_r+0x1cc>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0c6      	beq.n	80077a6 <_vfiprintf_r+0x156>
 8007818:	9105      	str	r1, [sp, #20]
 800781a:	e7c4      	b.n	80077a6 <_vfiprintf_r+0x156>
 800781c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007820:	4604      	mov	r4, r0
 8007822:	2301      	movs	r3, #1
 8007824:	e7f0      	b.n	8007808 <_vfiprintf_r+0x1b8>
 8007826:	ab03      	add	r3, sp, #12
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	462a      	mov	r2, r5
 800782c:	4b12      	ldr	r3, [pc, #72]	@ (8007878 <_vfiprintf_r+0x228>)
 800782e:	a904      	add	r1, sp, #16
 8007830:	4630      	mov	r0, r6
 8007832:	f3af 8000 	nop.w
 8007836:	4607      	mov	r7, r0
 8007838:	1c78      	adds	r0, r7, #1
 800783a:	d1d6      	bne.n	80077ea <_vfiprintf_r+0x19a>
 800783c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800783e:	07d9      	lsls	r1, r3, #31
 8007840:	d405      	bmi.n	800784e <_vfiprintf_r+0x1fe>
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	059a      	lsls	r2, r3, #22
 8007846:	d402      	bmi.n	800784e <_vfiprintf_r+0x1fe>
 8007848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784a:	f7ff fdcf 	bl	80073ec <__retarget_lock_release_recursive>
 800784e:	89ab      	ldrh	r3, [r5, #12]
 8007850:	065b      	lsls	r3, r3, #25
 8007852:	f53f af1f 	bmi.w	8007694 <_vfiprintf_r+0x44>
 8007856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007858:	e71e      	b.n	8007698 <_vfiprintf_r+0x48>
 800785a:	ab03      	add	r3, sp, #12
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	462a      	mov	r2, r5
 8007860:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <_vfiprintf_r+0x228>)
 8007862:	a904      	add	r1, sp, #16
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f879 	bl	800795c <_printf_i>
 800786a:	e7e4      	b.n	8007836 <_vfiprintf_r+0x1e6>
 800786c:	08008014 	.word	0x08008014
 8007870:	0800801e 	.word	0x0800801e
 8007874:	00000000 	.word	0x00000000
 8007878:	0800762b 	.word	0x0800762b
 800787c:	0800801a 	.word	0x0800801a

08007880 <_printf_common>:
 8007880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	4616      	mov	r6, r2
 8007886:	4698      	mov	r8, r3
 8007888:	688a      	ldr	r2, [r1, #8]
 800788a:	690b      	ldr	r3, [r1, #16]
 800788c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007890:	4293      	cmp	r3, r2
 8007892:	bfb8      	it	lt
 8007894:	4613      	movlt	r3, r2
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800789c:	4607      	mov	r7, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	b10a      	cbz	r2, 80078a6 <_printf_common+0x26>
 80078a2:	3301      	adds	r3, #1
 80078a4:	6033      	str	r3, [r6, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	0699      	lsls	r1, r3, #26
 80078aa:	bf42      	ittt	mi
 80078ac:	6833      	ldrmi	r3, [r6, #0]
 80078ae:	3302      	addmi	r3, #2
 80078b0:	6033      	strmi	r3, [r6, #0]
 80078b2:	6825      	ldr	r5, [r4, #0]
 80078b4:	f015 0506 	ands.w	r5, r5, #6
 80078b8:	d106      	bne.n	80078c8 <_printf_common+0x48>
 80078ba:	f104 0a19 	add.w	sl, r4, #25
 80078be:	68e3      	ldr	r3, [r4, #12]
 80078c0:	6832      	ldr	r2, [r6, #0]
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	42ab      	cmp	r3, r5
 80078c6:	dc26      	bgt.n	8007916 <_printf_common+0x96>
 80078c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	3b00      	subs	r3, #0
 80078d0:	bf18      	it	ne
 80078d2:	2301      	movne	r3, #1
 80078d4:	0692      	lsls	r2, r2, #26
 80078d6:	d42b      	bmi.n	8007930 <_printf_common+0xb0>
 80078d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078dc:	4641      	mov	r1, r8
 80078de:	4638      	mov	r0, r7
 80078e0:	47c8      	blx	r9
 80078e2:	3001      	adds	r0, #1
 80078e4:	d01e      	beq.n	8007924 <_printf_common+0xa4>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	f003 0306 	and.w	r3, r3, #6
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	bf02      	ittt	eq
 80078f2:	68e5      	ldreq	r5, [r4, #12]
 80078f4:	6833      	ldreq	r3, [r6, #0]
 80078f6:	1aed      	subeq	r5, r5, r3
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	bf0c      	ite	eq
 80078fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007900:	2500      	movne	r5, #0
 8007902:	4293      	cmp	r3, r2
 8007904:	bfc4      	itt	gt
 8007906:	1a9b      	subgt	r3, r3, r2
 8007908:	18ed      	addgt	r5, r5, r3
 800790a:	2600      	movs	r6, #0
 800790c:	341a      	adds	r4, #26
 800790e:	42b5      	cmp	r5, r6
 8007910:	d11a      	bne.n	8007948 <_printf_common+0xc8>
 8007912:	2000      	movs	r0, #0
 8007914:	e008      	b.n	8007928 <_printf_common+0xa8>
 8007916:	2301      	movs	r3, #1
 8007918:	4652      	mov	r2, sl
 800791a:	4641      	mov	r1, r8
 800791c:	4638      	mov	r0, r7
 800791e:	47c8      	blx	r9
 8007920:	3001      	adds	r0, #1
 8007922:	d103      	bne.n	800792c <_printf_common+0xac>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	3501      	adds	r5, #1
 800792e:	e7c6      	b.n	80078be <_printf_common+0x3e>
 8007930:	18e1      	adds	r1, r4, r3
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	2030      	movs	r0, #48	@ 0x30
 8007936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800793a:	4422      	add	r2, r4
 800793c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007944:	3302      	adds	r3, #2
 8007946:	e7c7      	b.n	80078d8 <_printf_common+0x58>
 8007948:	2301      	movs	r3, #1
 800794a:	4622      	mov	r2, r4
 800794c:	4641      	mov	r1, r8
 800794e:	4638      	mov	r0, r7
 8007950:	47c8      	blx	r9
 8007952:	3001      	adds	r0, #1
 8007954:	d0e6      	beq.n	8007924 <_printf_common+0xa4>
 8007956:	3601      	adds	r6, #1
 8007958:	e7d9      	b.n	800790e <_printf_common+0x8e>
	...

0800795c <_printf_i>:
 800795c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	7e0f      	ldrb	r7, [r1, #24]
 8007962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007964:	2f78      	cmp	r7, #120	@ 0x78
 8007966:	4691      	mov	r9, r2
 8007968:	4680      	mov	r8, r0
 800796a:	460c      	mov	r4, r1
 800796c:	469a      	mov	sl, r3
 800796e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007972:	d807      	bhi.n	8007984 <_printf_i+0x28>
 8007974:	2f62      	cmp	r7, #98	@ 0x62
 8007976:	d80a      	bhi.n	800798e <_printf_i+0x32>
 8007978:	2f00      	cmp	r7, #0
 800797a:	f000 80d2 	beq.w	8007b22 <_printf_i+0x1c6>
 800797e:	2f58      	cmp	r7, #88	@ 0x58
 8007980:	f000 80b9 	beq.w	8007af6 <_printf_i+0x19a>
 8007984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800798c:	e03a      	b.n	8007a04 <_printf_i+0xa8>
 800798e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007992:	2b15      	cmp	r3, #21
 8007994:	d8f6      	bhi.n	8007984 <_printf_i+0x28>
 8007996:	a101      	add	r1, pc, #4	@ (adr r1, 800799c <_printf_i+0x40>)
 8007998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007985 	.word	0x08007985
 80079a8:	08007985 	.word	0x08007985
 80079ac:	08007985 	.word	0x08007985
 80079b0:	08007985 	.word	0x08007985
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007985 	.word	0x08007985
 80079bc:	08007985 	.word	0x08007985
 80079c0:	08007985 	.word	0x08007985
 80079c4:	08007985 	.word	0x08007985
 80079c8:	08007b09 	.word	0x08007b09
 80079cc:	08007a33 	.word	0x08007a33
 80079d0:	08007ac3 	.word	0x08007ac3
 80079d4:	08007985 	.word	0x08007985
 80079d8:	08007985 	.word	0x08007985
 80079dc:	08007b2b 	.word	0x08007b2b
 80079e0:	08007985 	.word	0x08007985
 80079e4:	08007a33 	.word	0x08007a33
 80079e8:	08007985 	.word	0x08007985
 80079ec:	08007985 	.word	0x08007985
 80079f0:	08007acb 	.word	0x08007acb
 80079f4:	6833      	ldr	r3, [r6, #0]
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6032      	str	r2, [r6, #0]
 80079fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a04:	2301      	movs	r3, #1
 8007a06:	e09d      	b.n	8007b44 <_printf_i+0x1e8>
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	1d19      	adds	r1, r3, #4
 8007a0e:	6031      	str	r1, [r6, #0]
 8007a10:	0606      	lsls	r6, r0, #24
 8007a12:	d501      	bpl.n	8007a18 <_printf_i+0xbc>
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	e003      	b.n	8007a20 <_printf_i+0xc4>
 8007a18:	0645      	lsls	r5, r0, #25
 8007a1a:	d5fb      	bpl.n	8007a14 <_printf_i+0xb8>
 8007a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	da03      	bge.n	8007a2c <_printf_i+0xd0>
 8007a24:	232d      	movs	r3, #45	@ 0x2d
 8007a26:	426d      	negs	r5, r5
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a2c:	4859      	ldr	r0, [pc, #356]	@ (8007b94 <_printf_i+0x238>)
 8007a2e:	230a      	movs	r3, #10
 8007a30:	e011      	b.n	8007a56 <_printf_i+0xfa>
 8007a32:	6821      	ldr	r1, [r4, #0]
 8007a34:	6833      	ldr	r3, [r6, #0]
 8007a36:	0608      	lsls	r0, r1, #24
 8007a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a3c:	d402      	bmi.n	8007a44 <_printf_i+0xe8>
 8007a3e:	0649      	lsls	r1, r1, #25
 8007a40:	bf48      	it	mi
 8007a42:	b2ad      	uxthmi	r5, r5
 8007a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a46:	4853      	ldr	r0, [pc, #332]	@ (8007b94 <_printf_i+0x238>)
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	bf14      	ite	ne
 8007a4c:	230a      	movne	r3, #10
 8007a4e:	2308      	moveq	r3, #8
 8007a50:	2100      	movs	r1, #0
 8007a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a56:	6866      	ldr	r6, [r4, #4]
 8007a58:	60a6      	str	r6, [r4, #8]
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	bfa2      	ittt	ge
 8007a5e:	6821      	ldrge	r1, [r4, #0]
 8007a60:	f021 0104 	bicge.w	r1, r1, #4
 8007a64:	6021      	strge	r1, [r4, #0]
 8007a66:	b90d      	cbnz	r5, 8007a6c <_printf_i+0x110>
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	d04b      	beq.n	8007b04 <_printf_i+0x1a8>
 8007a6c:	4616      	mov	r6, r2
 8007a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a72:	fb03 5711 	mls	r7, r3, r1, r5
 8007a76:	5dc7      	ldrb	r7, [r0, r7]
 8007a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a7c:	462f      	mov	r7, r5
 8007a7e:	42bb      	cmp	r3, r7
 8007a80:	460d      	mov	r5, r1
 8007a82:	d9f4      	bls.n	8007a6e <_printf_i+0x112>
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d10b      	bne.n	8007aa0 <_printf_i+0x144>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	07df      	lsls	r7, r3, #31
 8007a8c:	d508      	bpl.n	8007aa0 <_printf_i+0x144>
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	6861      	ldr	r1, [r4, #4]
 8007a92:	4299      	cmp	r1, r3
 8007a94:	bfde      	ittt	le
 8007a96:	2330      	movle	r3, #48	@ 0x30
 8007a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a9c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007aa0:	1b92      	subs	r2, r2, r6
 8007aa2:	6122      	str	r2, [r4, #16]
 8007aa4:	f8cd a000 	str.w	sl, [sp]
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	aa03      	add	r2, sp, #12
 8007aac:	4621      	mov	r1, r4
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f7ff fee6 	bl	8007880 <_printf_common>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d14a      	bne.n	8007b4e <_printf_i+0x1f2>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007abc:	b004      	add	sp, #16
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	f043 0320 	orr.w	r3, r3, #32
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	4833      	ldr	r0, [pc, #204]	@ (8007b98 <_printf_i+0x23c>)
 8007acc:	2778      	movs	r7, #120	@ 0x78
 8007ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	6831      	ldr	r1, [r6, #0]
 8007ad6:	061f      	lsls	r7, r3, #24
 8007ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007adc:	d402      	bmi.n	8007ae4 <_printf_i+0x188>
 8007ade:	065f      	lsls	r7, r3, #25
 8007ae0:	bf48      	it	mi
 8007ae2:	b2ad      	uxthmi	r5, r5
 8007ae4:	6031      	str	r1, [r6, #0]
 8007ae6:	07d9      	lsls	r1, r3, #31
 8007ae8:	bf44      	itt	mi
 8007aea:	f043 0320 	orrmi.w	r3, r3, #32
 8007aee:	6023      	strmi	r3, [r4, #0]
 8007af0:	b11d      	cbz	r5, 8007afa <_printf_i+0x19e>
 8007af2:	2310      	movs	r3, #16
 8007af4:	e7ac      	b.n	8007a50 <_printf_i+0xf4>
 8007af6:	4827      	ldr	r0, [pc, #156]	@ (8007b94 <_printf_i+0x238>)
 8007af8:	e7e9      	b.n	8007ace <_printf_i+0x172>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	f023 0320 	bic.w	r3, r3, #32
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	e7f6      	b.n	8007af2 <_printf_i+0x196>
 8007b04:	4616      	mov	r6, r2
 8007b06:	e7bd      	b.n	8007a84 <_printf_i+0x128>
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	6825      	ldr	r5, [r4, #0]
 8007b0c:	6961      	ldr	r1, [r4, #20]
 8007b0e:	1d18      	adds	r0, r3, #4
 8007b10:	6030      	str	r0, [r6, #0]
 8007b12:	062e      	lsls	r6, r5, #24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0x1c0>
 8007b18:	6019      	str	r1, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0x1c6>
 8007b1c:	0668      	lsls	r0, r5, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0x1bc>
 8007b20:	8019      	strh	r1, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	4616      	mov	r6, r2
 8007b28:	e7bc      	b.n	8007aa4 <_printf_i+0x148>
 8007b2a:	6833      	ldr	r3, [r6, #0]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	6032      	str	r2, [r6, #0]
 8007b30:	681e      	ldr	r6, [r3, #0]
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	2100      	movs	r1, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7f8 fb72 	bl	8000220 <memchr>
 8007b3c:	b108      	cbz	r0, 8007b42 <_printf_i+0x1e6>
 8007b3e:	1b80      	subs	r0, r0, r6
 8007b40:	6060      	str	r0, [r4, #4]
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	2300      	movs	r3, #0
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b4c:	e7aa      	b.n	8007aa4 <_printf_i+0x148>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	4632      	mov	r2, r6
 8007b52:	4649      	mov	r1, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	47d0      	blx	sl
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d0ad      	beq.n	8007ab8 <_printf_i+0x15c>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	d413      	bmi.n	8007b8a <_printf_i+0x22e>
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	4298      	cmp	r0, r3
 8007b68:	bfb8      	it	lt
 8007b6a:	4618      	movlt	r0, r3
 8007b6c:	e7a6      	b.n	8007abc <_printf_i+0x160>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d09d      	beq.n	8007ab8 <_printf_i+0x15c>
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	68e3      	ldr	r3, [r4, #12]
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	1a5b      	subs	r3, r3, r1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	dcf2      	bgt.n	8007b6e <_printf_i+0x212>
 8007b88:	e7eb      	b.n	8007b62 <_printf_i+0x206>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	f104 0619 	add.w	r6, r4, #25
 8007b90:	e7f5      	b.n	8007b7e <_printf_i+0x222>
 8007b92:	bf00      	nop
 8007b94:	08008025 	.word	0x08008025
 8007b98:	08008036 	.word	0x08008036

08007b9c <__sflush_r>:
 8007b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	0716      	lsls	r6, r2, #28
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	d454      	bmi.n	8007c56 <__sflush_r+0xba>
 8007bac:	684b      	ldr	r3, [r1, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dc02      	bgt.n	8007bb8 <__sflush_r+0x1c>
 8007bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dd48      	ble.n	8007c4a <__sflush_r+0xae>
 8007bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d045      	beq.n	8007c4a <__sflush_r+0xae>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bc4:	682f      	ldr	r7, [r5, #0]
 8007bc6:	6a21      	ldr	r1, [r4, #32]
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	d030      	beq.n	8007c2e <__sflush_r+0x92>
 8007bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0759      	lsls	r1, r3, #29
 8007bd2:	d505      	bpl.n	8007be0 <__sflush_r+0x44>
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bda:	b10b      	cbz	r3, 8007be0 <__sflush_r+0x44>
 8007bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be4:	6a21      	ldr	r1, [r4, #32]
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b0      	blx	r6
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	d106      	bne.n	8007bfe <__sflush_r+0x62>
 8007bf0:	6829      	ldr	r1, [r5, #0]
 8007bf2:	291d      	cmp	r1, #29
 8007bf4:	d82b      	bhi.n	8007c4e <__sflush_r+0xb2>
 8007bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca0 <__sflush_r+0x104>)
 8007bf8:	410a      	asrs	r2, r1
 8007bfa:	07d6      	lsls	r6, r2, #31
 8007bfc:	d427      	bmi.n	8007c4e <__sflush_r+0xb2>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	6062      	str	r2, [r4, #4]
 8007c02:	04d9      	lsls	r1, r3, #19
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	d504      	bpl.n	8007c14 <__sflush_r+0x78>
 8007c0a:	1c42      	adds	r2, r0, #1
 8007c0c:	d101      	bne.n	8007c12 <__sflush_r+0x76>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b903      	cbnz	r3, 8007c14 <__sflush_r+0x78>
 8007c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c16:	602f      	str	r7, [r5, #0]
 8007c18:	b1b9      	cbz	r1, 8007c4a <__sflush_r+0xae>
 8007c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	d002      	beq.n	8007c28 <__sflush_r+0x8c>
 8007c22:	4628      	mov	r0, r5
 8007c24:	f7ff fbf2 	bl	800740c <_free_r>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c2c:	e00d      	b.n	8007c4a <__sflush_r+0xae>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b0      	blx	r6
 8007c34:	4602      	mov	r2, r0
 8007c36:	1c50      	adds	r0, r2, #1
 8007c38:	d1c9      	bne.n	8007bce <__sflush_r+0x32>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0c6      	beq.n	8007bce <__sflush_r+0x32>
 8007c40:	2b1d      	cmp	r3, #29
 8007c42:	d001      	beq.n	8007c48 <__sflush_r+0xac>
 8007c44:	2b16      	cmp	r3, #22
 8007c46:	d11e      	bne.n	8007c86 <__sflush_r+0xea>
 8007c48:	602f      	str	r7, [r5, #0]
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e022      	b.n	8007c94 <__sflush_r+0xf8>
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c52:	b21b      	sxth	r3, r3
 8007c54:	e01b      	b.n	8007c8e <__sflush_r+0xf2>
 8007c56:	690f      	ldr	r7, [r1, #16]
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	d0f6      	beq.n	8007c4a <__sflush_r+0xae>
 8007c5c:	0793      	lsls	r3, r2, #30
 8007c5e:	680e      	ldr	r6, [r1, #0]
 8007c60:	bf08      	it	eq
 8007c62:	694b      	ldreq	r3, [r1, #20]
 8007c64:	600f      	str	r7, [r1, #0]
 8007c66:	bf18      	it	ne
 8007c68:	2300      	movne	r3, #0
 8007c6a:	eba6 0807 	sub.w	r8, r6, r7
 8007c6e:	608b      	str	r3, [r1, #8]
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	dde9      	ble.n	8007c4a <__sflush_r+0xae>
 8007c76:	6a21      	ldr	r1, [r4, #32]
 8007c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c7a:	4643      	mov	r3, r8
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b0      	blx	r6
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dc08      	bgt.n	8007c98 <__sflush_r+0xfc>
 8007c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c98:	4407      	add	r7, r0
 8007c9a:	eba8 0800 	sub.w	r8, r8, r0
 8007c9e:	e7e7      	b.n	8007c70 <__sflush_r+0xd4>
 8007ca0:	dfbffffe 	.word	0xdfbffffe

08007ca4 <_fflush_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b913      	cbnz	r3, 8007cb4 <_fflush_r+0x10>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	b118      	cbz	r0, 8007cbe <_fflush_r+0x1a>
 8007cb6:	6a03      	ldr	r3, [r0, #32]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <_fflush_r+0x1a>
 8007cba:	f7ff fa91 	bl	80071e0 <__sinit>
 8007cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f3      	beq.n	8007cae <_fflush_r+0xa>
 8007cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cc8:	07d0      	lsls	r0, r2, #31
 8007cca:	d404      	bmi.n	8007cd6 <_fflush_r+0x32>
 8007ccc:	0599      	lsls	r1, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_fflush_r+0x32>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cd2:	f7ff fb8a 	bl	80073ea <__retarget_lock_acquire_recursive>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7ff ff5f 	bl	8007b9c <__sflush_r>
 8007cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ce0:	07da      	lsls	r2, r3, #31
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	d4e4      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d4e1      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cee:	f7ff fb7d 	bl	80073ec <__retarget_lock_release_recursive>
 8007cf2:	e7dd      	b.n	8007cb0 <_fflush_r+0xc>

08007cf4 <__swbuf_r>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	460e      	mov	r6, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	b118      	cbz	r0, 8007d06 <__swbuf_r+0x12>
 8007cfe:	6a03      	ldr	r3, [r0, #32]
 8007d00:	b90b      	cbnz	r3, 8007d06 <__swbuf_r+0x12>
 8007d02:	f7ff fa6d 	bl	80071e0 <__sinit>
 8007d06:	69a3      	ldr	r3, [r4, #24]
 8007d08:	60a3      	str	r3, [r4, #8]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	071a      	lsls	r2, r3, #28
 8007d0e:	d501      	bpl.n	8007d14 <__swbuf_r+0x20>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	b943      	cbnz	r3, 8007d26 <__swbuf_r+0x32>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f82a 	bl	8007d70 <__swsetup_r>
 8007d1c:	b118      	cbz	r0, 8007d26 <__swbuf_r+0x32>
 8007d1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d22:	4638      	mov	r0, r7
 8007d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6922      	ldr	r2, [r4, #16]
 8007d2a:	1a98      	subs	r0, r3, r2
 8007d2c:	6963      	ldr	r3, [r4, #20]
 8007d2e:	b2f6      	uxtb	r6, r6
 8007d30:	4283      	cmp	r3, r0
 8007d32:	4637      	mov	r7, r6
 8007d34:	dc05      	bgt.n	8007d42 <__swbuf_r+0x4e>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7ff ffb3 	bl	8007ca4 <_fflush_r>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d1ed      	bne.n	8007d1e <__swbuf_r+0x2a>
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	60a3      	str	r3, [r4, #8]
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	6022      	str	r2, [r4, #0]
 8007d4e:	701e      	strb	r6, [r3, #0]
 8007d50:	6962      	ldr	r2, [r4, #20]
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d004      	beq.n	8007d62 <__swbuf_r+0x6e>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d5e1      	bpl.n	8007d22 <__swbuf_r+0x2e>
 8007d5e:	2e0a      	cmp	r6, #10
 8007d60:	d1df      	bne.n	8007d22 <__swbuf_r+0x2e>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7ff ff9d 	bl	8007ca4 <_fflush_r>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0d9      	beq.n	8007d22 <__swbuf_r+0x2e>
 8007d6e:	e7d6      	b.n	8007d1e <__swbuf_r+0x2a>

08007d70 <__swsetup_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4b29      	ldr	r3, [pc, #164]	@ (8007e18 <__swsetup_r+0xa8>)
 8007d74:	4605      	mov	r5, r0
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b118      	cbz	r0, 8007d84 <__swsetup_r+0x14>
 8007d7c:	6a03      	ldr	r3, [r0, #32]
 8007d7e:	b90b      	cbnz	r3, 8007d84 <__swsetup_r+0x14>
 8007d80:	f7ff fa2e 	bl	80071e0 <__sinit>
 8007d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d88:	0719      	lsls	r1, r3, #28
 8007d8a:	d422      	bmi.n	8007dd2 <__swsetup_r+0x62>
 8007d8c:	06da      	lsls	r2, r3, #27
 8007d8e:	d407      	bmi.n	8007da0 <__swsetup_r+0x30>
 8007d90:	2209      	movs	r2, #9
 8007d92:	602a      	str	r2, [r5, #0]
 8007d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d9e:	e033      	b.n	8007e08 <__swsetup_r+0x98>
 8007da0:	0758      	lsls	r0, r3, #29
 8007da2:	d512      	bpl.n	8007dca <__swsetup_r+0x5a>
 8007da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007da6:	b141      	cbz	r1, 8007dba <__swsetup_r+0x4a>
 8007da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dac:	4299      	cmp	r1, r3
 8007dae:	d002      	beq.n	8007db6 <__swsetup_r+0x46>
 8007db0:	4628      	mov	r0, r5
 8007db2:	f7ff fb2b 	bl	800740c <_free_r>
 8007db6:	2300      	movs	r3, #0
 8007db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f043 0308 	orr.w	r3, r3, #8
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	b94b      	cbnz	r3, 8007dea <__swsetup_r+0x7a>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de0:	d003      	beq.n	8007dea <__swsetup_r+0x7a>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f84f 	bl	8007e88 <__smakebuf_r>
 8007dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dee:	f013 0201 	ands.w	r2, r3, #1
 8007df2:	d00a      	beq.n	8007e0a <__swsetup_r+0x9a>
 8007df4:	2200      	movs	r2, #0
 8007df6:	60a2      	str	r2, [r4, #8]
 8007df8:	6962      	ldr	r2, [r4, #20]
 8007dfa:	4252      	negs	r2, r2
 8007dfc:	61a2      	str	r2, [r4, #24]
 8007dfe:	6922      	ldr	r2, [r4, #16]
 8007e00:	b942      	cbnz	r2, 8007e14 <__swsetup_r+0xa4>
 8007e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e06:	d1c5      	bne.n	8007d94 <__swsetup_r+0x24>
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	0799      	lsls	r1, r3, #30
 8007e0c:	bf58      	it	pl
 8007e0e:	6962      	ldrpl	r2, [r4, #20]
 8007e10:	60a2      	str	r2, [r4, #8]
 8007e12:	e7f4      	b.n	8007dfe <__swsetup_r+0x8e>
 8007e14:	2000      	movs	r0, #0
 8007e16:	e7f7      	b.n	8007e08 <__swsetup_r+0x98>
 8007e18:	2000001c 	.word	0x2000001c

08007e1c <_sbrk_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d06      	ldr	r5, [pc, #24]	@ (8007e38 <_sbrk_r+0x1c>)
 8007e20:	2300      	movs	r3, #0
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	f7f8 ffbe 	bl	8000da8 <_sbrk>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_sbrk_r+0x1a>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_sbrk_r+0x1a>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	20001c98 	.word	0x20001c98

08007e3c <__swhatbuf_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2900      	cmp	r1, #0
 8007e46:	b096      	sub	sp, #88	@ 0x58
 8007e48:	4615      	mov	r5, r2
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	da0d      	bge.n	8007e6a <__swhatbuf_r+0x2e>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2340      	movne	r3, #64	@ 0x40
 8007e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e60:	2000      	movs	r0, #0
 8007e62:	6031      	str	r1, [r6, #0]
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	b016      	add	sp, #88	@ 0x58
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	466a      	mov	r2, sp
 8007e6c:	f000 f848 	bl	8007f00 <_fstat_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dbec      	blt.n	8007e4e <__swhatbuf_r+0x12>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e7e:	4259      	negs	r1, r3
 8007e80:	4159      	adcs	r1, r3
 8007e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e86:	e7eb      	b.n	8007e60 <__swhatbuf_r+0x24>

08007e88 <__smakebuf_r>:
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8c:	079d      	lsls	r5, r3, #30
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	d507      	bpl.n	8007ea4 <__smakebuf_r+0x1c>
 8007e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea4:	ab01      	add	r3, sp, #4
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f7ff ffc8 	bl	8007e3c <__swhatbuf_r>
 8007eac:	9f00      	ldr	r7, [sp, #0]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff fb16 	bl	80074e4 <_malloc_r>
 8007eb8:	b948      	cbnz	r0, 8007ece <__smakebuf_r+0x46>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	059a      	lsls	r2, r3, #22
 8007ec0:	d4ee      	bmi.n	8007ea0 <__smakebuf_r+0x18>
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	e7e2      	b.n	8007e94 <__smakebuf_r+0xc>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	6020      	str	r0, [r4, #0]
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ede:	b15b      	cbz	r3, 8007ef8 <__smakebuf_r+0x70>
 8007ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f81d 	bl	8007f24 <_isatty_r>
 8007eea:	b128      	cbz	r0, 8007ef8 <__smakebuf_r+0x70>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	431d      	orrs	r5, r3
 8007efc:	81a5      	strh	r5, [r4, #12]
 8007efe:	e7cf      	b.n	8007ea0 <__smakebuf_r+0x18>

08007f00 <_fstat_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	@ (8007f20 <_fstat_r+0x20>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	f7f8 ff22 	bl	8000d56 <_fstat>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	d102      	bne.n	8007f1c <_fstat_r+0x1c>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	b103      	cbz	r3, 8007f1c <_fstat_r+0x1c>
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	20001c98 	.word	0x20001c98

08007f24 <_isatty_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	@ (8007f40 <_isatty_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f8 ff21 	bl	8000d76 <_isatty>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_isatty_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_isatty_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20001c98 	.word	0x20001c98

08007f44 <_init>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr

08007f50 <_fini>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr
