
CanTestG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b28  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e50  08008e50  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e50  08008e50  00009e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e58  08008e58  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e58  08008e58  00009e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008e60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c10  2000006c  08008ecc  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c7c  08008ecc  0000ac7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f522  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db6  00000000  00000000  000295be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0002d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ca  00000000  00000000  0002ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a4  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c809  00000000  00000000  000354b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d263  00000000  00000000  00051cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ef22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a80  00000000  00000000  0015ef68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001669e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008cf0 	.word	0x08008cf0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08008cf0 	.word	0x08008cf0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_write+0x24>)
 80005c6:	f003 f951 	bl	800386c <HAL_UART_Transmit>
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ec 	.word	0x200000ec

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fc97 	bl	8000f0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f832 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f928 	bl	8000838 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005e8:	f000 f87a 	bl	80006e0 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8d8 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f004 f82c 	bl	800464c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semRxCAN */
  semRxCANHandle = osSemaphoreNew(1, 1, &semRxCAN_attributes);
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <main+0x54>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	2001      	movs	r0, #1
 80005fa:	f004 f903 	bl	8004804 <osSemaphoreNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <main+0x58>)
 8000602:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueRxCAN */
  queueRxCANHandle = osMessageQueueNew (32, sizeof(uint8_t), &queueRxCAN_attributes);
 8000604:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <main+0x5c>)
 8000606:	2101      	movs	r1, #1
 8000608:	2020      	movs	r0, #32
 800060a:	f004 fa1b 	bl	8004a44 <osMessageQueueNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a09      	ldr	r2, [pc, #36]	@ (8000638 <main+0x60>)
 8000612:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000614:	4a09      	ldr	r2, [pc, #36]	@ (800063c <main+0x64>)
 8000616:	2100      	movs	r1, #0
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <main+0x68>)
 800061a:	f004 f861 	bl	80046e0 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <main+0x6c>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f004 f836 	bl	8004694 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x50>
 800062c:	08008dbc 	.word	0x08008dbc
 8000630:	20000188 	.word	0x20000188
 8000634:	08008da4 	.word	0x08008da4
 8000638:	20000184 	.word	0x20000184
 800063c:	08008d80 	.word	0x08008d80
 8000640:	0800095d 	.word	0x0800095d
 8000644:	20000180 	.word	0x20000180

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2238      	movs	r2, #56	@ 0x38
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fdb8 	bl	80081cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800066a:	2000      	movs	r0, #0
 800066c:	f001 fd00 	bl	8002070 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2340      	movs	r3, #64	@ 0x40
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000686:	2304      	movs	r3, #4
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800068a:	2355      	movs	r3, #85	@ 0x55
 800068c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fd9a 	bl	80021d8 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006aa:	f000 f9bb 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 f898 	bl	80027fc <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d2:	f000 f9a7 	bl	8000a24 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	@ 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 80006e8:	4a2c      	ldr	r2, [pc, #176]	@ (800079c <MX_FDCAN1_Init+0xbc>)
 80006ea:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000700:	2200      	movs	r2, #0
 8000702:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000706:	2200      	movs	r2, #0
 8000708:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800070a:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 800070c:	2200      	movs	r2, #0
 800070e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 283;
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000712:	f240 121b 	movw	r2, #283	@ 0x11b
 8000716:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 800071a:	2201      	movs	r2, #1
 800071c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000726:	2201      	movs	r2, #1
 8000728:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 800072c:	2201      	movs	r2, #1
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000732:	2201      	movs	r2, #1
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000738:	2201      	movs	r2, #1
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 800073e:	2201      	movs	r2, #1
 8000740:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000744:	2200      	movs	r2, #0
 8000746:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000750:	2200      	movs	r2, #0
 8000752:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000756:	f000 fd13 	bl	8001180 <HAL_FDCAN_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8000760:	f000 f960 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000770:	2301      	movs	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x010;
 8000778:	2310      	movs	r3, #16
 800077a:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_FDCAN1_Init+0xb8>)
 8000782:	f000 fe57 	bl	8001434 <HAL_FDCAN_ConfigFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_FDCAN1_Init+0xb0>
  {
	  Error_Handler();
 800078c:	f000 f94a 	bl	8000a24 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000088 	.word	0x20000088
 800079c:	40006400 	.word	0x40006400

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007a6:	4a23      	ldr	r2, [pc, #140]	@ (8000834 <MX_USART2_UART_Init+0x94>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007ea:	f002 ffef 	bl	80037cc <HAL_UART_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f916 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 80007fc:	f003 fe18 	bl	8004430 <HAL_UARTEx_SetTxFifoThreshold>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 f90d 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 800080e:	f003 fe4d 	bl	80044ac <HAL_UARTEx_SetRxFifoThreshold>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f904 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_USART2_UART_Init+0x90>)
 800081e:	f003 fdce 	bl	80043be <HAL_UARTEx_DisableFifoMode>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 f8fc 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000ec 	.word	0x200000ec
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a1d      	ldr	r2, [pc, #116]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_GPIO_Init+0xa8>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f001 fba9 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f001 fa18 	bl	8001d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 4 */



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b090      	sub	sp, #64	@ 0x40
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d027      	beq.n	8000948 <HAL_FDCAN_RxFifo0Callback+0x64>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	f107 0214 	add.w	r2, r7, #20
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	4813      	ldr	r0, [pc, #76]	@ (8000950 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000904:	f000 fe18 	bl	8001538 <HAL_FDCAN_GetRxMessage>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11c      	bne.n	8000948 <HAL_FDCAN_RxFifo0Callback+0x64>
		{
			for (uint8_t i = 0; i < 8; ++i)
 800090e:	2300      	movs	r3, #0
 8000910:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000914:	e00f      	b.n	8000936 <HAL_FDCAN_RxFifo0Callback+0x52>
			{
				osMessageQueuePut(queueRxCANHandle, rxData + i, 0, 0);
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800091e:	f107 020c 	add.w	r2, r7, #12
 8000922:	18d1      	adds	r1, r2, r3
 8000924:	2300      	movs	r3, #0
 8000926:	2200      	movs	r2, #0
 8000928:	f004 f900 	bl	8004b2c <osMessageQueuePut>
			for (uint8_t i = 0; i < 8; ++i)
 800092c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000930:	3301      	adds	r3, #1
 8000932:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000936:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800093a:	2b07      	cmp	r3, #7
 800093c:	d9eb      	bls.n	8000916 <HAL_FDCAN_RxFifo0Callback+0x32>
			}
			osSemaphoreRelease(semRxCANHandle);
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f004 f83a 	bl	80049bc <osSemaphoreRelease>
		}
	}
}
 8000948:	bf00      	nop
 800094a:	3740      	adds	r7, #64	@ 0x40
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000088 	.word	0x20000088
 8000954:	20000184 	.word	0x20000184
 8000958:	20000188 	.word	0x20000188

0800095c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000964:	4821      	ldr	r0, [pc, #132]	@ (80009ec <StartDefaultTask+0x90>)
 8000966:	f000 fdbf 	bl	80014e8 <HAL_FDCAN_Start>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <StartDefaultTask+0x18>
	{
		Error_Handler();
 8000970:	f000 f858 	bl	8000a24 <Error_Handler>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	481c      	ldr	r0, [pc, #112]	@ (80009ec <StartDefaultTask+0x90>)
 800097a:	f000 fee5 	bl	8001748 <HAL_FDCAN_ActivateNotification>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <StartDefaultTask+0x2c>
	{
		Error_Handler();
 8000984:	f000 f84e 	bl	8000a24 <Error_Handler>
	}

	uint8_t rxByte;
	uint8_t rxData[9];

	printf("CANFD rx interrupt example CMSIS OS2\r\n");
 8000988:	4819      	ldr	r0, [pc, #100]	@ (80009f0 <StartDefaultTask+0x94>)
 800098a:	f007 fb3f 	bl	800800c <puts>

	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(semRxCANHandle, osWaitForever);
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <StartDefaultTask+0x98>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000996:	4618      	mov	r0, r3
 8000998:	f003 ffbe 	bl	8004918 <osSemaphoreAcquire>
		for (uint8_t i = 0; i < 8; ++i)
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
 80009a0:	e011      	b.n	80009c6 <StartDefaultTask+0x6a>
		{
			osMessageQueueGet(queueRxCANHandle, &rxByte, NULL, osWaitForever);
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <StartDefaultTask+0x9c>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	f107 0116 	add.w	r1, r7, #22
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ae:	2200      	movs	r2, #0
 80009b0:	f004 f91c 	bl	8004bec <osMessageQueueGet>
			rxData[i] = rxByte;
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	7dba      	ldrb	r2, [r7, #22]
 80009b8:	3318      	adds	r3, #24
 80009ba:	443b      	add	r3, r7
 80009bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for (uint8_t i = 0; i < 8; ++i)
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	3301      	adds	r3, #1
 80009c4:	75fb      	strb	r3, [r7, #23]
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d9ea      	bls.n	80009a2 <StartDefaultTask+0x46>
		}
		rxData[8] = '\0';
 80009cc:	2300      	movs	r3, #0
 80009ce:	753b      	strb	r3, [r7, #20]
		printf("got message: %s\r\n", rxData);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <StartDefaultTask+0xa0>)
 80009d8:	f007 fab0 	bl	8007f3c <iprintf>
		memset(rxData, '\0', 9);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2209      	movs	r2, #9
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f007 fbf1 	bl	80081cc <memset>
		osSemaphoreAcquire(semRxCANHandle, osWaitForever);
 80009ea:	e7d0      	b.n	800098e <StartDefaultTask+0x32>
 80009ec:	20000088 	.word	0x20000088
 80009f0:	08008d2c 	.word	0x08008d2c
 80009f4:	20000188 	.word	0x20000188
 80009f8:	20000184 	.word	0x20000184
 80009fc:	08008d54 	.word	0x08008d54

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 fa95 	bl	8000f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001000 	.word	0x40001000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f001 fb03 	bl	800203c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000a36:	2064      	movs	r0, #100	@ 0x64
 8000a38:	f000 faa0 	bl	8000f7c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a3c:	bf00      	nop
 8000a3e:	e7f5      	b.n	8000a2c <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_MspInit+0x50>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <HAL_MspInit+0x50>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_MspInit+0x50>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <HAL_MspInit+0x50>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <HAL_MspInit+0x50>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x50>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 fb57 	bl	8001130 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a82:	f001 fb99 	bl	80021b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	@ 0x78
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2254      	movs	r2, #84	@ 0x54
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 fb89 	bl	80081cc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a31      	ldr	r2, [pc, #196]	@ (8000b84 <HAL_FDCAN_MspInit+0xf0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d15b      	bne.n	8000b7c <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 f8df 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ae0:	f7ff ffa0 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ae4:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <HAL_FDCAN_MspInit+0xf4>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae8:	4a27      	ldr	r2, [pc, #156]	@ (8000b88 <HAL_FDCAN_MspInit+0xf4>)
 8000aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af0:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <HAL_FDCAN_MspInit+0xf4>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <HAL_FDCAN_MspInit+0xf4>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <HAL_FDCAN_MspInit+0xf4>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <HAL_FDCAN_MspInit+0xf4>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b26:	2309      	movs	r3, #9
 8000b28:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f001 f8e8 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b58:	f001 f8d6 	bl	8001d08 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2105      	movs	r1, #5
 8000b60:	2015      	movs	r0, #21
 8000b62:	f000 fae5 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b66:	2015      	movs	r0, #21
 8000b68:	f000 fafc 	bl	8001164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2105      	movs	r1, #5
 8000b70:	2016      	movs	r0, #22
 8000b72:	f000 fadd 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000b76:	2016      	movs	r0, #22
 8000b78:	f000 faf4 	bl	8001164 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3778      	adds	r7, #120	@ 0x78
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40006400 	.word	0x40006400
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09e      	sub	sp, #120	@ 0x78
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2254      	movs	r2, #84	@ 0x54
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 fb0d 	bl	80081cc <memset>
  if(huart->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_UART_MspInit+0xa8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d136      	bne.n	8000c2a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 f865 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff ff26 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	4a16      	ldr	r2, [pc, #88]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c26:	f001 f86f 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3778      	adds	r7, #120	@ 0x78
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d00 <HAL_InitTick+0xc4>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c50:	4a2b      	ldr	r2, [pc, #172]	@ (8000d00 <HAL_InitTick+0xc4>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c58:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <HAL_InitTick+0xc4>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c64:	f107 020c 	add.w	r2, r7, #12
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 ff9a 	bl	8002ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c74:	f001 ff6c 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8000c78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c7c:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <HAL_InitTick+0xc8>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0c9b      	lsrs	r3, r3, #18
 8000c84:	3b01      	subs	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000c8a:	4a20      	ldr	r2, [pc, #128]	@ (8000d0c <HAL_InitTick+0xd0>)
 8000c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000c90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ca8:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000caa:	f002 fa43 	bl	8003134 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11b      	bne.n	8000cf4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cbc:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <HAL_InitTick+0xcc>)
 8000cbe:	f002 fa9b 	bl	80031f8 <HAL_TIM_Base_Start_IT>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d111      	bne.n	8000cf4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd0:	2036      	movs	r0, #54	@ 0x36
 8000cd2:	f000 fa47 	bl	8001164 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d808      	bhi.n	8000cee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	2036      	movs	r0, #54	@ 0x36
 8000ce2:	f000 fa25 	bl	8001130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_InitTick+0xd4>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e002      	b.n	8000cf4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	2000018c 	.word	0x2000018c
 8000d0c:	40001000 	.word	0x40001000
 8000d10:	20000004 	.word	0x20000004

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <FDCAN1_IT0_IRQHandler+0x10>)
 8000d52:	f000 fddf 	bl	8001914 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000088 	.word	0x20000088

08000d60 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <FDCAN1_IT1_IRQHandler+0x10>)
 8000d66:	f000 fdd5 	bl	8001914 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000088 	.word	0x20000088

08000d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM6_DAC_IRQHandler+0x10>)
 8000d7a:	f002 fab5 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000018c 	.word	0x2000018c

08000d88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9a:	f3af 8000 	nop.w
 8000d9e:	4601      	mov	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
  }

  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f007 fa04 	bl	8008268 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	200001d8 	.word	0x200001d8
 8000e94:	20001c80 	.word	0x20001c80

08000e98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ebe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f007 f9c3 	bl	8008274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fb73 	bl	80005d8 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   r0, =_estack
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f00:	08008e60 	.word	0x08008e60
  ldr r2, =_sbss
 8000f04:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f08:	20001c7c 	.word	0x20001c7c

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>

08000f0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f8fe 	bl	800111a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f7ff fe8c 	bl	8000c3c <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f30:	f7ff fd86 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	79fb      	ldrb	r3, [r7, #7]

}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a03      	ldr	r2, [pc, #12]	@ (8000f5c <HAL_IncTick+0x1c>)
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200001dc 	.word	0x200001dc
 8000f60:	20000008 	.word	0x20000008

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200001dc 	.word	0x200001dc

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f94:	d004      	beq.n	8000fa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_Delay+0x40>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa0:	bf00      	nop
 8000fa2:	f7ff ffdf 	bl	8000f64 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d8f7      	bhi.n	8000fa2 <HAL_Delay+0x26>
  {
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	@ (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff4c 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113e:	f7ff ff63 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001142:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff ffb3 	bl	80010b4 <NVIC_EncodePriority>
 800114e:	4602      	mov	r2, r0
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff82 	bl	8001060 <__NVIC_SetPriority>
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff56 	bl	8001024 <__NVIC_EnableIRQ>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e147      	b.n	8001422 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fc74 	bl	8000a94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0210 	bic.w	r2, r2, #16
 80011ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff fed2 	bl	8000f64 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011c2:	e012      	b.n	80011ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011c4:	f7ff fece 	bl	8000f64 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e11b      	b.n	8001422 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d0e5      	beq.n	80011c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699a      	ldr	r2, [r3, #24]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0201 	orr.w	r2, r2, #1
 8001206:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001208:	f7ff feac 	bl	8000f64 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800120e:	e012      	b.n	8001236 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001210:	f7ff fea8 	bl	8000f64 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d90b      	bls.n	8001236 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0f5      	b.n	8001422 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0e5      	beq.n	8001210 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0202 	orr.w	r2, r2, #2
 8001252:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a74      	ldr	r2, [pc, #464]	@ (800142c <HAL_FDCAN_Init+0x2ac>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d103      	bne.n	8001266 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800125e:	4a74      	ldr	r2, [pc, #464]	@ (8001430 <HAL_FDCAN_Init+0x2b0>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7c1b      	ldrb	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d108      	bne.n	8001280 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800127c:	619a      	str	r2, [r3, #24]
 800127e:	e007      	b.n	8001290 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800128e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7c5b      	ldrb	r3, [r3, #17]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d108      	bne.n	80012aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	e007      	b.n	80012ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7c9b      	ldrb	r3, [r3, #18]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d108      	bne.n	80012d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	e007      	b.n	80012e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80012e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001308:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0210 	bic.w	r2, r2, #16
 8001318:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0204 	orr.w	r2, r2, #4
 8001330:	619a      	str	r2, [r3, #24]
 8001332:	e02c      	b.n	800138e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d028      	beq.n	800138e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d01c      	beq.n	800137e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001352:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0210 	orr.w	r2, r2, #16
 8001362:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d110      	bne.n	800138e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0220 	orr.w	r2, r2, #32
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	e007      	b.n	800138e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	699a      	ldr	r2, [r3, #24]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	3b01      	subs	r3, #1
 8001394:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	3b01      	subs	r3, #1
 800139c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800139e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80013c2:	d115      	bne.n	80013f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ce:	3b01      	subs	r3, #1
 80013d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	3b01      	subs	r3, #1
 80013da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	3b01      	subs	r3, #1
 80013e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fc12 	bl	8001c30 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40006400 	.word	0x40006400
 8001430:	40006500 	.word	0x40006500

08001434 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001444:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d002      	beq.n	8001452 <HAL_FDCAN_ConfigFilter+0x1e>
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d13d      	bne.n	80014ce <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d119      	bne.n	800148e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001466:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800146e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e01d      	b.n	80014ca <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	075a      	lsls	r2, r3, #29
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	079a      	lsls	r2, r3, #30
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3304      	adds	r3, #4
 80014c2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e006      	b.n	80014dc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	f043 0202 	orr.w	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d110      	bne.n	800151e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e006      	b.n	800152c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
  }
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001550:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001552:	7efb      	ldrb	r3, [r7, #27]
 8001554:	2b02      	cmp	r3, #2
 8001556:	f040 80e8 	bne.w	800172a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b40      	cmp	r3, #64	@ 0x40
 800155e:	d137      	bne.n	80015d0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001574:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0db      	b.n	8001738 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001588:	0e1b      	lsrs	r3, r3, #24
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10a      	bne.n	80015a8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800159a:	0a5b      	lsrs	r3, r3, #9
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ce:	e036      	b.n	800163e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d107      	bne.n	80015f0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0a3      	b.n	8001738 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015f8:	0e1b      	lsrs	r3, r3, #24
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10a      	bne.n	8001618 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e005      	b.n	800166e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	3304      	adds	r3, #4
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	f003 020f 	and.w	r2, r3, #15
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0e1b      	lsrs	r3, r3, #24
 80016c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0fda      	lsrs	r2, r3, #31
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	3304      	adds	r3, #4
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	e00a      	b.n	80016fa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	441a      	add	r2, r3
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	440b      	add	r3, r1
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	3301      	adds	r3, #1
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	461a      	mov	r2, r3
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	4293      	cmp	r3, r2
 8001708:	d3ec      	bcc.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b40      	cmp	r3, #64	@ 0x40
 800170e:	d105      	bne.n	800171c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800171a:	e004      	b.n	8001726 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e006      	b.n	8001738 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f043 0208 	orr.w	r2, r3, #8
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	372c      	adds	r7, #44	@ 0x2c
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	08008de4 	.word	0x08008de4

08001748 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800175a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d003      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0x22>
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 80c8 	bne.w	80018fa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001770:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d03b      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d031      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d027      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01d      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d013      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d13b      	bne.n	800189a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d131      	bne.n	800189a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d127      	bne.n	800189a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11d      	bne.n	800189a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	d113      	bne.n	800189a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0202 	orr.w	r2, r2, #2
 80018a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e006      	b.n	8001908 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	f043 0202 	orr.w	r2, r3, #2
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
  }
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001922:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001930:	4013      	ands	r3, r2
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001948:	4013      	ands	r3, r2
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001960:	4013      	ands	r3, r2
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800196a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800196e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001976:	6a3a      	ldr	r2, [r7, #32]
 8001978:	4013      	ands	r3, r2
 800197a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001986:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4013      	ands	r3, r2
 8001992:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019a2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2240      	movs	r2, #64	@ 0x40
 80019be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f916 	bl	8001bf2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d019      	beq.n	8001a04 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d014      	beq.n	8001a04 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019e2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019fc:	6939      	ldr	r1, [r7, #16]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8d8 	bl	8001bb4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a10:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8a2 	bl	8001b5e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a26:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ff5a 	bl	80008e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f897 	bl	8001b74 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00c      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f890 	bl	8001b8a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d013      	beq.n	8001aa6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a86:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4013      	ands	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2280      	movs	r2, #128	@ 0x80
 8001a9c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f87c 	bl	8001b9e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00c      	beq.n	8001aca <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f880 	bl	8001bca <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00c      	beq.n	8001aee <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ae6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f878 	bl	8001bde <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00f      	beq.n	8001b18 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b26:	69f9      	ldr	r1, [r7, #28]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f876 	bl	8001c1a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f858 	bl	8001c06 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b56:	bf00      	nop
 8001b58:	3730      	adds	r7, #48	@ 0x30
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001c38:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001c3a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a2f      	ldr	r2, [pc, #188]	@ (8001d00 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d103      	bne.n	8001c4e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c4c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2c      	ldr	r2, [pc, #176]	@ (8001d04 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d103      	bne.n	8001c60 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001c5e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c6e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c76:	041a      	lsls	r2, r3, #16
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c94:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9c:	061a      	lsls	r2, r3, #24
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e005      	b.n	8001ce2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3f3      	bcc.n	8001cd6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	4000a400 	.word	0x4000a400
 8001d00:	40006800 	.word	0x40006800
 8001d04:	40006c00 	.word	0x40006c00

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d16:	e15a      	b.n	8001fce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	4013      	ands	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 814c 	beq.w	8001fc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d005      	beq.n	8001d48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d130      	bne.n	8001daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7e:	2201      	movs	r2, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 0201 	and.w	r2, r3, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d017      	beq.n	8001de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d123      	bne.n	8001e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0203 	and.w	r2, r3, #3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80a6 	beq.w	8001fc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fec <HAL_GPIO_Init+0x2e4>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	4a5a      	ldr	r2, [pc, #360]	@ (8001fec <HAL_GPIO_Init+0x2e4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e88:	4b58      	ldr	r3, [pc, #352]	@ (8001fec <HAL_GPIO_Init+0x2e4>)
 8001e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e94:	4a56      	ldr	r2, [pc, #344]	@ (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ebe:	d01f      	beq.n	8001f00 <HAL_GPIO_Init+0x1f8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff4 <HAL_GPIO_Init+0x2ec>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d019      	beq.n	8001efc <HAL_GPIO_Init+0x1f4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ffc <HAL_GPIO_Init+0x2f4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a49      	ldr	r2, [pc, #292]	@ (8002000 <HAL_GPIO_Init+0x2f8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a48      	ldr	r2, [pc, #288]	@ (8002004 <HAL_GPIO_Init+0x2fc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_GPIO_Init+0x1e4>
 8001ee8:	2305      	movs	r3, #5
 8001eea:	e00a      	b.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001eec:	2306      	movs	r3, #6
 8001eee:	e008      	b.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001f00:	2300      	movs	r3, #0
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f12:	4937      	ldr	r1, [pc, #220]	@ (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f20:	4b39      	ldr	r3, [pc, #228]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f44:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6e:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f74:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f98:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fc2:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f ae9d 	bne.w	8001d18 <HAL_GPIO_Init+0x10>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	48000800 	.word	0x48000800
 8001ffc:	48000c00 	.word	0x48000c00
 8002000:	48001000 	.word	0x48001000
 8002004:	48001400 	.word	0x48001400
 8002008:	40010400 	.word	0x40010400

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002028:	e002      	b.n	8002030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43d9      	mvns	r1, r3
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	400b      	ands	r3, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d141      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800207e:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208a:	d131      	bne.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800208c:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002092:	4a46      	ldr	r2, [pc, #280]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800209c:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a4:	4a41      	ldr	r2, [pc, #260]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ac:	4b40      	ldr	r3, [pc, #256]	@ (80021b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2232      	movs	r2, #50	@ 0x32
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4a3f      	ldr	r2, [pc, #252]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	3301      	adds	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c2:	e002      	b.n	80020ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d6:	d102      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f2      	bne.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020de:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ea:	d158      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e057      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f0:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020f6:	4a2d      	ldr	r2, [pc, #180]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002100:	e04d      	b.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d141      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002116:	d131      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002118:	4b24      	ldr	r3, [pc, #144]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800211e:	4a23      	ldr	r2, [pc, #140]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002130:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2232      	movs	r2, #50	@ 0x32
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9b      	lsrs	r3, r3, #18
 800214a:	3301      	adds	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214e:	e002      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3b01      	subs	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002162:	d102      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f2      	bne.n	8002150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002176:	d112      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e011      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800218c:	e007      	b.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800219c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40007000 	.word	0x40007000
 80021b0:	20000000 	.word	0x20000000
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c6:	6093      	str	r3, [r2, #8]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40007000 	.word	0x40007000

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e2fe      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b97      	ldr	r3, [pc, #604]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	4b94      	ldr	r3, [pc, #592]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d102      	bne.n	8002216 <HAL_RCC_OscConfig+0x3e>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d002      	beq.n	800221c <HAL_RCC_OscConfig+0x44>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	4b8d      	ldr	r3, [pc, #564]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e2d9      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x74>
 800223e:	4b85      	ldr	r3, [pc, #532]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a84      	ldr	r2, [pc, #528]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b7f      	ldr	r3, [pc, #508]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7e      	ldr	r2, [pc, #504]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b7c      	ldr	r3, [pc, #496]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7b      	ldr	r2, [pc, #492]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 8002270:	4b78      	ldr	r3, [pc, #480]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a77      	ldr	r2, [pc, #476]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b75      	ldr	r3, [pc, #468]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a74      	ldr	r2, [pc, #464]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe68 	bl	8000f64 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fe64 	bl	8000f64 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e29e      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xc0>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fe54 	bl	8000f64 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fe50 	bl	8000f64 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e28a      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	4b60      	ldr	r3, [pc, #384]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d075      	beq.n	80023da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f8:	4b56      	ldr	r3, [pc, #344]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0x136>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d002      	beq.n	8002314 <HAL_RCC_OscConfig+0x13c>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d11f      	bne.n	8002354 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	4b4f      	ldr	r3, [pc, #316]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x154>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e25d      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b49      	ldr	r3, [pc, #292]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4946      	ldr	r1, [pc, #280]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002340:	4b45      	ldr	r3, [pc, #276]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fc79 	bl	8000c3c <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d043      	beq.n	80023d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e249      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d023      	beq.n	80023a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3c      	ldr	r2, [pc, #240]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fdfc 	bl	8000f64 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe fdf8 	bl	8000f64 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e232      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002382:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	492d      	ldr	r1, [pc, #180]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	e01a      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fdd8 	bl	8000f64 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7fe fdd4 	bl	8000f64 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e20e      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ca:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1e0>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d041      	beq.n	800246a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01c      	beq.n	8002428 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f4:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe fdb1 	bl	8000f64 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe fdad 	bl	8000f64 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1e7      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0ef      	beq.n	8002406 <HAL_RCC_OscConfig+0x22e>
 8002426:	e020      	b.n	800246a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242e:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <HAL_RCC_OscConfig+0x27c>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fd94 	bl	8000f64 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243e:	e00d      	b.n	800245c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe fd90 	bl	8000f64 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d906      	bls.n	800245c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1ca      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800245c:	4b8c      	ldr	r3, [pc, #560]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ea      	bne.n	8002440 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80a6 	beq.w	80025c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247c:	4b84      	ldr	r3, [pc, #528]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x2b4>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x2b6>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00d      	beq.n	80024ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b7f      	ldr	r3, [pc, #508]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a7e      	ldr	r2, [pc, #504]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
 800249e:	4b7c      	ldr	r3, [pc, #496]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b79      	ldr	r3, [pc, #484]	@ (8002694 <HAL_RCC_OscConfig+0x4bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ba:	4b76      	ldr	r3, [pc, #472]	@ (8002694 <HAL_RCC_OscConfig+0x4bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	@ (8002694 <HAL_RCC_OscConfig+0x4bc>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7fe fd4d 	bl	8000f64 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7fe fd49 	bl	8000f64 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e183      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002694 <HAL_RCC_OscConfig+0x4bc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_RCC_OscConfig+0x32e>
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fa:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002504:	e024      	b.n	8002550 <HAL_RCC_OscConfig+0x378>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d110      	bne.n	8002530 <HAL_RCC_OscConfig+0x358>
 800250e:	4b60      	ldr	r3, [pc, #384]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002514:	4a5e      	ldr	r2, [pc, #376]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251e:	4b5c      	ldr	r3, [pc, #368]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002524:	4a5a      	ldr	r2, [pc, #360]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x378>
 8002530:	4b57      	ldr	r3, [pc, #348]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002536:	4a56      	ldr	r2, [pc, #344]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d016      	beq.n	8002586 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fd04 	bl	8000f64 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe fd00 	bl	8000f64 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e138      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	4b46      	ldr	r3, [pc, #280]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ed      	beq.n	8002560 <HAL_RCC_OscConfig+0x388>
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fced 	bl	8000f64 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fce9 	bl	8000f64 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e121      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ed      	bne.n	800258e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b2:	7ffb      	ldrb	r3, [r7, #31]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	4a34      	ldr	r2, [pc, #208]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03c      	beq.n	800264a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01c      	beq.n	8002612 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80025da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025de:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe fcbc 	bl	8000f64 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f0:	f7fe fcb8 	bl	8000f64 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0f2      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002602:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ef      	beq.n	80025f0 <HAL_RCC_OscConfig+0x418>
 8002610:	e01b      	b.n	800264a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002612:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002618:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fc9f 	bl	8000f64 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262a:	f7fe fc9b 	bl	8000f64 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0d5      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 800263e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80c9 	beq.w	80027e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002654:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b0c      	cmp	r3, #12
 800265e:	f000 8083 	beq.w	8002768 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d15e      	bne.n	8002728 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <HAL_RCC_OscConfig+0x4b8>)
 8002670:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fc75 	bl	8000f64 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267c:	e00c      	b.n	8002698 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fc71 	bl	8000f64 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d905      	bls.n	8002698 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0ab      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002698:	4b55      	ldr	r3, [pc, #340]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ec      	bne.n	800267e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a4:	4b52      	ldr	r3, [pc, #328]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	4b52      	ldr	r3, [pc, #328]	@ (80027f4 <HAL_RCC_OscConfig+0x61c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6a11      	ldr	r1, [r2, #32]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026be:	0212      	lsls	r2, r2, #8
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026c6:	0852      	lsrs	r2, r2, #1
 80026c8:	3a01      	subs	r2, #1
 80026ca:	0552      	lsls	r2, r2, #21
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0652      	lsls	r2, r2, #25
 80026d8:	4311      	orrs	r1, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026de:	06d2      	lsls	r2, r2, #27
 80026e0:	430a      	orrs	r2, r1
 80026e2:	4943      	ldr	r1, [pc, #268]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a40      	ldr	r2, [pc, #256]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f4:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a3d      	ldr	r2, [pc, #244]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fc30 	bl	8000f64 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fc2c 	bl	8000f64 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e066      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	4b35      	ldr	r3, [pc, #212]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x530>
 8002726:	e05e      	b.n	80027e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b31      	ldr	r3, [pc, #196]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a30      	ldr	r2, [pc, #192]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 800272e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fc16 	bl	8000f64 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fc12 	bl	8000f64 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04c      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274e:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800275a:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4924      	ldr	r1, [pc, #144]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_OscConfig+0x620>)
 8002762:	4013      	ands	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]
 8002766:	e03e      	b.n	80027e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e039      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <HAL_RCC_OscConfig+0x618>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	429a      	cmp	r2, r3
 8002786:	d12c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d123      	bne.n	80027e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d11b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d113      	bne.n	80027e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	019f800c 	.word	0x019f800c
 80027f8:	feeefffc 	.word	0xfeeefffc

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e11e      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b91      	ldr	r3, [pc, #580]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b8e      	ldr	r3, [pc, #568]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 020f 	bic.w	r2, r3, #15
 800282a:	498c      	ldr	r1, [pc, #560]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b8a      	ldr	r3, [pc, #552]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e106      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d073      	beq.n	8002938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d129      	bne.n	80028ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	4b81      	ldr	r3, [pc, #516]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0f4      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002868:	f000 f9d0 	bl	8002c0c <RCC_GetSysClockFreqFromPLLSource>
 800286c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4a7c      	ldr	r2, [pc, #496]	@ (8002a64 <HAL_RCC_ClockConfig+0x268>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d93f      	bls.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002876:	4b7a      	ldr	r3, [pc, #488]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800288a:	2b00      	cmp	r3, #0
 800288c:	d033      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d12f      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002896:	4b72      	ldr	r3, [pc, #456]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800289e:	4a70      	ldr	r2, [pc, #448]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e024      	b.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0c6      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c4:	4b66      	ldr	r3, [pc, #408]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0be      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028d4:	f000 f8ce 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4a61      	ldr	r2, [pc, #388]	@ (8002a64 <HAL_RCC_ClockConfig+0x268>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d909      	bls.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4957      	ldr	r1, [pc, #348]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fb2c 	bl	8000f64 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fb28 	bl	8000f64 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e095      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b4e      	ldr	r3, [pc, #312]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b43      	ldr	r3, [pc, #268]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a42      	ldr	r2, [pc, #264]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800295a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002968:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002970:	4a3b      	ldr	r2, [pc, #236]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b39      	ldr	r3, [pc, #228]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4936      	ldr	r1, [pc, #216]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
 800298a:	e008      	b.n	800299e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b80      	cmp	r3, #128	@ 0x80
 8002990:	d105      	bne.n	800299e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002992:	4b33      	ldr	r3, [pc, #204]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4a32      	ldr	r2, [pc, #200]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800299c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800299e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d21d      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ac:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 020f 	bic.w	r2, r3, #15
 80029b4:	4929      	ldr	r1, [pc, #164]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fad2 	bl	8000f64 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7fe face 	bl	8000f64 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e03b      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1ed      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4917      	ldr	r1, [pc, #92]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490f      	ldr	r1, [pc, #60]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a26:	f000 f825 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	490c      	ldr	r1, [pc, #48]	@ (8002a68 <HAL_RCC_ClockConfig+0x26c>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x270>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_RCC_ClockConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f8f6 	bl	8000c3c <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	04c4b400 	.word	0x04c4b400
 8002a68:	08008dcc 	.word	0x08008dcc
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e047      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a98:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	e03e      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a9e:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d136      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a16      	ldr	r2, [pc, #88]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad2:	68d2      	ldr	r2, [r2, #12]
 8002ad4:	0a12      	lsrs	r2, r2, #8
 8002ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	617b      	str	r3, [r7, #20]
      break;
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae2:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	0a12      	lsrs	r2, r2, #8
 8002af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0e5b      	lsrs	r3, r3, #25
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e001      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b1c:	693b      	ldr	r3, [r7, #16]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	016e3600 	.word	0x016e3600

08002b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4904      	ldr	r1, [pc, #16]	@ (8002b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08008ddc 	.word	0x08008ddc

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b80:	f7ff ffda 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0adb      	lsrs	r3, r3, #11
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4904      	ldr	r1, [pc, #16]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08008ddc 	.word	0x08008ddc

08002ba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <HAL_RCC_GetClockConfig+0x60>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40022000 	.word	0x40022000

08002c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3301      	adds	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d10c      	bne.n	8002c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c30:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	0a12      	lsrs	r2, r2, #8
 8002c3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
    break;
 8002c48:	e00c      	b.n	8002c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4a0e      	ldr	r2, [pc, #56]	@ (8002c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	0a12      	lsrs	r2, r2, #8
 8002c58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    break;
 8002c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0e5b      	lsrs	r3, r3, #25
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c7e:	687b      	ldr	r3, [r7, #4]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	016e3600 	.word	0x016e3600
 8002c94:	00f42400 	.word	0x00f42400

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8098 	beq.w	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b43      	ldr	r3, [pc, #268]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b40      	ldr	r3, [pc, #256]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	4a3f      	ldr	r2, [pc, #252]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a39      	ldr	r2, [pc, #228]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cee:	f7fe f939 	bl	8000f64 <HAL_GetTick>
 8002cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf4:	e009      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf6:	f7fe f935 	bl	8000f64 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d902      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	74fb      	strb	r3, [r7, #19]
        break;
 8002d08:	e005      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ef      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d159      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01e      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d019      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d44:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe f8f5 	bl	8000f64 <HAL_GetTick>
 8002d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7c:	e00b      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe f8f1 	bl	8000f64 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d902      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	74fb      	strb	r3, [r7, #19]
            break;
 8002d94:	e006      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d96:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ec      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db8:	4903      	ldr	r1, [pc, #12]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	74bb      	strb	r3, [r7, #18]
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd4:	7c7b      	ldrb	r3, [r7, #17]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4ba7      	ldr	r3, [pc, #668]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	4aa6      	ldr	r2, [pc, #664]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df2:	4ba1      	ldr	r3, [pc, #644]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	f023 0203 	bic.w	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	499d      	ldr	r1, [pc, #628]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e14:	4b98      	ldr	r3, [pc, #608]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1a:	f023 020c 	bic.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4995      	ldr	r1, [pc, #596]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e36:	4b90      	ldr	r3, [pc, #576]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	498c      	ldr	r1, [pc, #560]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e58:	4b87      	ldr	r3, [pc, #540]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	4984      	ldr	r1, [pc, #528]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	497b      	ldr	r1, [pc, #492]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e9c:	4b76      	ldr	r3, [pc, #472]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	4973      	ldr	r1, [pc, #460]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	496a      	ldr	r1, [pc, #424]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee0:	4b65      	ldr	r3, [pc, #404]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4962      	ldr	r1, [pc, #392]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f02:	4b5d      	ldr	r3, [pc, #372]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	4959      	ldr	r1, [pc, #356]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f24:	4b54      	ldr	r3, [pc, #336]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	4951      	ldr	r1, [pc, #324]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f46:	4b4c      	ldr	r3, [pc, #304]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	4948      	ldr	r1, [pc, #288]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f68:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4940      	ldr	r1, [pc, #256]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fa0:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fae:	4932      	ldr	r1, [pc, #200]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fd8:	4b27      	ldr	r3, [pc, #156]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	4924      	ldr	r1, [pc, #144]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003002:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d015      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301e:	4916      	ldr	r1, [pc, #88]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800302e:	d105      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003030:	4b11      	ldr	r3, [pc, #68]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a10      	ldr	r2, [pc, #64]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800303a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d019      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003066:	d109      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a02      	ldr	r2, [pc, #8]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
 8003074:	e002      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003088:	4b29      	ldr	r3, [pc, #164]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	4926      	ldr	r1, [pc, #152]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030a6:	d105      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030a8:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ce:	4918      	ldr	r1, [pc, #96]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030de:	d105      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	490a      	ldr	r1, [pc, #40]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003116:	d105      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003122:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003124:	7cbb      	ldrb	r3, [r7, #18]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e049      	b.n	80031da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f841 	bl	80031e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 fa30 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e054      	b.n	80032ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a26      	ldr	r2, [pc, #152]	@ (80032c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323a:	d01d      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a22      	ldr	r2, [pc, #136]	@ (80032cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1f      	ldr	r2, [pc, #124]	@ (80032d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1c      	ldr	r2, [pc, #112]	@ (80032dc <HAL_TIM_Base_Start_IT+0xe4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1b      	ldr	r2, [pc, #108]	@ (80032e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d115      	bne.n	80032a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b06      	cmp	r3, #6
 8003288:	d015      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0xbe>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003290:	d011      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	e008      	b.n	80032b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e000      	b.n	80032b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40013400 	.word	0x40013400
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40015000 	.word	0x40015000
 80032e4:	00010007 	.word	0x00010007

080032e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0202 	mvn.w	r2, #2
 800331c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f931 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f923 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f934 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0204 	mvn.w	r2, #4
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f90b 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8fd 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f90e 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0208 	mvn.w	r2, #8
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f8e5 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8d7 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8e8 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0210 	mvn.w	r2, #16
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8bf 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8b1 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f8c2 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0201 	mvn.w	r2, #1
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fad6 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d104      	bne.n	8003468 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00c      	beq.n	8003482 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f969 	bl	8003754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00c      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800349e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f961 	bl	8003768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f87c 	bl	80035c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f06f 0220 	mvn.w	r2, #32
 80034e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f929 	bl	8003740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f935 	bl	800377c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800352e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f92d 	bl	8003790 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00c      	beq.n	800355a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f925 	bl	80037a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f91d 	bl	80037b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <TIM_Base_SetConfig+0x144>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d017      	beq.n	8003620 <TIM_Base_SetConfig+0x48>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f6:	d013      	beq.n	8003620 <TIM_Base_SetConfig+0x48>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a49      	ldr	r2, [pc, #292]	@ (8003720 <TIM_Base_SetConfig+0x148>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00f      	beq.n	8003620 <TIM_Base_SetConfig+0x48>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a48      	ldr	r2, [pc, #288]	@ (8003724 <TIM_Base_SetConfig+0x14c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_Base_SetConfig+0x48>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <TIM_Base_SetConfig+0x150>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_Base_SetConfig+0x48>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a46      	ldr	r2, [pc, #280]	@ (800372c <TIM_Base_SetConfig+0x154>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_Base_SetConfig+0x48>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a45      	ldr	r2, [pc, #276]	@ (8003730 <TIM_Base_SetConfig+0x158>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d108      	bne.n	8003632 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a39      	ldr	r2, [pc, #228]	@ (800371c <TIM_Base_SetConfig+0x144>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d023      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003640:	d01f      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a36      	ldr	r2, [pc, #216]	@ (8003720 <TIM_Base_SetConfig+0x148>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01b      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a35      	ldr	r2, [pc, #212]	@ (8003724 <TIM_Base_SetConfig+0x14c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d017      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a34      	ldr	r2, [pc, #208]	@ (8003728 <TIM_Base_SetConfig+0x150>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a33      	ldr	r2, [pc, #204]	@ (800372c <TIM_Base_SetConfig+0x154>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <TIM_Base_SetConfig+0x15c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a32      	ldr	r2, [pc, #200]	@ (8003738 <TIM_Base_SetConfig+0x160>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a31      	ldr	r2, [pc, #196]	@ (800373c <TIM_Base_SetConfig+0x164>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0xaa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <TIM_Base_SetConfig+0x158>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a18      	ldr	r2, [pc, #96]	@ (800371c <TIM_Base_SetConfig+0x144>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <TIM_Base_SetConfig+0x110>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <TIM_Base_SetConfig+0x154>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x110>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003734 <TIM_Base_SetConfig+0x15c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x110>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <TIM_Base_SetConfig+0x160>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x110>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a18      	ldr	r2, [pc, #96]	@ (800373c <TIM_Base_SetConfig+0x164>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x110>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <TIM_Base_SetConfig+0x158>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f023 0201 	bic.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]
  }
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40013400 	.word	0x40013400
 8003730:	40015000 	.word	0x40015000
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800

08003740 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e042      	b.n	8003864 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fd f9cb 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2224      	movs	r2, #36	@ 0x24
 80037fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fbb2 	bl	8003f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8b3 	bl	8003988 <UART_SetConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e01b      	b.n	8003864 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800383a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800384a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fc31 	bl	80040c4 <UART_CheckIdleState>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003882:	2b20      	cmp	r3, #32
 8003884:	d17b      	bne.n	800397e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Transmit+0x26>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e074      	b.n	8003980 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2221      	movs	r2, #33	@ 0x21
 80038a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a6:	f7fd fb5d 	bl	8000f64 <HAL_GetTick>
 80038aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c4:	d108      	bne.n	80038d8 <HAL_UART_Transmit+0x6c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e003      	b.n	80038e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038e0:	e030      	b.n	8003944 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	@ 0x80
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fc93 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e03d      	b.n	8003980 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003918:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3302      	adds	r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e007      	b.n	8003932 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1c8      	bne.n	80038e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	2140      	movs	r1, #64	@ 0x40
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fc5c 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e006      	b.n	8003980 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800398c:	b08c      	sub	sp, #48	@ 0x30
 800398e:	af00      	add	r7, sp, #0
 8003990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4baa      	ldr	r3, [pc, #680]	@ (8003c60 <UART_SetConfig+0x2d8>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c64 <UART_SetConfig+0x2dc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f0:	4313      	orrs	r3, r2
 80039f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	f023 010f 	bic.w	r1, r3, #15
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a90      	ldr	r2, [pc, #576]	@ (8003c68 <UART_SetConfig+0x2e0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d125      	bne.n	8003a78 <UART_SetConfig+0xf0>
 8003a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d81a      	bhi.n	8003a70 <UART_SetConfig+0xe8>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <UART_SetConfig+0xb8>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e116      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e112      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e10e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e10a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e106      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c70 <UART_SetConfig+0x2e8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d138      	bne.n	8003af4 <UART_SetConfig+0x16c>
 8003a82:	4b7a      	ldr	r3, [pc, #488]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d82d      	bhi.n	8003aec <UART_SetConfig+0x164>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <UART_SetConfig+0x110>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003add 	.word	0x08003add
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003ad5 	.word	0x08003ad5
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003aed 	.word	0x08003aed
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad2:	e0d8      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ada:	e0d4      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae2:	e0d0      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e0cc      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e0c8      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c74 <UART_SetConfig+0x2ec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d125      	bne.n	8003b4a <UART_SetConfig+0x1c2>
 8003afe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b08:	2b30      	cmp	r3, #48	@ 0x30
 8003b0a:	d016      	beq.n	8003b3a <UART_SetConfig+0x1b2>
 8003b0c:	2b30      	cmp	r3, #48	@ 0x30
 8003b0e:	d818      	bhi.n	8003b42 <UART_SetConfig+0x1ba>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d00a      	beq.n	8003b2a <UART_SetConfig+0x1a2>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d814      	bhi.n	8003b42 <UART_SetConfig+0x1ba>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <UART_SetConfig+0x19a>
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d008      	beq.n	8003b32 <UART_SetConfig+0x1aa>
 8003b20:	e00f      	b.n	8003b42 <UART_SetConfig+0x1ba>
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b28:	e0ad      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b30:	e0a9      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b32:	2304      	movs	r3, #4
 8003b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b38:	e0a5      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b40:	e0a1      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b42:	2310      	movs	r3, #16
 8003b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b48:	e09d      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c78 <UART_SetConfig+0x2f0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d125      	bne.n	8003ba0 <UART_SetConfig+0x218>
 8003b54:	4b45      	ldr	r3, [pc, #276]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b60:	d016      	beq.n	8003b90 <UART_SetConfig+0x208>
 8003b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b64:	d818      	bhi.n	8003b98 <UART_SetConfig+0x210>
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d00a      	beq.n	8003b80 <UART_SetConfig+0x1f8>
 8003b6a:	2b80      	cmp	r3, #128	@ 0x80
 8003b6c:	d814      	bhi.n	8003b98 <UART_SetConfig+0x210>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <UART_SetConfig+0x1f0>
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d008      	beq.n	8003b88 <UART_SetConfig+0x200>
 8003b76:	e00f      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e082      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b86:	e07e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8e:	e07a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b90:	2308      	movs	r3, #8
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b96:	e076      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	e072      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a35      	ldr	r2, [pc, #212]	@ (8003c7c <UART_SetConfig+0x2f4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d12a      	bne.n	8003c00 <UART_SetConfig+0x278>
 8003baa:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb8:	d01a      	beq.n	8003bf0 <UART_SetConfig+0x268>
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bbe:	d81b      	bhi.n	8003bf8 <UART_SetConfig+0x270>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d00c      	beq.n	8003be0 <UART_SetConfig+0x258>
 8003bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bca:	d815      	bhi.n	8003bf8 <UART_SetConfig+0x270>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <UART_SetConfig+0x250>
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd4:	d008      	beq.n	8003be8 <UART_SetConfig+0x260>
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x270>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	e052      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be6:	e04e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003be8:	2304      	movs	r3, #4
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	e04a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e046      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e042      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a17      	ldr	r2, [pc, #92]	@ (8003c64 <UART_SetConfig+0x2dc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d13a      	bne.n	8003c80 <UART_SetConfig+0x2f8>
 8003c0a:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <UART_SetConfig+0x2e4>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c18:	d01a      	beq.n	8003c50 <UART_SetConfig+0x2c8>
 8003c1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c1e:	d81b      	bhi.n	8003c58 <UART_SetConfig+0x2d0>
 8003c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c24:	d00c      	beq.n	8003c40 <UART_SetConfig+0x2b8>
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c2a:	d815      	bhi.n	8003c58 <UART_SetConfig+0x2d0>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <UART_SetConfig+0x2b0>
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c34:	d008      	beq.n	8003c48 <UART_SetConfig+0x2c0>
 8003c36:	e00f      	b.n	8003c58 <UART_SetConfig+0x2d0>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c3e:	e022      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c40:	2302      	movs	r3, #2
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c46:	e01e      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4e:	e01a      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c50:	2308      	movs	r3, #8
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c56:	e016      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c58:	2310      	movs	r3, #16
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5e:	e012      	b.n	8003c86 <UART_SetConfig+0x2fe>
 8003c60:	cfff69f3 	.word	0xcfff69f3
 8003c64:	40008000 	.word	0x40008000
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4aae      	ldr	r2, [pc, #696]	@ (8003f44 <UART_SetConfig+0x5bc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	f040 8097 	bne.w	8003dc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d823      	bhi.n	8003ce2 <UART_SetConfig+0x35a>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <UART_SetConfig+0x318>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ce3 	.word	0x08003ce3
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ce3 	.word	0x08003ce3
 8003cb0:	08003cd3 	.word	0x08003cd3
 8003cb4:	08003ce3 	.word	0x08003ce3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003ce3 	.word	0x08003ce3
 8003cc0:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe ff44 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cca:	e010      	b.n	8003cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b9e      	ldr	r3, [pc, #632]	@ (8003f48 <UART_SetConfig+0x5c0>)
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cd0:	e00d      	b.n	8003cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe fecf 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8003cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cd8:	e009      	b.n	8003cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ce0:	e005      	b.n	8003cee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8130 	beq.w	8003f56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	4a94      	ldr	r2, [pc, #592]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d305      	bcc.n	8003d26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d903      	bls.n	8003d2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d2c:	e113      	b.n	8003f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	2200      	movs	r2, #0
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	60fa      	str	r2, [r7, #12]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	4a84      	ldr	r2, [pc, #528]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2200      	movs	r2, #0
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d50:	f7fc fab6 	bl	80002c0 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	020b      	lsls	r3, r1, #8
 8003d66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d6a:	0202      	lsls	r2, r0, #8
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	6849      	ldr	r1, [r1, #4]
 8003d70:	0849      	lsrs	r1, r1, #1
 8003d72:	2000      	movs	r0, #0
 8003d74:	460c      	mov	r4, r1
 8003d76:	4605      	mov	r5, r0
 8003d78:	eb12 0804 	adds.w	r8, r2, r4
 8003d7c:	eb43 0905 	adc.w	r9, r3, r5
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	469a      	mov	sl, r3
 8003d88:	4693      	mov	fp, r2
 8003d8a:	4652      	mov	r2, sl
 8003d8c:	465b      	mov	r3, fp
 8003d8e:	4640      	mov	r0, r8
 8003d90:	4649      	mov	r1, r9
 8003d92:	f7fc fa95 	bl	80002c0 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da4:	d308      	bcc.n	8003db8 <UART_SetConfig+0x430>
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dac:	d204      	bcs.n	8003db8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e0ce      	b.n	8003f56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dbe:	e0ca      	b.n	8003f56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc8:	d166      	bne.n	8003e98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d827      	bhi.n	8003e22 <UART_SetConfig+0x49a>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0x450>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e23 	.word	0x08003e23
 8003de8:	08003e13 	.word	0x08003e13
 8003dec:	08003e23 	.word	0x08003e23
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e23 	.word	0x08003e23
 8003df8:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe fea8 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8003e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e02:	e014      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7fe feba 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e0a:	e010      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f48 <UART_SetConfig+0x5c0>)
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e10:	e00d      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe fe2f 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8003e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e18:	e009      	b.n	8003e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e20:	e005      	b.n	8003e2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8090 	beq.w	8003f56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	4a44      	ldr	r2, [pc, #272]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e48:	005a      	lsls	r2, r3, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	441a      	add	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d916      	bls.n	8003e90 <UART_SetConfig+0x508>
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d212      	bcs.n	8003e90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	8bfa      	ldrh	r2, [r7, #30]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	e062      	b.n	8003f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e96:	e05e      	b.n	8003f56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d828      	bhi.n	8003ef2 <UART_SetConfig+0x56a>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <UART_SetConfig+0x520>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe fe40 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ed2:	e014      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe fe52 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8003ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eda:	e010      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <UART_SetConfig+0x5c0>)
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ee0:	e00d      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe fdc7 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8003ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ee8:	e009      	b.n	8003efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ef0:	e005      	b.n	8003efe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003efc:	bf00      	nop
    }

    if (pclk != 0U)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d028      	beq.n	8003f56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	4a10      	ldr	r2, [pc, #64]	@ (8003f4c <UART_SetConfig+0x5c4>)
 8003f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	d910      	bls.n	8003f50 <UART_SetConfig+0x5c8>
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f34:	d20c      	bcs.n	8003f50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	e009      	b.n	8003f56 <UART_SetConfig+0x5ce>
 8003f42:	bf00      	nop
 8003f44:	40008000 	.word	0x40008000
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	08008df4 	.word	0x08008df4
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3730      	adds	r7, #48	@ 0x30
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407e:	d10a      	bne.n	8004096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b098      	sub	sp, #96	@ 0x60
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d4:	f7fc ff46 	bl	8000f64 <HAL_GetTick>
 80040d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d12f      	bne.n	8004148 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f88e 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d022      	beq.n	8004148 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004116:	653b      	str	r3, [r7, #80]	@ 0x50
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004120:	647b      	str	r3, [r7, #68]	@ 0x44
 8004122:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e063      	b.n	8004210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d149      	bne.n	80041ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f857 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d03c      	beq.n	80041ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	623b      	str	r3, [r7, #32]
   return(result);
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004190:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e6      	bne.n	8004170 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c2:	61fa      	str	r2, [r7, #28]
 80041c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	617b      	str	r3, [r7, #20]
   return(result);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e012      	b.n	8004210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3758      	adds	r7, #88	@ 0x58
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004228:	e04f      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004230:	d04b      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fc fe97 	bl	8000f64 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <UART_WaitOnFlagUntilTimeout+0x30>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e04e      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d037      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b80      	cmp	r3, #128	@ 0x80
 800425e:	d034      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d031      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d110      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f838 	bl	80042f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e029      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a4:	d111      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f81e 	bl	80042f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e00f      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d0a0      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b095      	sub	sp, #84	@ 0x54
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004318:	643b      	str	r3, [r7, #64]	@ 0x40
 800431a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e6      	bne.n	80042fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	61fb      	str	r3, [r7, #28]
   return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004350:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e3      	bne.n	800432c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d118      	bne.n	800439e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	60bb      	str	r3, [r7, #8]
   return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e6      	bne.n	800436c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043b2:	bf00      	nop
 80043b4:	3754      	adds	r7, #84	@ 0x54
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e027      	b.n	8004424 <HAL_UARTEx_DisableFifoMode+0x66>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	@ 0x24
 80043e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004402:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e02d      	b.n	80044a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	@ 0x24
 8004454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f84f 	bl	8004528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e02d      	b.n	8004520 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2224      	movs	r2, #36	@ 0x24
 80044d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f811 	bl	8004528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004534:	2b00      	cmp	r3, #0
 8004536:	d108      	bne.n	800454a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004548:	e031      	b.n	80045ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800454a:	2308      	movs	r3, #8
 800454c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800454e:	2308      	movs	r3, #8
 8004550:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	0e5b      	lsrs	r3, r3, #25
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	0f5b      	lsrs	r3, r3, #29
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	7b3a      	ldrb	r2, [r7, #12]
 8004576:	4911      	ldr	r1, [pc, #68]	@ (80045bc <UARTEx_SetNbDataToProcess+0x94>)
 8004578:	5c8a      	ldrb	r2, [r1, r2]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800457e:	7b3a      	ldrb	r2, [r7, #12]
 8004580:	490f      	ldr	r1, [pc, #60]	@ (80045c0 <UARTEx_SetNbDataToProcess+0x98>)
 8004582:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004584:	fb93 f3f2 	sdiv	r3, r3, r2
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	7b7a      	ldrb	r2, [r7, #13]
 8004594:	4909      	ldr	r1, [pc, #36]	@ (80045bc <UARTEx_SetNbDataToProcess+0x94>)
 8004596:	5c8a      	ldrb	r2, [r1, r2]
 8004598:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800459c:	7b7a      	ldrb	r2, [r7, #13]
 800459e:	4908      	ldr	r1, [pc, #32]	@ (80045c0 <UARTEx_SetNbDataToProcess+0x98>)
 80045a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	08008e0c 	.word	0x08008e0c
 80045c0:	08008e14 	.word	0x08008e14

080045c4 <__NVIC_SetPriority>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	6039      	str	r1, [r7, #0]
 80045ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	db0a      	blt.n	80045ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	490c      	ldr	r1, [pc, #48]	@ (8004610 <__NVIC_SetPriority+0x4c>)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	0112      	lsls	r2, r2, #4
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	440b      	add	r3, r1
 80045e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045ec:	e00a      	b.n	8004604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	4908      	ldr	r1, [pc, #32]	@ (8004614 <__NVIC_SetPriority+0x50>)
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	3b04      	subs	r3, #4
 80045fc:	0112      	lsls	r2, r2, #4
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	440b      	add	r3, r1
 8004602:	761a      	strb	r2, [r3, #24]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	e000e100 	.word	0xe000e100
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <SysTick_Handler+0x1c>)
 800461e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004620:	f002 fa4a 	bl	8006ab8 <xTaskGetSchedulerState>
 8004624:	4603      	mov	r3, r0
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800462a:	f003 f945 	bl	80078b8 <xPortSysTickHandler>
  }
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000e010 	.word	0xe000e010

08004638 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800463c:	2100      	movs	r1, #0
 800463e:	f06f 0004 	mvn.w	r0, #4
 8004642:	f7ff ffbf 	bl	80045c4 <__NVIC_SetPriority>
#endif
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004652:	f3ef 8305 	mrs	r3, IPSR
 8004656:	603b      	str	r3, [r7, #0]
  return(result);
 8004658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800465e:	f06f 0305 	mvn.w	r3, #5
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	e00c      	b.n	8004680 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004666:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <osKernelInitialize+0x44>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <osKernelInitialize+0x44>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004674:	2300      	movs	r3, #0
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e002      	b.n	8004680 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800467e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004680:	687b      	ldr	r3, [r7, #4]
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	200001e0 	.word	0x200001e0

08004694 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469a:	f3ef 8305 	mrs	r3, IPSR
 800469e:	603b      	str	r3, [r7, #0]
  return(result);
 80046a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80046a6:	f06f 0305 	mvn.w	r3, #5
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	e010      	b.n	80046d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <osKernelStart+0x48>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d109      	bne.n	80046ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046b6:	f7ff ffbf 	bl	8004638 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046ba:	4b08      	ldr	r3, [pc, #32]	@ (80046dc <osKernelStart+0x48>)
 80046bc:	2202      	movs	r2, #2
 80046be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046c0:	f001 fdac 	bl	800621c <vTaskStartScheduler>
      stat = osOK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	e002      	b.n	80046d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046d0:	687b      	ldr	r3, [r7, #4]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200001e0 	.word	0x200001e0

080046e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	@ 0x38
 80046e4:	af04      	add	r7, sp, #16
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f0:	f3ef 8305 	mrs	r3, IPSR
 80046f4:	617b      	str	r3, [r7, #20]
  return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d17e      	bne.n	80047fa <osThreadNew+0x11a>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d07b      	beq.n	80047fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004706:	2318      	movs	r3, #24
 8004708:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004712:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d045      	beq.n	80047a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <osThreadNew+0x48>
        name = attr->name;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <osThreadNew+0x6e>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b38      	cmp	r3, #56	@ 0x38
 8004740:	d805      	bhi.n	800474e <osThreadNew+0x6e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <osThreadNew+0x72>
        return (NULL);
 800474e:	2300      	movs	r3, #0
 8004750:	e054      	b.n	80047fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00e      	beq.n	8004788 <osThreadNew+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004770:	d90a      	bls.n	8004788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <osThreadNew+0xa8>
        mem = 1;
 8004782:	2301      	movs	r3, #1
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e010      	b.n	80047aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10c      	bne.n	80047aa <osThreadNew+0xca>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <osThreadNew+0xca>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <osThreadNew+0xca>
          mem = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e001      	b.n	80047aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d110      	bne.n	80047d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b8:	9202      	str	r2, [sp, #8]
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f001 fb82 	bl	8005ed0 <xTaskCreateStatic>
 80047cc:	4603      	mov	r3, r0
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e013      	b.n	80047fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d110      	bne.n	80047fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f001 fbd0 	bl	8005f90 <xTaskCreate>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d001      	beq.n	80047fa <osThreadNew+0x11a>
            hTask = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047fa:	693b      	ldr	r3, [r7, #16]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	@ 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	@ 0x28
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004814:	f3ef 8305 	mrs	r3, IPSR
 8004818:	613b      	str	r3, [r7, #16]
  return(result);
 800481a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800481c:	2b00      	cmp	r3, #0
 800481e:	d175      	bne.n	800490c <osSemaphoreNew+0x108>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d072      	beq.n	800490c <osSemaphoreNew+0x108>
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	429a      	cmp	r2, r3
 800482c:	d86e      	bhi.n	800490c <osSemaphoreNew+0x108>
    mem = -1;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d015      	beq.n	8004866 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <osSemaphoreNew+0x4c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b4f      	cmp	r3, #79	@ 0x4f
 8004848:	d902      	bls.n	8004850 <osSemaphoreNew+0x4c>
        mem = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e00c      	b.n	800486a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <osSemaphoreNew+0x66>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <osSemaphoreNew+0x66>
          mem = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e001      	b.n	800486a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004870:	d04c      	beq.n	800490c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d128      	bne.n	80048ca <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10a      	bne.n	8004894 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2203      	movs	r2, #3
 8004884:	9200      	str	r2, [sp, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	2001      	movs	r0, #1
 800488c:	f000 fb5e 	bl	8004f4c <xQueueGenericCreateStatic>
 8004890:	61f8      	str	r0, [r7, #28]
 8004892:	e005      	b.n	80048a0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004894:	2203      	movs	r2, #3
 8004896:	2100      	movs	r1, #0
 8004898:	2001      	movs	r0, #1
 800489a:	f000 fbd4 	bl	8005046 <xQueueGenericCreate>
 800489e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d022      	beq.n	80048ec <osSemaphoreNew+0xe8>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01f      	beq.n	80048ec <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048ac:	2300      	movs	r3, #0
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	69f8      	ldr	r0, [r7, #28]
 80048b4:	f000 fc94 	bl	80051e0 <xQueueGenericSend>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d016      	beq.n	80048ec <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80048be:	69f8      	ldr	r0, [r7, #28]
 80048c0:	f001 f932 	bl	8005b28 <vQueueDelete>
            hSemaphore = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e010      	b.n	80048ec <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d108      	bne.n	80048e2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fc12 	bl	8005102 <xQueueCreateCountingSemaphoreStatic>
 80048de:	61f8      	str	r0, [r7, #28]
 80048e0:	e004      	b.n	80048ec <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fc45 	bl	8005174 <xQueueCreateCountingSemaphore>
 80048ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <osSemaphoreNew+0xfc>
          name = attr->name;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e001      	b.n	8004904 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004904:	6979      	ldr	r1, [r7, #20]
 8004906:	69f8      	ldr	r0, [r7, #28]
 8004908:	f001 fa5a 	bl	8005dc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800490c:	69fb      	ldr	r3, [r7, #28]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004930:	f06f 0303 	mvn.w	r3, #3
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e039      	b.n	80049ac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004938:	f3ef 8305 	mrs	r3, IPSR
 800493c:	60fb      	str	r3, [r7, #12]
  return(result);
 800493e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004940:	2b00      	cmp	r3, #0
 8004942:	d022      	beq.n	800498a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800494a:	f06f 0303 	mvn.w	r3, #3
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e02c      	b.n	80049ac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	461a      	mov	r2, r3
 800495c:	2100      	movs	r1, #0
 800495e:	6938      	ldr	r0, [r7, #16]
 8004960:	f001 f860 	bl	8005a24 <xQueueReceiveFromISR>
 8004964:	4603      	mov	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d003      	beq.n	8004972 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800496a:	f06f 0302 	mvn.w	r3, #2
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e01c      	b.n	80049ac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d019      	beq.n	80049ac <osSemaphoreAcquire+0x94>
 8004978:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <osSemaphoreAcquire+0xa0>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	e010      	b.n	80049ac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6938      	ldr	r0, [r7, #16]
 800498e:	f000 ff39 	bl	8005804 <xQueueSemaphoreTake>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d009      	beq.n	80049ac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800499e:	f06f 0301 	mvn.w	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e002      	b.n	80049ac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80049a6:	f06f 0302 	mvn.w	r3, #2
 80049aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80049ac:	697b      	ldr	r3, [r7, #20]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80049d2:	f06f 0303 	mvn.w	r3, #3
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e02c      	b.n	8004a34 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049da:	f3ef 8305 	mrs	r3, IPSR
 80049de:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01a      	beq.n	8004a1c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80049ea:	f107 0308 	add.w	r3, r7, #8
 80049ee:	4619      	mov	r1, r3
 80049f0:	6938      	ldr	r0, [r7, #16]
 80049f2:	f000 fd95 	bl	8005520 <xQueueGiveFromISR>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d003      	beq.n	8004a04 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80049fc:	f06f 0302 	mvn.w	r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e017      	b.n	8004a34 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d014      	beq.n	8004a34 <osSemaphoreRelease+0x78>
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <osSemaphoreRelease+0x84>)
 8004a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	e00b      	b.n	8004a34 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f000 fbdc 	bl	80051e0 <xQueueGenericSend>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d002      	beq.n	8004a34 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004a2e:	f06f 0302 	mvn.w	r3, #2
 8004a32:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	@ 0x28
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a54:	f3ef 8305 	mrs	r3, IPSR
 8004a58:	613b      	str	r3, [r7, #16]
  return(result);
 8004a5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d15f      	bne.n	8004b20 <osMessageQueueNew+0xdc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05c      	beq.n	8004b20 <osMessageQueueNew+0xdc>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d059      	beq.n	8004b20 <osMessageQueueNew+0xdc>
    mem = -1;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d029      	beq.n	8004acc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <osMessageQueueNew+0x62>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a86:	d90e      	bls.n	8004aa6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <osMessageQueueNew+0x62>
        mem = 1;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e014      	b.n	8004ad0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d110      	bne.n	8004ad0 <osMessageQueueNew+0x8c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <osMessageQueueNew+0x8c>
          mem = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	e001      	b.n	8004ad0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10b      	bne.n	8004aee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	9100      	str	r1, [sp, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fa31 	bl	8004f4c <xQueueGenericCreateStatic>
 8004aea:	61f8      	str	r0, [r7, #28]
 8004aec:	e008      	b.n	8004b00 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004af4:	2200      	movs	r2, #0
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 faa4 	bl	8005046 <xQueueGenericCreate>
 8004afe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e001      	b.n	8004b18 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	69f8      	ldr	r0, [r7, #28]
 8004b1c:	f001 f950 	bl	8005dc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b20:	69fb      	ldr	r3, [r7, #28]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b44:	f3ef 8305 	mrs	r3, IPSR
 8004b48:	617b      	str	r3, [r7, #20]
  return(result);
 8004b4a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d028      	beq.n	8004ba2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <osMessageQueuePut+0x36>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <osMessageQueuePut+0x36>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004b62:	f06f 0303 	mvn.w	r3, #3
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e038      	b.n	8004bdc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004b6e:	f107 0210 	add.w	r2, r7, #16
 8004b72:	2300      	movs	r3, #0
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	f000 fc34 	bl	80053e4 <xQueueGenericSendFromISR>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d003      	beq.n	8004b8a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004b82:	f06f 0302 	mvn.w	r3, #2
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e028      	b.n	8004bdc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d025      	beq.n	8004bdc <osMessageQueuePut+0xb0>
 8004b90:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <osMessageQueuePut+0xbc>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	e01c      	b.n	8004bdc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <osMessageQueuePut+0x82>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004bae:	f06f 0303 	mvn.w	r3, #3
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e012      	b.n	8004bdc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	69b8      	ldr	r0, [r7, #24]
 8004bbe:	f000 fb0f 	bl	80051e0 <xQueueGenericSend>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d009      	beq.n	8004bdc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004bce:	f06f 0301 	mvn.w	r3, #1
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	e002      	b.n	8004bdc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004bd6:	f06f 0302 	mvn.w	r3, #2
 8004bda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c02:	f3ef 8305 	mrs	r3, IPSR
 8004c06:	617b      	str	r3, [r7, #20]
  return(result);
 8004c08:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d028      	beq.n	8004c60 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <osMessageQueueGet+0x34>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <osMessageQueueGet+0x34>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004c20:	f06f 0303 	mvn.w	r3, #3
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e037      	b.n	8004c98 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	461a      	mov	r2, r3
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	69b8      	ldr	r0, [r7, #24]
 8004c36:	f000 fef5 	bl	8005a24 <xQueueReceiveFromISR>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d003      	beq.n	8004c48 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004c40:	f06f 0302 	mvn.w	r3, #2
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e027      	b.n	8004c98 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d024      	beq.n	8004c98 <osMessageQueueGet+0xac>
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <osMessageQueueGet+0xb8>)
 8004c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	e01b      	b.n	8004c98 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <osMessageQueueGet+0x80>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004c6c:	f06f 0303 	mvn.w	r3, #3
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e011      	b.n	8004c98 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	69b8      	ldr	r0, [r7, #24]
 8004c7a:	f000 fce1 	bl	8005640 <xQueueReceive>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d009      	beq.n	8004c98 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004c8a:	f06f 0301 	mvn.w	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	e002      	b.n	8004c98 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004c92:	f06f 0302 	mvn.w	r3, #2
 8004c96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c98:	69fb      	ldr	r3, [r7, #28]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a07      	ldr	r2, [pc, #28]	@ (8004cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4a06      	ldr	r2, [pc, #24]	@ (8004cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8004cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2280      	movs	r2, #128	@ 0x80
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	200001e4 	.word	0x200001e4
 8004cd8:	20000240 	.word	0x20000240

08004cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a07      	ldr	r2, [pc, #28]	@ (8004d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8004cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4a06      	ldr	r2, [pc, #24]	@ (8004d0c <vApplicationGetTimerTaskMemory+0x30>)
 8004cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	20000440 	.word	0x20000440
 8004d0c:	2000049c 	.word	0x2000049c

08004d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f103 0208 	add.w	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f103 0208 	add.w	r2, r3, #8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f103 0208 	add.w	r2, r3, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dc8:	d103      	bne.n	8004dd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e00c      	b.n	8004dec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e002      	b.n	8004de0 <vListInsert+0x2e>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d2f6      	bcs.n	8004dda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	601a      	str	r2, [r3, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6892      	ldr	r2, [r2, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6852      	ldr	r2, [r2, #4]
 8004e44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d103      	bne.n	8004e58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1e5a      	subs	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ea4:	f002 fc78 	bl	8007798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	441a      	add	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	441a      	add	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	22ff      	movs	r2, #255	@ 0xff
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	22ff      	movs	r2, #255	@ 0xff
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d114      	bne.n	8004f24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01a      	beq.n	8004f38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3310      	adds	r3, #16
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fc16 	bl	8006738 <xTaskRemoveFromEventList>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d012      	beq.n	8004f38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <xQueueGenericReset+0xd0>)
 8004f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	e009      	b.n	8004f38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3310      	adds	r3, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fef1 	bl	8004d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3324      	adds	r3, #36	@ 0x24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff feec 	bl	8004d10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f38:	f002 fc60 	bl	80077fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f3c:	2301      	movs	r3, #1
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08e      	sub	sp, #56	@ 0x38
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <xQueueGenericCreateStatic+0x56>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <xQueueGenericCreateStatic+0x5a>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <xQueueGenericCreateStatic+0x5c>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	623b      	str	r3, [r7, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <xQueueGenericCreateStatic+0x84>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <xQueueGenericCreateStatic+0x88>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <xQueueGenericCreateStatic+0x8a>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	61fb      	str	r3, [r7, #28]
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	e7fd      	b.n	8004fee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ff2:	2350      	movs	r3, #80	@ 0x50
 8004ff4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b50      	cmp	r3, #80	@ 0x50
 8004ffa:	d00b      	beq.n	8005014 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	61bb      	str	r3, [r7, #24]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005014:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800501a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005028:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800502c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f840 	bl	80050bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800503c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800503e:	4618      	mov	r0, r3
 8005040:	3730      	adds	r7, #48	@ 0x30
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005046:	b580      	push	{r7, lr}
 8005048:	b08a      	sub	sp, #40	@ 0x28
 800504a:	af02      	add	r7, sp, #8
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	4613      	mov	r3, r2
 8005052:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <xQueueGenericCreate+0x2c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	613b      	str	r3, [r7, #16]
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	e7fd      	b.n	800506e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3350      	adds	r3, #80	@ 0x50
 8005080:	4618      	mov	r0, r3
 8005082:	f002 fcab 	bl	80079dc <pvPortMalloc>
 8005086:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d011      	beq.n	80050b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	3350      	adds	r3, #80	@ 0x50
 8005096:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050a0:	79fa      	ldrb	r2, [r7, #7]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4613      	mov	r3, r2
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f805 	bl	80050bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050b2:	69bb      	ldr	r3, [r7, #24]
	}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e002      	b.n	80050de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050ea:	2101      	movs	r1, #1
 80050ec:	69b8      	ldr	r0, [r7, #24]
 80050ee:	f7ff fec3 	bl	8004e78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005102:	b580      	push	{r7, lr}
 8005104:	b08a      	sub	sp, #40	@ 0x28
 8005106:	af02      	add	r7, sp, #8
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	61bb      	str	r3, [r7, #24]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d90b      	bls.n	800514c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	617b      	str	r3, [r7, #20]
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	e7fd      	b.n	8005148 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800514c:	2302      	movs	r3, #2
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff fef8 	bl	8004f4c <xQueueGenericCreateStatic>
 800515c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800516a:	69fb      	ldr	r3, [r7, #28]
	}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10b      	bne.n	800519c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	613b      	str	r3, [r7, #16]
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d90b      	bls.n	80051bc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80051bc:	2202      	movs	r2, #2
 80051be:	2100      	movs	r1, #0
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff ff40 	bl	8005046 <xQueueGenericCreate>
 80051c6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051d4:	697b      	ldr	r3, [r7, #20]
	}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	@ 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <xQueueGenericSend+0x34>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <xQueueGenericSend+0x42>
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <xQueueGenericSend+0x46>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <xQueueGenericSend+0x48>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <xQueueGenericSend+0x64>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d103      	bne.n	8005252 <xQueueGenericSend+0x72>
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <xQueueGenericSend+0x76>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <xQueueGenericSend+0x78>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <xQueueGenericSend+0x94>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	623b      	str	r3, [r7, #32]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005274:	f001 fc20 	bl	8006ab8 <xTaskGetSchedulerState>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <xQueueGenericSend+0xa4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <xQueueGenericSend+0xa8>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <xQueueGenericSend+0xaa>
 8005288:	2300      	movs	r3, #0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	61fb      	str	r3, [r7, #28]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052a6:	f002 fa77 	bl	8007798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <xQueueGenericSend+0xdc>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d129      	bne.n	8005310 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052c2:	f000 fc6d 	bl	8005ba0 <prvCopyDataToQueue>
 80052c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d010      	beq.n	80052f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	3324      	adds	r3, #36	@ 0x24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fa2f 	bl	8006738 <xTaskRemoveFromEventList>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052e0:	4b3f      	ldr	r3, [pc, #252]	@ (80053e0 <xQueueGenericSend+0x200>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	e00a      	b.n	8005308 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052f8:	4b39      	ldr	r3, [pc, #228]	@ (80053e0 <xQueueGenericSend+0x200>)
 80052fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005308:	f002 fa78 	bl	80077fc <vPortExitCritical>
				return pdPASS;
 800530c:	2301      	movs	r3, #1
 800530e:	e063      	b.n	80053d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005316:	f002 fa71 	bl	80077fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800531a:	2300      	movs	r3, #0
 800531c:	e05c      	b.n	80053d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fa69 	bl	8006800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800532e:	2301      	movs	r3, #1
 8005330:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005332:	f002 fa63 	bl	80077fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005336:	f000 ffd9 	bl	80062ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800533a:	f002 fa2d 	bl	8007798 <vPortEnterCritical>
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005344:	b25b      	sxtb	r3, r3
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534a:	d103      	bne.n	8005354 <xQueueGenericSend+0x174>
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800535a:	b25b      	sxtb	r3, r3
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005360:	d103      	bne.n	800536a <xQueueGenericSend+0x18a>
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800536a:	f002 fa47 	bl	80077fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800536e:	1d3a      	adds	r2, r7, #4
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fa58 	bl	800682c <xTaskCheckForTimeOut>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d124      	bne.n	80053cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005384:	f000 fd04 	bl	8005d90 <prvIsQueueFull>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d018      	beq.n	80053c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	3310      	adds	r3, #16
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f97c 	bl	8006694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800539c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800539e:	f000 fc8f 	bl	8005cc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053a2:	f000 ffb1 	bl	8006308 <xTaskResumeAll>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f af7c 	bne.w	80052a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80053ae:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <xQueueGenericSend+0x200>)
 80053b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	e772      	b.n	80052a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053c2:	f000 fc7d 	bl	8005cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053c6:	f000 ff9f 	bl	8006308 <xTaskResumeAll>
 80053ca:	e76c      	b.n	80052a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053ce:	f000 fc77 	bl	8005cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053d2:	f000 ff99 	bl	8006308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3738      	adds	r7, #56	@ 0x38
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b090      	sub	sp, #64	@ 0x40
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <xQueueGenericSendFromISR+0x3e>
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <xQueueGenericSendFromISR+0x42>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <xQueueGenericSendFromISR+0x44>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d103      	bne.n	8005452 <xQueueGenericSendFromISR+0x6e>
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <xQueueGenericSendFromISR+0x72>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <xQueueGenericSendFromISR+0x74>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	623b      	str	r3, [r7, #32]
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005474:	f002 fa70 	bl	8007958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005478:	f3ef 8211 	mrs	r2, BASEPRI
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61fa      	str	r2, [r7, #28]
 800548e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005490:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <xQueueGenericSendFromISR+0xc2>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d12f      	bne.n	8005506 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80054bc:	f000 fb70 	bl	8005ba0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054c8:	d112      	bne.n	80054f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d016      	beq.n	8005500 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	3324      	adds	r3, #36	@ 0x24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 f92e 	bl	8006738 <xTaskRemoveFromEventList>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00e      	beq.n	8005500 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00b      	beq.n	8005500 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e007      	b.n	8005500 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054f4:	3301      	adds	r3, #1
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	b25a      	sxtb	r2, r3
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005500:	2301      	movs	r3, #1
 8005502:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005504:	e001      	b.n	800550a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005506:	2300      	movs	r3, #0
 8005508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800550a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005514:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005518:	4618      	mov	r0, r3
 800551a:	3740      	adds	r7, #64	@ 0x40
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	@ 0x38
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	623b      	str	r3, [r7, #32]
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61fb      	str	r3, [r7, #28]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <xQueueGiveFromISR+0x5c>
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <xQueueGiveFromISR+0x60>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <xQueueGiveFromISR+0x62>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	61bb      	str	r3, [r7, #24]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800559e:	f002 f9db 	bl	8007958 <vPortValidateInterruptPriority>
	__asm volatile
 80055a2:	f3ef 8211 	mrs	r2, BASEPRI
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	617a      	str	r2, [r7, #20]
 80055b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80055ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d22b      	bcs.n	8005626 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055e8:	d112      	bne.n	8005610 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	3324      	adds	r3, #36	@ 0x24
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f89e 	bl	8006738 <xTaskRemoveFromEventList>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e007      	b.n	8005620 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005614:	3301      	adds	r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	b25a      	sxtb	r2, r3
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005620:	2301      	movs	r3, #1
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
 8005624:	e001      	b.n	800562a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f383 8811 	msr	BASEPRI, r3
}
 8005634:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005638:	4618      	mov	r0, r3
 800563a:	3738      	adds	r7, #56	@ 0x38
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08c      	sub	sp, #48	@ 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <xQueueReceive+0x32>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	623b      	str	r3, [r7, #32]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <xQueueReceive+0x40>
 8005678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <xQueueReceive+0x44>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <xQueueReceive+0x46>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <xQueueReceive+0x62>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	61fb      	str	r3, [r7, #28]
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	e7fd      	b.n	800569e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a2:	f001 fa09 	bl	8006ab8 <xTaskGetSchedulerState>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueReceive+0x72>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueReceive+0x76>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueReceive+0x78>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xQueueReceive+0x94>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61bb      	str	r3, [r7, #24]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056d4:	f002 f860 	bl	8007798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01f      	beq.n	8005724 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056e8:	f000 fac4 	bl	8005c74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00f      	beq.n	800571c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	3310      	adds	r3, #16
 8005700:	4618      	mov	r0, r3
 8005702:	f001 f819 	bl	8006738 <xTaskRemoveFromEventList>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b3c      	ldr	r3, [pc, #240]	@ (8005800 <xQueueReceive+0x1c0>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800571c:	f002 f86e 	bl	80077fc <vPortExitCritical>
				return pdPASS;
 8005720:	2301      	movs	r3, #1
 8005722:	e069      	b.n	80057f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800572a:	f002 f867 	bl	80077fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800572e:	2300      	movs	r3, #0
 8005730:	e062      	b.n	80057f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f85f 	bl	8006800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005746:	f002 f859 	bl	80077fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800574a:	f000 fdcf 	bl	80062ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800574e:	f002 f823 	bl	8007798 <vPortEnterCritical>
 8005752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800575e:	d103      	bne.n	8005768 <xQueueReceive+0x128>
 8005760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800576e:	b25b      	sxtb	r3, r3
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005774:	d103      	bne.n	800577e <xQueueReceive+0x13e>
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800577e:	f002 f83d 	bl	80077fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005782:	1d3a      	adds	r2, r7, #4
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f001 f84e 	bl	800682c <xTaskCheckForTimeOut>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d123      	bne.n	80057de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005798:	f000 fae4 	bl	8005d64 <prvIsQueueEmpty>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d017      	beq.n	80057d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	3324      	adds	r3, #36	@ 0x24
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 ff72 	bl	8006694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057b2:	f000 fa85 	bl	8005cc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057b6:	f000 fda7 	bl	8006308 <xTaskResumeAll>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d189      	bne.n	80056d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80057c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <xQueueReceive+0x1c0>)
 80057c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	e780      	b.n	80056d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057d4:	f000 fa74 	bl	8005cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057d8:	f000 fd96 	bl	8006308 <xTaskResumeAll>
 80057dc:	e77a      	b.n	80056d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e0:	f000 fa6e 	bl	8005cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057e4:	f000 fd90 	bl	8006308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057ea:	f000 fabb 	bl	8005d64 <prvIsQueueEmpty>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f43f af6f 	beq.w	80056d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3730      	adds	r7, #48	@ 0x30
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08e      	sub	sp, #56	@ 0x38
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	623b      	str	r3, [r7, #32]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	61fb      	str	r3, [r7, #28]
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005858:	f001 f92e 	bl	8006ab8 <xTaskGetSchedulerState>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <xQueueSemaphoreTake+0x64>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <xQueueSemaphoreTake+0x68>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <xQueueSemaphoreTake+0x6a>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	61bb      	str	r3, [r7, #24]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800588a:	f001 ff85 	bl	8007798 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d024      	beq.n	80058e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	1e5a      	subs	r2, r3, #1
 800589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80058aa:	f001 fa7f 	bl	8006dac <pvTaskIncrementMutexHeldCount>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00f      	beq.n	80058dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058be:	3310      	adds	r3, #16
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 ff39 	bl	8006738 <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058cc:	4b54      	ldr	r3, [pc, #336]	@ (8005a20 <xQueueSemaphoreTake+0x21c>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058dc:	f001 ff8e 	bl	80077fc <vPortExitCritical>
				return pdPASS;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e098      	b.n	8005a16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d112      	bne.n	8005910 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	617b      	str	r3, [r7, #20]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005908:	f001 ff78 	bl	80077fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800590c:	2300      	movs	r3, #0
 800590e:	e082      	b.n	8005a16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005916:	f107 030c 	add.w	r3, r7, #12
 800591a:	4618      	mov	r0, r3
 800591c:	f000 ff70 	bl	8006800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005924:	f001 ff6a 	bl	80077fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005928:	f000 fce0 	bl	80062ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592c:	f001 ff34 	bl	8007798 <vPortEnterCritical>
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005936:	b25b      	sxtb	r3, r3
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800593c:	d103      	bne.n	8005946 <xQueueSemaphoreTake+0x142>
 800593e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800594c:	b25b      	sxtb	r3, r3
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005952:	d103      	bne.n	800595c <xQueueSemaphoreTake+0x158>
 8005954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800595c:	f001 ff4e 	bl	80077fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005960:	463a      	mov	r2, r7
 8005962:	f107 030c 	add.w	r3, r7, #12
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ff5f 	bl	800682c <xTaskCheckForTimeOut>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d132      	bne.n	80059da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005976:	f000 f9f5 	bl	8005d64 <prvIsQueueEmpty>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d026      	beq.n	80059ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005988:	f001 ff06 	bl	8007798 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800598c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f8af 	bl	8006af4 <xTaskPriorityInherit>
 8005996:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005998:	f001 ff30 	bl	80077fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800599c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599e:	3324      	adds	r3, #36	@ 0x24
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fe75 	bl	8006694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059ac:	f000 f988 	bl	8005cc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059b0:	f000 fcaa 	bl	8006308 <xTaskResumeAll>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f47f af67 	bne.w	800588a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80059bc:	4b18      	ldr	r3, [pc, #96]	@ (8005a20 <xQueueSemaphoreTake+0x21c>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	e75d      	b.n	800588a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80059ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059d0:	f000 f976 	bl	8005cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059d4:	f000 fc98 	bl	8006308 <xTaskResumeAll>
 80059d8:	e757      	b.n	800588a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80059da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059dc:	f000 f970 	bl	8005cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059e0:	f000 fc92 	bl	8006308 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059e6:	f000 f9bd 	bl	8005d64 <prvIsQueueEmpty>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f43f af4c 	beq.w	800588a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00d      	beq.n	8005a14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80059f8:	f001 fece 	bl	8007798 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059fe:	f000 f8b7 	bl	8005b70 <prvGetDisinheritPriorityAfterTimeout>
 8005a02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 f94a 	bl	8006ca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a10:	f001 fef4 	bl	80077fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3738      	adds	r7, #56	@ 0x38
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	@ 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	623b      	str	r3, [r7, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <xQueueReceiveFromISR+0x3c>
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <xQueueReceiveFromISR+0x40>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <xQueueReceiveFromISR+0x42>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	61fb      	str	r3, [r7, #28]
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	e7fd      	b.n	8005a7e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a82:	f001 ff69 	bl	8007958 <vPortValidateInterruptPriority>
	__asm volatile
 8005a86:	f3ef 8211 	mrs	r2, BASEPRI
 8005a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	61ba      	str	r2, [r7, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02f      	beq.n	8005b0e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005abc:	f000 f8da 	bl	8005c74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac2:	1e5a      	subs	r2, r3, #1
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad0:	d112      	bne.n	8005af8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	3310      	adds	r3, #16
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fe2a 	bl	8006738 <xTaskRemoveFromEventList>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e007      	b.n	8005b08 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005afc:	3301      	adds	r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	b25a      	sxtb	r2, r3
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b0c:	e001      	b.n	8005b12 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f383 8811 	msr	BASEPRI, r3
}
 8005b1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3738      	adds	r7, #56	@ 0x38
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <vQueueDelete+0x2a>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	60bb      	str	r3, [r7, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f95e 	bl	8005e14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f002 f808 	bl	8007b78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e001      	b.n	8005b92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b92:	68fb      	ldr	r3, [r7, #12]
	}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d14d      	bne.n	8005c62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fffa 	bl	8006bc4 <xTaskPriorityDisinherit>
 8005bd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	e043      	b.n	8005c62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d119      	bne.n	8005c14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6858      	ldr	r0, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	461a      	mov	r2, r3
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	f002 fb69 	bl	80082c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	441a      	add	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d32b      	bcc.n	8005c62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	e026      	b.n	8005c62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68d8      	ldr	r0, [r3, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	f002 fb4f 	bl	80082c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d207      	bcs.n	8005c50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	425b      	negs	r3, r3
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d105      	bne.n	8005c62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c6a:	697b      	ldr	r3, [r7, #20]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d018      	beq.n	8005cb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d303      	bcc.n	8005ca8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68d9      	ldr	r1, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6838      	ldr	r0, [r7, #0]
 8005cb4:	f002 fb05 	bl	80082c2 <memcpy>
	}
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cc8:	f001 fd66 	bl	8007798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd4:	e011      	b.n	8005cfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d012      	beq.n	8005d04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3324      	adds	r3, #36	@ 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fd28 	bl	8006738 <xTaskRemoveFromEventList>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cee:	f000 fe01 	bl	80068f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dce9      	bgt.n	8005cd6 <prvUnlockQueue+0x16>
 8005d02:	e000      	b.n	8005d06 <prvUnlockQueue+0x46>
					break;
 8005d04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	22ff      	movs	r2, #255	@ 0xff
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d0e:	f001 fd75 	bl	80077fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d12:	f001 fd41 	bl	8007798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d1e:	e011      	b.n	8005d44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3310      	adds	r3, #16
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fd03 	bl	8006738 <xTaskRemoveFromEventList>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d38:	f000 fddc 	bl	80068f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dce9      	bgt.n	8005d20 <prvUnlockQueue+0x60>
 8005d4c:	e000      	b.n	8005d50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d58:	f001 fd50 	bl	80077fc <vPortExitCritical>
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d6c:	f001 fd14 	bl	8007798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e001      	b.n	8005d82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 fd3b 	bl	80077fc <vPortExitCritical>

	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d98:	f001 fcfe 	bl	8007798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d102      	bne.n	8005dae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e001      	b.n	8005db2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db2:	f001 fd23 	bl	80077fc <vPortExitCritical>

	return xReturn;
 8005db6:	68fb      	ldr	r3, [r7, #12]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	e014      	b.n	8005dfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8005e10 <vQueueAddToRegistry+0x50>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ddc:	490c      	ldr	r1, [pc, #48]	@ (8005e10 <vQueueAddToRegistry+0x50>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005de6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e10 <vQueueAddToRegistry+0x50>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4413      	add	r3, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005df2:	e006      	b.n	8005e02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b07      	cmp	r3, #7
 8005dfe:	d9e7      	bls.n	8005dd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	2000089c 	.word	0x2000089c

08005e14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e016      	b.n	8005e50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e22:	4a10      	ldr	r2, [pc, #64]	@ (8005e64 <vQueueUnregisterQueue+0x50>)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4413      	add	r3, r2
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d10b      	bne.n	8005e4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e32:	4a0c      	ldr	r2, [pc, #48]	@ (8005e64 <vQueueUnregisterQueue+0x50>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2100      	movs	r1, #0
 8005e38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e3c:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <vQueueUnregisterQueue+0x50>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4413      	add	r3, r2
 8005e44:	2200      	movs	r2, #0
 8005e46:	605a      	str	r2, [r3, #4]
				break;
 8005e48:	e006      	b.n	8005e58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	d9e5      	bls.n	8005e22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	2000089c 	.word	0x2000089c

08005e68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e78:	f001 fc8e 	bl	8007798 <vPortEnterCritical>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e88:	d103      	bne.n	8005e92 <vQueueWaitForMessageRestricted+0x2a>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9e:	d103      	bne.n	8005ea8 <vQueueWaitForMessageRestricted+0x40>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ea8:	f001 fca8 	bl	80077fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	3324      	adds	r3, #36	@ 0x24
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fc0f 	bl	80066e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ec2:	6978      	ldr	r0, [r7, #20]
 8005ec4:	f7ff fefc 	bl	8005cc0 <prvUnlockQueue>
	}
 8005ec8:	bf00      	nop
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	@ 0x38
 8005ed4:	af04      	add	r7, sp, #16
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	61fb      	str	r3, [r7, #28]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f1a:	235c      	movs	r3, #92	@ 0x5c
 8005f1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f22:	d00b      	beq.n	8005f3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61bb      	str	r3, [r7, #24]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01e      	beq.n	8005f82 <xTaskCreateStatic+0xb2>
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01b      	beq.n	8005f82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	9302      	str	r3, [sp, #8]
 8005f64:	f107 0314 	add.w	r3, r7, #20
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f850 	bl	800601a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f7c:	f000 f8de 	bl	800613c <prvAddNewTaskToReadyList>
 8005f80:	e001      	b.n	8005f86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f86:	697b      	ldr	r3, [r7, #20]
	}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3728      	adds	r7, #40	@ 0x28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	@ 0x30
 8005f94:	af04      	add	r7, sp, #16
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fd19 	bl	80079dc <pvPortMalloc>
 8005faa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fb2:	205c      	movs	r0, #92	@ 0x5c
 8005fb4:	f001 fd12 	bl	80079dc <pvPortMalloc>
 8005fb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fc6:	e005      	b.n	8005fd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fc8:	6978      	ldr	r0, [r7, #20]
 8005fca:	f001 fdd5 	bl	8007b78 <vPortFree>
 8005fce:	e001      	b.n	8005fd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d017      	beq.n	800600a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9303      	str	r3, [sp, #12]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f80e 	bl	800601a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ffe:	69f8      	ldr	r0, [r7, #28]
 8006000:	f000 f89c 	bl	800613c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006004:	2301      	movs	r3, #1
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e002      	b.n	8006010 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800600e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006010:	69bb      	ldr	r3, [r7, #24]
	}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b088      	sub	sp, #32
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	461a      	mov	r2, r3
 8006032:	21a5      	movs	r1, #165	@ 0xa5
 8006034:	f002 f8ca 	bl	80081cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006042:	3b01      	subs	r3, #1
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	617b      	str	r3, [r7, #20]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01f      	beq.n	80060ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e012      	b.n	80060a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	7819      	ldrb	r1, [r3, #0]
 8006088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	3334      	adds	r3, #52	@ 0x34
 8006090:	460a      	mov	r2, r1
 8006092:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b0f      	cmp	r3, #15
 80060aa:	d9e9      	bls.n	8006080 <prvInitialiseNewTask+0x66>
 80060ac:	e000      	b.n	80060b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80060ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060b8:	e003      	b.n	80060c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	2b37      	cmp	r3, #55	@ 0x37
 80060c6:	d901      	bls.n	80060cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060c8:	2337      	movs	r3, #55	@ 0x37
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	2200      	movs	r2, #0
 80060dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fe34 	bl	8004d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	3318      	adds	r3, #24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe fe2f 	bl	8004d50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006106:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	2200      	movs	r2, #0
 800610c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	69b8      	ldr	r0, [r7, #24]
 800611c:	f001 fa08 	bl	8007530 <pxPortInitialiseStack>
 8006120:	4602      	mov	r2, r0
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006132:	bf00      	nop
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006144:	f001 fb28 	bl	8007798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006148:	4b2d      	ldr	r3, [pc, #180]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	4a2c      	ldr	r2, [pc, #176]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 8006150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006152:	4b2c      	ldr	r3, [pc, #176]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800615a:	4a2a      	ldr	r2, [pc, #168]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006160:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d110      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006168:	f000 fbe8 	bl	800693c <prvInitialiseTaskLists>
 800616c:	e00d      	b.n	800618a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800616e:	4b26      	ldr	r3, [pc, #152]	@ (8006208 <prvAddNewTaskToReadyList+0xcc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006176:	4b23      	ldr	r3, [pc, #140]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	429a      	cmp	r2, r3
 8006182:	d802      	bhi.n	800618a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006184:	4a1f      	ldr	r2, [pc, #124]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800618a:	4b20      	ldr	r3, [pc, #128]	@ (800620c <prvAddNewTaskToReadyList+0xd0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	4a1e      	ldr	r2, [pc, #120]	@ (800620c <prvAddNewTaskToReadyList+0xd0>)
 8006192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006194:	4b1d      	ldr	r3, [pc, #116]	@ (800620c <prvAddNewTaskToReadyList+0xd0>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006210 <prvAddNewTaskToReadyList+0xd4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d903      	bls.n	80061b0 <prvAddNewTaskToReadyList+0x74>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	4a18      	ldr	r2, [pc, #96]	@ (8006210 <prvAddNewTaskToReadyList+0xd4>)
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <prvAddNewTaskToReadyList+0xd8>)
 80061be:	441a      	add	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fe fdcf 	bl	8004d6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061cc:	f001 fb16 	bl	80077fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006208 <prvAddNewTaskToReadyList+0xcc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d207      	bcs.n	80061f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006218 <prvAddNewTaskToReadyList+0xdc>)
 80061e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000db0 	.word	0x20000db0
 8006204:	200008dc 	.word	0x200008dc
 8006208:	20000dbc 	.word	0x20000dbc
 800620c:	20000dcc 	.word	0x20000dcc
 8006210:	20000db8 	.word	0x20000db8
 8006214:	200008e0 	.word	0x200008e0
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	@ 0x28
 8006220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800622a:	463a      	mov	r2, r7
 800622c:	1d39      	adds	r1, r7, #4
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fd38 	bl	8004ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	9202      	str	r2, [sp, #8]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	2300      	movs	r3, #0
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	460a      	mov	r2, r1
 800624a:	4922      	ldr	r1, [pc, #136]	@ (80062d4 <vTaskStartScheduler+0xb8>)
 800624c:	4822      	ldr	r0, [pc, #136]	@ (80062d8 <vTaskStartScheduler+0xbc>)
 800624e:	f7ff fe3f 	bl	8005ed0 <xTaskCreateStatic>
 8006252:	4603      	mov	r3, r0
 8006254:	4a21      	ldr	r2, [pc, #132]	@ (80062dc <vTaskStartScheduler+0xc0>)
 8006256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006258:	4b20      	ldr	r3, [pc, #128]	@ (80062dc <vTaskStartScheduler+0xc0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e001      	b.n	800626a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d102      	bne.n	8006276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006270:	f000 fe04 	bl	8006e7c <xTimerCreateTimerTask>
 8006274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d116      	bne.n	80062aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	613b      	str	r3, [r7, #16]
}
 800628e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006290:	4b13      	ldr	r3, [pc, #76]	@ (80062e0 <vTaskStartScheduler+0xc4>)
 8006292:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006296:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006298:	4b12      	ldr	r3, [pc, #72]	@ (80062e4 <vTaskStartScheduler+0xc8>)
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800629e:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <vTaskStartScheduler+0xcc>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062a4:	f001 f9d4 	bl	8007650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062a8:	e00f      	b.n	80062ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b0:	d10b      	bne.n	80062ca <vTaskStartScheduler+0xae>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60fb      	str	r3, [r7, #12]
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	e7fd      	b.n	80062c6 <vTaskStartScheduler+0xaa>
}
 80062ca:	bf00      	nop
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	08008d68 	.word	0x08008d68
 80062d8:	0800690d 	.word	0x0800690d
 80062dc:	20000dd4 	.word	0x20000dd4
 80062e0:	20000dd0 	.word	0x20000dd0
 80062e4:	20000dbc 	.word	0x20000dbc
 80062e8:	20000db4 	.word	0x20000db4

080062ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062f0:	4b04      	ldr	r3, [pc, #16]	@ (8006304 <vTaskSuspendAll+0x18>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a03      	ldr	r2, [pc, #12]	@ (8006304 <vTaskSuspendAll+0x18>)
 80062f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	20000dd8 	.word	0x20000dd8

08006308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006316:	4b42      	ldr	r3, [pc, #264]	@ (8006420 <xTaskResumeAll+0x118>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <xTaskResumeAll+0x2e>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	603b      	str	r3, [r7, #0]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006336:	f001 fa2f 	bl	8007798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800633a:	4b39      	ldr	r3, [pc, #228]	@ (8006420 <xTaskResumeAll+0x118>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a37      	ldr	r2, [pc, #220]	@ (8006420 <xTaskResumeAll+0x118>)
 8006342:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006344:	4b36      	ldr	r3, [pc, #216]	@ (8006420 <xTaskResumeAll+0x118>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d162      	bne.n	8006412 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800634c:	4b35      	ldr	r3, [pc, #212]	@ (8006424 <xTaskResumeAll+0x11c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d05e      	beq.n	8006412 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006354:	e02f      	b.n	80063b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006356:	4b34      	ldr	r3, [pc, #208]	@ (8006428 <xTaskResumeAll+0x120>)
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3318      	adds	r3, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fd5e 	bl	8004e24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3304      	adds	r3, #4
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fd59 	bl	8004e24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	4b2d      	ldr	r3, [pc, #180]	@ (800642c <xTaskResumeAll+0x124>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d903      	bls.n	8006386 <xTaskResumeAll+0x7e>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a2a      	ldr	r2, [pc, #168]	@ (800642c <xTaskResumeAll+0x124>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4a27      	ldr	r2, [pc, #156]	@ (8006430 <xTaskResumeAll+0x128>)
 8006394:	441a      	add	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7fe fce4 	bl	8004d6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a6:	4b23      	ldr	r3, [pc, #140]	@ (8006434 <xTaskResumeAll+0x12c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80063b0:	4b21      	ldr	r3, [pc, #132]	@ (8006438 <xTaskResumeAll+0x130>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006428 <xTaskResumeAll+0x120>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1cb      	bne.n	8006356 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063c4:	f000 fb58 	bl	8006a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063c8:	4b1c      	ldr	r3, [pc, #112]	@ (800643c <xTaskResumeAll+0x134>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d010      	beq.n	80063f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063d4:	f000 f846 	bl	8006464 <xTaskIncrementTick>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80063de:	4b16      	ldr	r3, [pc, #88]	@ (8006438 <xTaskResumeAll+0x130>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f1      	bne.n	80063d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80063f0:	4b12      	ldr	r3, [pc, #72]	@ (800643c <xTaskResumeAll+0x134>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063f6:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <xTaskResumeAll+0x130>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063fe:	2301      	movs	r3, #1
 8006400:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006402:	4b0f      	ldr	r3, [pc, #60]	@ (8006440 <xTaskResumeAll+0x138>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006412:	f001 f9f3 	bl	80077fc <vPortExitCritical>

	return xAlreadyYielded;
 8006416:	68bb      	ldr	r3, [r7, #8]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000dd8 	.word	0x20000dd8
 8006424:	20000db0 	.word	0x20000db0
 8006428:	20000d70 	.word	0x20000d70
 800642c:	20000db8 	.word	0x20000db8
 8006430:	200008e0 	.word	0x200008e0
 8006434:	200008dc 	.word	0x200008dc
 8006438:	20000dc4 	.word	0x20000dc4
 800643c:	20000dc0 	.word	0x20000dc0
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800644a:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <xTaskGetTickCount+0x1c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006450:	687b      	ldr	r3, [r7, #4]
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000db4 	.word	0x20000db4

08006464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646e:	4b4f      	ldr	r3, [pc, #316]	@ (80065ac <xTaskIncrementTick+0x148>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f040 8090 	bne.w	8006598 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006478:	4b4d      	ldr	r3, [pc, #308]	@ (80065b0 <xTaskIncrementTick+0x14c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006480:	4a4b      	ldr	r2, [pc, #300]	@ (80065b0 <xTaskIncrementTick+0x14c>)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d121      	bne.n	80064d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800648c:	4b49      	ldr	r3, [pc, #292]	@ (80065b4 <xTaskIncrementTick+0x150>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	603b      	str	r3, [r7, #0]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <xTaskIncrementTick+0x46>
 80064ae:	4b41      	ldr	r3, [pc, #260]	@ (80065b4 <xTaskIncrementTick+0x150>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	4b40      	ldr	r3, [pc, #256]	@ (80065b8 <xTaskIncrementTick+0x154>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a3e      	ldr	r2, [pc, #248]	@ (80065b4 <xTaskIncrementTick+0x150>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4a3e      	ldr	r2, [pc, #248]	@ (80065b8 <xTaskIncrementTick+0x154>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b3e      	ldr	r3, [pc, #248]	@ (80065bc <xTaskIncrementTick+0x158>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3301      	adds	r3, #1
 80064c8:	4a3c      	ldr	r2, [pc, #240]	@ (80065bc <xTaskIncrementTick+0x158>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	f000 fad4 	bl	8006a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064d0:	4b3b      	ldr	r3, [pc, #236]	@ (80065c0 <xTaskIncrementTick+0x15c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d349      	bcc.n	800656e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064da:	4b36      	ldr	r3, [pc, #216]	@ (80065b4 <xTaskIncrementTick+0x150>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e4:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <xTaskIncrementTick+0x15c>)
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064ea:	601a      	str	r2, [r3, #0]
					break;
 80064ec:	e03f      	b.n	800656e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ee:	4b31      	ldr	r3, [pc, #196]	@ (80065b4 <xTaskIncrementTick+0x150>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d203      	bcs.n	800650e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006506:	4a2e      	ldr	r2, [pc, #184]	@ (80065c0 <xTaskIncrementTick+0x15c>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800650c:	e02f      	b.n	800656e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3304      	adds	r3, #4
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fc86 	bl	8004e24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3318      	adds	r3, #24
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fc7d 	bl	8004e24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652e:	4b25      	ldr	r3, [pc, #148]	@ (80065c4 <xTaskIncrementTick+0x160>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d903      	bls.n	800653e <xTaskIncrementTick+0xda>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	4a22      	ldr	r2, [pc, #136]	@ (80065c4 <xTaskIncrementTick+0x160>)
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4a1f      	ldr	r2, [pc, #124]	@ (80065c8 <xTaskIncrementTick+0x164>)
 800654c:	441a      	add	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f7fe fc08 	bl	8004d6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655e:	4b1b      	ldr	r3, [pc, #108]	@ (80065cc <xTaskIncrementTick+0x168>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	429a      	cmp	r2, r3
 8006566:	d3b8      	bcc.n	80064da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656c:	e7b5      	b.n	80064da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800656e:	4b17      	ldr	r3, [pc, #92]	@ (80065cc <xTaskIncrementTick+0x168>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006574:	4914      	ldr	r1, [pc, #80]	@ (80065c8 <xTaskIncrementTick+0x164>)
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d901      	bls.n	800658a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800658a:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <xTaskIncrementTick+0x16c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006592:	2301      	movs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e004      	b.n	80065a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006598:	4b0e      	ldr	r3, [pc, #56]	@ (80065d4 <xTaskIncrementTick+0x170>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	4a0d      	ldr	r2, [pc, #52]	@ (80065d4 <xTaskIncrementTick+0x170>)
 80065a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000dd8 	.word	0x20000dd8
 80065b0:	20000db4 	.word	0x20000db4
 80065b4:	20000d68 	.word	0x20000d68
 80065b8:	20000d6c 	.word	0x20000d6c
 80065bc:	20000dc8 	.word	0x20000dc8
 80065c0:	20000dd0 	.word	0x20000dd0
 80065c4:	20000db8 	.word	0x20000db8
 80065c8:	200008e0 	.word	0x200008e0
 80065cc:	200008dc 	.word	0x200008dc
 80065d0:	20000dc4 	.word	0x20000dc4
 80065d4:	20000dc0 	.word	0x20000dc0

080065d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065de:	4b28      	ldr	r3, [pc, #160]	@ (8006680 <vTaskSwitchContext+0xa8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065e6:	4b27      	ldr	r3, [pc, #156]	@ (8006684 <vTaskSwitchContext+0xac>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065ec:	e042      	b.n	8006674 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80065ee:	4b25      	ldr	r3, [pc, #148]	@ (8006684 <vTaskSwitchContext+0xac>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f4:	4b24      	ldr	r3, [pc, #144]	@ (8006688 <vTaskSwitchContext+0xb0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e011      	b.n	8006620 <vTaskSwitchContext+0x48>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <vTaskSwitchContext+0x42>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	607b      	str	r3, [r7, #4]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <vTaskSwitchContext+0x3e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b01      	subs	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	491a      	ldr	r1, [pc, #104]	@ (800668c <vTaskSwitchContext+0xb4>)
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0e3      	beq.n	80065fc <vTaskSwitchContext+0x24>
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4a13      	ldr	r2, [pc, #76]	@ (800668c <vTaskSwitchContext+0xb4>)
 8006640:	4413      	add	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3308      	adds	r3, #8
 8006656:	429a      	cmp	r2, r3
 8006658:	d104      	bne.n	8006664 <vTaskSwitchContext+0x8c>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	605a      	str	r2, [r3, #4]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <vTaskSwitchContext+0xb8>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4a06      	ldr	r2, [pc, #24]	@ (8006688 <vTaskSwitchContext+0xb0>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6013      	str	r3, [r2, #0]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000dd8 	.word	0x20000dd8
 8006684:	20000dc4 	.word	0x20000dc4
 8006688:	20000db8 	.word	0x20000db8
 800668c:	200008e0 	.word	0x200008e0
 8006690:	200008dc 	.word	0x200008dc

08006694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <vTaskPlaceOnEventList+0x48>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3318      	adds	r3, #24
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fe fb74 	bl	8004db2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066ca:	2101      	movs	r1, #1
 80066cc:	6838      	ldr	r0, [r7, #0]
 80066ce:	f000 fb81 	bl	8006dd4 <prvAddCurrentTaskToDelayedList>
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200008dc 	.word	0x200008dc

080066e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	617b      	str	r3, [r7, #20]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800670a:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <vTaskPlaceOnEventListRestricted+0x54>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3318      	adds	r3, #24
 8006710:	4619      	mov	r1, r3
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7fe fb29 	bl	8004d6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800671e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006722:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	68b8      	ldr	r0, [r7, #8]
 8006728:	f000 fb54 	bl	8006dd4 <prvAddCurrentTaskToDelayedList>
	}
 800672c:	bf00      	nop
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200008dc 	.word	0x200008dc

08006738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10b      	bne.n	8006766 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	60fb      	str	r3, [r7, #12]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	3318      	adds	r3, #24
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fb5a 	bl	8004e24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006770:	4b1d      	ldr	r3, [pc, #116]	@ (80067e8 <xTaskRemoveFromEventList+0xb0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d11d      	bne.n	80067b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	3304      	adds	r3, #4
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fb51 	bl	8004e24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006786:	4b19      	ldr	r3, [pc, #100]	@ (80067ec <xTaskRemoveFromEventList+0xb4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d903      	bls.n	8006796 <xTaskRemoveFromEventList+0x5e>
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006792:	4a16      	ldr	r2, [pc, #88]	@ (80067ec <xTaskRemoveFromEventList+0xb4>)
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4a13      	ldr	r2, [pc, #76]	@ (80067f0 <xTaskRemoveFromEventList+0xb8>)
 80067a4:	441a      	add	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fe fadc 	bl	8004d6a <vListInsertEnd>
 80067b2:	e005      	b.n	80067c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	3318      	adds	r3, #24
 80067b8:	4619      	mov	r1, r3
 80067ba:	480e      	ldr	r0, [pc, #56]	@ (80067f4 <xTaskRemoveFromEventList+0xbc>)
 80067bc:	f7fe fad5 	bl	8004d6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c4:	4b0c      	ldr	r3, [pc, #48]	@ (80067f8 <xTaskRemoveFromEventList+0xc0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d905      	bls.n	80067da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067d2:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <xTaskRemoveFromEventList+0xc4>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e001      	b.n	80067de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067de:	697b      	ldr	r3, [r7, #20]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000dd8 	.word	0x20000dd8
 80067ec:	20000db8 	.word	0x20000db8
 80067f0:	200008e0 	.word	0x200008e0
 80067f4:	20000d70 	.word	0x20000d70
 80067f8:	200008dc 	.word	0x200008dc
 80067fc:	20000dc4 	.word	0x20000dc4

08006800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006808:	4b06      	ldr	r3, [pc, #24]	@ (8006824 <vTaskInternalSetTimeOutState+0x24>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <vTaskInternalSetTimeOutState+0x28>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	605a      	str	r2, [r3, #4]
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	20000dc8 	.word	0x20000dc8
 8006828:	20000db4 	.word	0x20000db4

0800682c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	613b      	str	r3, [r7, #16]
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60fb      	str	r3, [r7, #12]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006872:	f000 ff91 	bl	8007798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006876:	4b1d      	ldr	r3, [pc, #116]	@ (80068ec <xTaskCheckForTimeOut+0xc0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800688e:	d102      	bne.n	8006896 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e023      	b.n	80068de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b15      	ldr	r3, [pc, #84]	@ (80068f0 <xTaskCheckForTimeOut+0xc4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d007      	beq.n	80068b2 <xTaskCheckForTimeOut+0x86>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d302      	bcc.n	80068b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e015      	b.n	80068de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d20b      	bcs.n	80068d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff ff99 	bl	8006800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	e004      	b.n	80068de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068de:	f000 ff8d 	bl	80077fc <vPortExitCritical>

	return xReturn;
 80068e2:	69fb      	ldr	r3, [r7, #28]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000db4 	.word	0x20000db4
 80068f0:	20000dc8 	.word	0x20000dc8

080068f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068f8:	4b03      	ldr	r3, [pc, #12]	@ (8006908 <vTaskMissedYield+0x14>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	20000dc4 	.word	0x20000dc4

0800690c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006914:	f000 f852 	bl	80069bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006918:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <prvIdleTask+0x28>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d9f9      	bls.n	8006914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006920:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <prvIdleTask+0x2c>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006930:	e7f0      	b.n	8006914 <prvIdleTask+0x8>
 8006932:	bf00      	nop
 8006934:	200008e0 	.word	0x200008e0
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	e00c      	b.n	8006962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4a12      	ldr	r2, [pc, #72]	@ (800699c <prvInitialiseTaskLists+0x60>)
 8006954:	4413      	add	r3, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe f9da 	bl	8004d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3301      	adds	r3, #1
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b37      	cmp	r3, #55	@ 0x37
 8006966:	d9ef      	bls.n	8006948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006968:	480d      	ldr	r0, [pc, #52]	@ (80069a0 <prvInitialiseTaskLists+0x64>)
 800696a:	f7fe f9d1 	bl	8004d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800696e:	480d      	ldr	r0, [pc, #52]	@ (80069a4 <prvInitialiseTaskLists+0x68>)
 8006970:	f7fe f9ce 	bl	8004d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006974:	480c      	ldr	r0, [pc, #48]	@ (80069a8 <prvInitialiseTaskLists+0x6c>)
 8006976:	f7fe f9cb 	bl	8004d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800697a:	480c      	ldr	r0, [pc, #48]	@ (80069ac <prvInitialiseTaskLists+0x70>)
 800697c:	f7fe f9c8 	bl	8004d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006980:	480b      	ldr	r0, [pc, #44]	@ (80069b0 <prvInitialiseTaskLists+0x74>)
 8006982:	f7fe f9c5 	bl	8004d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <prvInitialiseTaskLists+0x78>)
 8006988:	4a05      	ldr	r2, [pc, #20]	@ (80069a0 <prvInitialiseTaskLists+0x64>)
 800698a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <prvInitialiseTaskLists+0x7c>)
 800698e:	4a05      	ldr	r2, [pc, #20]	@ (80069a4 <prvInitialiseTaskLists+0x68>)
 8006990:	601a      	str	r2, [r3, #0]
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200008e0 	.word	0x200008e0
 80069a0:	20000d40 	.word	0x20000d40
 80069a4:	20000d54 	.word	0x20000d54
 80069a8:	20000d70 	.word	0x20000d70
 80069ac:	20000d84 	.word	0x20000d84
 80069b0:	20000d9c 	.word	0x20000d9c
 80069b4:	20000d68 	.word	0x20000d68
 80069b8:	20000d6c 	.word	0x20000d6c

080069bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069c2:	e019      	b.n	80069f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069c4:	f000 fee8 	bl	8007798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c8:	4b10      	ldr	r3, [pc, #64]	@ (8006a0c <prvCheckTasksWaitingTermination+0x50>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe fa25 	bl	8004e24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <prvCheckTasksWaitingTermination+0x54>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3b01      	subs	r3, #1
 80069e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006a10 <prvCheckTasksWaitingTermination+0x54>)
 80069e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <prvCheckTasksWaitingTermination+0x58>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006a14 <prvCheckTasksWaitingTermination+0x58>)
 80069ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ee:	f000 ff05 	bl	80077fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f810 	bl	8006a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <prvCheckTasksWaitingTermination+0x58>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e1      	bne.n	80069c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000d84 	.word	0x20000d84
 8006a10:	20000db0 	.word	0x20000db0
 8006a14:	20000d98 	.word	0x20000d98

08006a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d108      	bne.n	8006a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f8a2 	bl	8007b78 <vPortFree>
				vPortFree( pxTCB );
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 f89f 	bl	8007b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a3a:	e019      	b.n	8006a70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d103      	bne.n	8006a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f896 	bl	8007b78 <vPortFree>
	}
 8006a4c:	e010      	b.n	8006a70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d00b      	beq.n	8006a70 <prvDeleteTCB+0x58>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60fb      	str	r3, [r7, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <prvDeleteTCB+0x54>
	}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab0 <prvResetNextTaskUnblockTime+0x38>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a90:	e008      	b.n	8006aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a92:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <prvResetNextTaskUnblockTime+0x38>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a04      	ldr	r2, [pc, #16]	@ (8006ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8006aa2:	6013      	str	r3, [r2, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000d68 	.word	0x20000d68
 8006ab4:	20000dd0 	.word	0x20000dd0

08006ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006abe:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <xTaskGetSchedulerState+0x34>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	e008      	b.n	8006ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006acc:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <xTaskGetSchedulerState+0x38>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	e001      	b.n	8006ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ade:	687b      	ldr	r3, [r7, #4]
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000dbc 	.word	0x20000dbc
 8006af0:	20000dd8 	.word	0x20000dd8

08006af4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d051      	beq.n	8006bae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d241      	bcs.n	8006b9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db06      	blt.n	8006b2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b20:	4b25      	ldr	r3, [pc, #148]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6959      	ldr	r1, [r3, #20]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bbc <xTaskPriorityInherit+0xc8>)
 8006b40:	4413      	add	r3, r2
 8006b42:	4299      	cmp	r1, r3
 8006b44:	d122      	bne.n	8006b8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe f96a 	bl	8004e24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b50:	4b19      	ldr	r3, [pc, #100]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5e:	4b18      	ldr	r3, [pc, #96]	@ (8006bc0 <xTaskPriorityInherit+0xcc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d903      	bls.n	8006b6e <xTaskPriorityInherit+0x7a>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	4a15      	ldr	r2, [pc, #84]	@ (8006bc0 <xTaskPriorityInherit+0xcc>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a10      	ldr	r2, [pc, #64]	@ (8006bbc <xTaskPriorityInherit+0xc8>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fe f8f0 	bl	8004d6a <vListInsertEnd>
 8006b8a:	e004      	b.n	8006b96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	e008      	b.n	8006bae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d201      	bcs.n	8006bae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bae:	68fb      	ldr	r3, [r7, #12]
	}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	200008dc 	.word	0x200008dc
 8006bbc:	200008e0 	.word	0x200008e0
 8006bc0:	20000db8 	.word	0x20000db8

08006bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d058      	beq.n	8006c8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bda:	4b2f      	ldr	r3, [pc, #188]	@ (8006c98 <xTaskPriorityDisinherit+0xd4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d00b      	beq.n	8006bfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60bb      	str	r3, [r7, #8]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c20:	1e5a      	subs	r2, r3, #1
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d02c      	beq.n	8006c8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d128      	bne.n	8006c8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe f8f0 	bl	8004e24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <xTaskPriorityDisinherit+0xd8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <xTaskPriorityDisinherit+0xa8>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a0c      	ldr	r2, [pc, #48]	@ (8006c9c <xTaskPriorityDisinherit+0xd8>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <xTaskPriorityDisinherit+0xdc>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fe f871 	bl	8004d6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c8c:	697b      	ldr	r3, [r7, #20]
	}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200008dc 	.word	0x200008dc
 8006c9c:	20000db8 	.word	0x20000db8
 8006ca0:	200008e0 	.word	0x200008e0

08006ca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d06c      	beq.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d902      	bls.n	8006cec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e002      	b.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d04c      	beq.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d147      	bne.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d06:	4b26      	ldr	r3, [pc, #152]	@ (8006da0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d10b      	bne.n	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60bb      	str	r3, [r7, #8]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db04      	blt.n	8006d46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	6959      	ldr	r1, [r3, #20]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a13      	ldr	r2, [pc, #76]	@ (8006da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d56:	4413      	add	r3, r2
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d11c      	bne.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe f85f 	bl	8004e24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d903      	bls.n	8006d7a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	4a0c      	ldr	r2, [pc, #48]	@ (8006da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a07      	ldr	r2, [pc, #28]	@ (8006da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d88:	441a      	add	r2, r3
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fd ffea 	bl	8004d6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d96:	bf00      	nop
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200008dc 	.word	0x200008dc
 8006da4:	200008e0 	.word	0x200008e0
 8006da8:	20000db8 	.word	0x20000db8

08006dac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006db0:	4b07      	ldr	r3, [pc, #28]	@ (8006dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dbe:	3201      	adds	r2, #1
 8006dc0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006dc2:	4b03      	ldr	r3, [pc, #12]	@ (8006dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
	}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	200008dc 	.word	0x200008dc

08006dd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dde:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006de4:	4b20      	ldr	r3, [pc, #128]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe f81a 	bl	8004e24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006df6:	d10a      	bne.n	8006e0e <prvAddCurrentTaskToDelayedList+0x3a>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d007      	beq.n	8006e0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4819      	ldr	r0, [pc, #100]	@ (8006e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8006e08:	f7fd ffaf 	bl	8004d6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e0c:	e026      	b.n	8006e5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e16:	4b14      	ldr	r3, [pc, #80]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d209      	bcs.n	8006e3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e26:	4b12      	ldr	r3, [pc, #72]	@ (8006e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f7fd ffbd 	bl	8004db2 <vListInsert>
}
 8006e38:	e010      	b.n	8006e5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fd ffb3 	bl	8004db2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d202      	bcs.n	8006e5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e56:	4a08      	ldr	r2, [pc, #32]	@ (8006e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6013      	str	r3, [r2, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000db4 	.word	0x20000db4
 8006e68:	200008dc 	.word	0x200008dc
 8006e6c:	20000d9c 	.word	0x20000d9c
 8006e70:	20000d6c 	.word	0x20000d6c
 8006e74:	20000d68 	.word	0x20000d68
 8006e78:	20000dd0 	.word	0x20000dd0

08006e7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	@ 0x28
 8006e80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e86:	f000 fb13 	bl	80074b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <xTimerCreateTimerTask+0x84>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d021      	beq.n	8006ed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e9a:	1d3a      	adds	r2, r7, #4
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fd ff19 	bl	8004cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	9202      	str	r2, [sp, #8]
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	460a      	mov	r2, r1
 8006ebc:	4911      	ldr	r1, [pc, #68]	@ (8006f04 <xTimerCreateTimerTask+0x88>)
 8006ebe:	4812      	ldr	r0, [pc, #72]	@ (8006f08 <xTimerCreateTimerTask+0x8c>)
 8006ec0:	f7ff f806 	bl	8005ed0 <xTaskCreateStatic>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4a11      	ldr	r2, [pc, #68]	@ (8006f0c <xTimerCreateTimerTask+0x90>)
 8006ec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006eca:	4b10      	ldr	r3, [pc, #64]	@ (8006f0c <xTimerCreateTimerTask+0x90>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	613b      	str	r3, [r7, #16]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ef4:	697b      	ldr	r3, [r7, #20]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000e0c 	.word	0x20000e0c
 8006f04:	08008d70 	.word	0x08008d70
 8006f08:	08007049 	.word	0x08007049
 8006f0c:	20000e10 	.word	0x20000e10

08006f10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	@ 0x28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <xTimerGenericCommand+0x30>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	623b      	str	r3, [r7, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f40:	4b19      	ldr	r3, [pc, #100]	@ (8006fa8 <xTimerGenericCommand+0x98>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d02a      	beq.n	8006f9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	dc18      	bgt.n	8006f8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f5a:	f7ff fdad 	bl	8006ab8 <xTaskGetSchedulerState>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d109      	bne.n	8006f78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f64:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <xTimerGenericCommand+0x98>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	f107 0110 	add.w	r1, r7, #16
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f70:	f7fe f936 	bl	80051e0 <xQueueGenericSend>
 8006f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f76:	e012      	b.n	8006f9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f78:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <xTimerGenericCommand+0x98>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	f107 0110 	add.w	r1, r7, #16
 8006f80:	2300      	movs	r3, #0
 8006f82:	2200      	movs	r2, #0
 8006f84:	f7fe f92c 	bl	80051e0 <xQueueGenericSend>
 8006f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f8a:	e008      	b.n	8006f9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f8c:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <xTimerGenericCommand+0x98>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	f107 0110 	add.w	r1, r7, #16
 8006f94:	2300      	movs	r3, #0
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	f7fe fa24 	bl	80053e4 <xQueueGenericSendFromISR>
 8006f9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	@ 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000e0c 	.word	0x20000e0c

08006fac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb6:	4b23      	ldr	r3, [pc, #140]	@ (8007044 <prvProcessExpiredTimer+0x98>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fd ff2d 	bl	8004e24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d023      	beq.n	8007020 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	18d1      	adds	r1, r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	6978      	ldr	r0, [r7, #20]
 8006fe6:	f000 f8d5 	bl	8007194 <prvInsertTimerInActiveList>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d020      	beq.n	8007032 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	f7ff ff88 	bl	8006f10 <xTimerGenericCommand>
 8007000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d114      	bne.n	8007032 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	60fb      	str	r3, [r7, #12]
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	e7fd      	b.n	800701c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007026:	f023 0301 	bic.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	6978      	ldr	r0, [r7, #20]
 8007038:	4798      	blx	r3
}
 800703a:	bf00      	nop
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000e04 	.word	0x20000e04

08007048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007050:	f107 0308 	add.w	r3, r7, #8
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f859 	bl	800710c <prvGetNextExpireTime>
 800705a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4619      	mov	r1, r3
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f805 	bl	8007070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007066:	f000 f8d7 	bl	8007218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800706a:	bf00      	nop
 800706c:	e7f0      	b.n	8007050 <prvTimerTask+0x8>
	...

08007070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800707a:	f7ff f937 	bl	80062ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f866 	bl	8007154 <prvSampleTimeNow>
 8007088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d130      	bne.n	80070f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <prvProcessTimerOrBlockTask+0x3c>
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	429a      	cmp	r2, r3
 800709c:	d806      	bhi.n	80070ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800709e:	f7ff f933 	bl	8006308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff ff81 	bl	8006fac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070aa:	e024      	b.n	80070f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070b2:	4b13      	ldr	r3, [pc, #76]	@ (8007100 <prvProcessTimerOrBlockTask+0x90>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <prvProcessTimerOrBlockTask+0x50>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <prvProcessTimerOrBlockTask+0x52>
 80070c0:	2300      	movs	r3, #0
 80070c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007104 <prvProcessTimerOrBlockTask+0x94>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4619      	mov	r1, r3
 80070d2:	f7fe fec9 	bl	8005e68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070d6:	f7ff f917 	bl	8006308 <xTaskResumeAll>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070e0:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <prvProcessTimerOrBlockTask+0x98>)
 80070e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
}
 80070f0:	e001      	b.n	80070f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070f2:	f7ff f909 	bl	8006308 <xTaskResumeAll>
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000e08 	.word	0x20000e08
 8007104:	20000e0c 	.word	0x20000e0c
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007114:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <prvGetNextExpireTime+0x44>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <prvGetNextExpireTime+0x16>
 800711e:	2201      	movs	r2, #1
 8007120:	e000      	b.n	8007124 <prvGetNextExpireTime+0x18>
 8007122:	2200      	movs	r2, #0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007130:	4b07      	ldr	r3, [pc, #28]	@ (8007150 <prvGetNextExpireTime+0x44>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e001      	b.n	8007140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20000e04 	.word	0x20000e04

08007154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800715c:	f7ff f972 	bl	8006444 <xTaskGetTickCount>
 8007160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <prvSampleTimeNow+0x3c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	429a      	cmp	r2, r3
 800716a:	d205      	bcs.n	8007178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800716c:	f000 f93a 	bl	80073e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e002      	b.n	800717e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800717e:	4a04      	ldr	r2, [pc, #16]	@ (8007190 <prvSampleTimeNow+0x3c>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007184:	68fb      	ldr	r3, [r7, #12]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000e14 	.word	0x20000e14

08007194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d812      	bhi.n	80071e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071c8:	2301      	movs	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e01b      	b.n	8007206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071ce:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <prvInsertTimerInActiveList+0x7c>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fd fdea 	bl	8004db2 <vListInsert>
 80071de:	e012      	b.n	8007206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d206      	bcs.n	80071f6 <prvInsertTimerInActiveList+0x62>
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d302      	bcc.n	80071f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e007      	b.n	8007206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071f6:	4b07      	ldr	r3, [pc, #28]	@ (8007214 <prvInsertTimerInActiveList+0x80>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7fd fdd6 	bl	8004db2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007206:	697b      	ldr	r3, [r7, #20]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000e08 	.word	0x20000e08
 8007214:	20000e04 	.word	0x20000e04

08007218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08e      	sub	sp, #56	@ 0x38
 800721c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800721e:	e0ce      	b.n	80073be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	da19      	bge.n	800725a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	3304      	adds	r3, #4
 800722a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10b      	bne.n	800724a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	61fb      	str	r3, [r7, #28]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007250:	6850      	ldr	r0, [r2, #4]
 8007252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007254:	6892      	ldr	r2, [r2, #8]
 8007256:	4611      	mov	r1, r2
 8007258:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f2c0 80ae 	blt.w	80073be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fd fdd6 	bl	8004e24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007278:	463b      	mov	r3, r7
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ff6a 	bl	8007154 <prvSampleTimeNow>
 8007280:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b09      	cmp	r3, #9
 8007286:	f200 8097 	bhi.w	80073b8 <prvProcessReceivedCommands+0x1a0>
 800728a:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <prvProcessReceivedCommands+0x78>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072b9 	.word	0x080072b9
 8007298:	080072b9 	.word	0x080072b9
 800729c:	0800732f 	.word	0x0800732f
 80072a0:	08007343 	.word	0x08007343
 80072a4:	0800738f 	.word	0x0800738f
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072b9 	.word	0x080072b9
 80072b0:	0800732f 	.word	0x0800732f
 80072b4:	08007343 	.word	0x08007343
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	18d1      	adds	r1, r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072d8:	f7ff ff5c 	bl	8007194 <prvInsertTimerInActiveList>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d06c      	beq.n	80073bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d061      	beq.n	80073bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	441a      	add	r2, r3
 8007300:	2300      	movs	r3, #0
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	2100      	movs	r1, #0
 8007308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800730a:	f7ff fe01 	bl	8006f10 <xTimerGenericCommand>
 800730e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d152      	bne.n	80073bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	61bb      	str	r3, [r7, #24]
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	e7fd      	b.n	800732a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007340:	e03d      	b.n	80073be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	b2da      	uxtb	r2, r3
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10b      	bne.n	800737a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	617b      	str	r3, [r7, #20]
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	e7fd      	b.n	8007376 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	18d1      	adds	r1, r2, r3
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007388:	f7ff ff04 	bl	8007194 <prvInsertTimerInActiveList>
					break;
 800738c:	e017      	b.n	80073be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d103      	bne.n	80073a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800739c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800739e:	f000 fbeb 	bl	8007b78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073a2:	e00c      	b.n	80073be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80073b6:	e002      	b.n	80073be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <prvProcessReceivedCommands+0x1a6>
					break;
 80073bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073be:	4b08      	ldr	r3, [pc, #32]	@ (80073e0 <prvProcessReceivedCommands+0x1c8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	1d39      	adds	r1, r7, #4
 80073c4:	2200      	movs	r2, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f93a 	bl	8005640 <xQueueReceive>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f47f af26 	bne.w	8007220 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3730      	adds	r7, #48	@ 0x30
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000e0c 	.word	0x20000e0c

080073e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ea:	e049      	b.n	8007480 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ec:	4b2e      	ldr	r3, [pc, #184]	@ (80074a8 <prvSwitchTimerLists+0xc4>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f6:	4b2c      	ldr	r3, [pc, #176]	@ (80074a8 <prvSwitchTimerLists+0xc4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fd0d 	bl	8004e24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02f      	beq.n	8007480 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d90e      	bls.n	8007450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800743e:	4b1a      	ldr	r3, [pc, #104]	@ (80074a8 <prvSwitchTimerLists+0xc4>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7fd fcb2 	bl	8004db2 <vListInsert>
 800744e:	e017      	b.n	8007480 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fd58 	bl	8006f10 <xTimerGenericCommand>
 8007460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	603b      	str	r3, [r7, #0]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007480:	4b09      	ldr	r3, [pc, #36]	@ (80074a8 <prvSwitchTimerLists+0xc4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1b0      	bne.n	80073ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800748a:	4b07      	ldr	r3, [pc, #28]	@ (80074a8 <prvSwitchTimerLists+0xc4>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007490:	4b06      	ldr	r3, [pc, #24]	@ (80074ac <prvSwitchTimerLists+0xc8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a04      	ldr	r2, [pc, #16]	@ (80074a8 <prvSwitchTimerLists+0xc4>)
 8007496:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007498:	4a04      	ldr	r2, [pc, #16]	@ (80074ac <prvSwitchTimerLists+0xc8>)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	6013      	str	r3, [r2, #0]
}
 800749e:	bf00      	nop
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000e04 	.word	0x20000e04
 80074ac:	20000e08 	.word	0x20000e08

080074b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074b6:	f000 f96f 	bl	8007798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074ba:	4b15      	ldr	r3, [pc, #84]	@ (8007510 <prvCheckForValidListAndQueue+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d120      	bne.n	8007504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074c2:	4814      	ldr	r0, [pc, #80]	@ (8007514 <prvCheckForValidListAndQueue+0x64>)
 80074c4:	f7fd fc24 	bl	8004d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074c8:	4813      	ldr	r0, [pc, #76]	@ (8007518 <prvCheckForValidListAndQueue+0x68>)
 80074ca:	f7fd fc21 	bl	8004d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074ce:	4b13      	ldr	r3, [pc, #76]	@ (800751c <prvCheckForValidListAndQueue+0x6c>)
 80074d0:	4a10      	ldr	r2, [pc, #64]	@ (8007514 <prvCheckForValidListAndQueue+0x64>)
 80074d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074d4:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <prvCheckForValidListAndQueue+0x70>)
 80074d6:	4a10      	ldr	r2, [pc, #64]	@ (8007518 <prvCheckForValidListAndQueue+0x68>)
 80074d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074da:	2300      	movs	r3, #0
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <prvCheckForValidListAndQueue+0x74>)
 80074e0:	4a11      	ldr	r2, [pc, #68]	@ (8007528 <prvCheckForValidListAndQueue+0x78>)
 80074e2:	2110      	movs	r1, #16
 80074e4:	200a      	movs	r0, #10
 80074e6:	f7fd fd31 	bl	8004f4c <xQueueGenericCreateStatic>
 80074ea:	4603      	mov	r3, r0
 80074ec:	4a08      	ldr	r2, [pc, #32]	@ (8007510 <prvCheckForValidListAndQueue+0x60>)
 80074ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074f0:	4b07      	ldr	r3, [pc, #28]	@ (8007510 <prvCheckForValidListAndQueue+0x60>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074f8:	4b05      	ldr	r3, [pc, #20]	@ (8007510 <prvCheckForValidListAndQueue+0x60>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	490b      	ldr	r1, [pc, #44]	@ (800752c <prvCheckForValidListAndQueue+0x7c>)
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fc5e 	bl	8005dc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007504:	f000 f97a 	bl	80077fc <vPortExitCritical>
}
 8007508:	bf00      	nop
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000e0c 	.word	0x20000e0c
 8007514:	20000ddc 	.word	0x20000ddc
 8007518:	20000df0 	.word	0x20000df0
 800751c:	20000e04 	.word	0x20000e04
 8007520:	20000e08 	.word	0x20000e08
 8007524:	20000eb8 	.word	0x20000eb8
 8007528:	20000e18 	.word	0x20000e18
 800752c:	08008d78 	.word	0x08008d78

08007530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3b04      	subs	r3, #4
 8007540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3b04      	subs	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f023 0201 	bic.w	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3b04      	subs	r3, #4
 800755e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007560:	4a0c      	ldr	r2, [pc, #48]	@ (8007594 <pxPortInitialiseStack+0x64>)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3b14      	subs	r3, #20
 800756a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b04      	subs	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f06f 0202 	mvn.w	r2, #2
 800757e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3b20      	subs	r3, #32
 8007584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007586:	68fb      	ldr	r3, [r7, #12]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	08007599 	.word	0x08007599

08007598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075a2:	4b13      	ldr	r3, [pc, #76]	@ (80075f0 <prvTaskExitError+0x58>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075aa:	d00b      	beq.n	80075c4 <prvTaskExitError+0x2c>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60fb      	str	r3, [r7, #12]
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <prvTaskExitError+0x28>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60bb      	str	r3, [r7, #8]
}
 80075d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075d8:	bf00      	nop
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0fc      	beq.n	80075da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	2000000c 	.word	0x2000000c
	...

08007600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <pxCurrentTCBConst2>)
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	6808      	ldr	r0, [r1, #0]
 8007606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	f380 8809 	msr	PSP, r0
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	4770      	bx	lr
 800761c:	f3af 8000 	nop.w

08007620 <pxCurrentTCBConst2>:
 8007620:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007628:	4808      	ldr	r0, [pc, #32]	@ (800764c <prvPortStartFirstTask+0x24>)
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f380 8808 	msr	MSP, r0
 8007632:	f04f 0000 	mov.w	r0, #0
 8007636:	f380 8814 	msr	CONTROL, r0
 800763a:	b662      	cpsie	i
 800763c:	b661      	cpsie	f
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	df00      	svc	0
 8007648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800764a:	bf00      	nop
 800764c:	e000ed08 	.word	0xe000ed08

08007650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007656:	4b47      	ldr	r3, [pc, #284]	@ (8007774 <xPortStartScheduler+0x124>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a47      	ldr	r2, [pc, #284]	@ (8007778 <xPortStartScheduler+0x128>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10b      	bne.n	8007678 <xPortStartScheduler+0x28>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	613b      	str	r3, [r7, #16]
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007678:	4b3e      	ldr	r3, [pc, #248]	@ (8007774 <xPortStartScheduler+0x124>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a3f      	ldr	r2, [pc, #252]	@ (800777c <xPortStartScheduler+0x12c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10b      	bne.n	800769a <xPortStartScheduler+0x4a>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	60fb      	str	r3, [r7, #12]
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	e7fd      	b.n	8007696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800769a:	4b39      	ldr	r3, [pc, #228]	@ (8007780 <xPortStartScheduler+0x130>)
 800769c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	22ff      	movs	r2, #255	@ 0xff
 80076aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	4b31      	ldr	r3, [pc, #196]	@ (8007784 <xPortStartScheduler+0x134>)
 80076c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076c2:	4b31      	ldr	r3, [pc, #196]	@ (8007788 <xPortStartScheduler+0x138>)
 80076c4:	2207      	movs	r2, #7
 80076c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076c8:	e009      	b.n	80076de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80076ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007788 <xPortStartScheduler+0x138>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007788 <xPortStartScheduler+0x138>)
 80076d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e6:	2b80      	cmp	r3, #128	@ 0x80
 80076e8:	d0ef      	beq.n	80076ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076ea:	4b27      	ldr	r3, [pc, #156]	@ (8007788 <xPortStartScheduler+0x138>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f1c3 0307 	rsb	r3, r3, #7
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d00b      	beq.n	800770e <xPortStartScheduler+0xbe>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60bb      	str	r3, [r7, #8]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800770e:	4b1e      	ldr	r3, [pc, #120]	@ (8007788 <xPortStartScheduler+0x138>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	4a1c      	ldr	r2, [pc, #112]	@ (8007788 <xPortStartScheduler+0x138>)
 8007716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007718:	4b1b      	ldr	r3, [pc, #108]	@ (8007788 <xPortStartScheduler+0x138>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007720:	4a19      	ldr	r2, [pc, #100]	@ (8007788 <xPortStartScheduler+0x138>)
 8007722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800772c:	4b17      	ldr	r3, [pc, #92]	@ (800778c <xPortStartScheduler+0x13c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a16      	ldr	r2, [pc, #88]	@ (800778c <xPortStartScheduler+0x13c>)
 8007732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007738:	4b14      	ldr	r3, [pc, #80]	@ (800778c <xPortStartScheduler+0x13c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a13      	ldr	r2, [pc, #76]	@ (800778c <xPortStartScheduler+0x13c>)
 800773e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007744:	f000 f8da 	bl	80078fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007748:	4b11      	ldr	r3, [pc, #68]	@ (8007790 <xPortStartScheduler+0x140>)
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800774e:	f000 f8f9 	bl	8007944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007752:	4b10      	ldr	r3, [pc, #64]	@ (8007794 <xPortStartScheduler+0x144>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a0f      	ldr	r2, [pc, #60]	@ (8007794 <xPortStartScheduler+0x144>)
 8007758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800775c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800775e:	f7ff ff63 	bl	8007628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007762:	f7fe ff39 	bl	80065d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007766:	f7ff ff17 	bl	8007598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	e000ed00 	.word	0xe000ed00
 8007778:	410fc271 	.word	0x410fc271
 800777c:	410fc270 	.word	0x410fc270
 8007780:	e000e400 	.word	0xe000e400
 8007784:	20000f08 	.word	0x20000f08
 8007788:	20000f0c 	.word	0x20000f0c
 800778c:	e000ed20 	.word	0xe000ed20
 8007790:	2000000c 	.word	0x2000000c
 8007794:	e000ef34 	.word	0xe000ef34

08007798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	607b      	str	r3, [r7, #4]
}
 80077b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077b2:	4b10      	ldr	r3, [pc, #64]	@ (80077f4 <vPortEnterCritical+0x5c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	4a0e      	ldr	r2, [pc, #56]	@ (80077f4 <vPortEnterCritical+0x5c>)
 80077ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077bc:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <vPortEnterCritical+0x5c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d110      	bne.n	80077e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <vPortEnterCritical+0x60>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	603b      	str	r3, [r7, #0]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <vPortEnterCritical+0x4a>
	}
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000000c 	.word	0x2000000c
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007802:	4b12      	ldr	r3, [pc, #72]	@ (800784c <vPortExitCritical+0x50>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <vPortExitCritical+0x26>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	607b      	str	r3, [r7, #4]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007822:	4b0a      	ldr	r3, [pc, #40]	@ (800784c <vPortExitCritical+0x50>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3b01      	subs	r3, #1
 8007828:	4a08      	ldr	r2, [pc, #32]	@ (800784c <vPortExitCritical+0x50>)
 800782a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <vPortExitCritical+0x50>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d105      	bne.n	8007840 <vPortExitCritical+0x44>
 8007834:	2300      	movs	r3, #0
 8007836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f383 8811 	msr	BASEPRI, r3
}
 800783e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	2000000c 	.word	0x2000000c

08007850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007850:	f3ef 8009 	mrs	r0, PSP
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4b15      	ldr	r3, [pc, #84]	@ (80078b0 <pxCurrentTCBConst>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	f01e 0f10 	tst.w	lr, #16
 8007860:	bf08      	it	eq
 8007862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	6010      	str	r0, [r2, #0]
 800786c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007874:	f380 8811 	msr	BASEPRI, r0
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f7fe feaa 	bl	80065d8 <vTaskSwitchContext>
 8007884:	f04f 0000 	mov.w	r0, #0
 8007888:	f380 8811 	msr	BASEPRI, r0
 800788c:	bc09      	pop	{r0, r3}
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	6808      	ldr	r0, [r1, #0]
 8007892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007896:	f01e 0f10 	tst.w	lr, #16
 800789a:	bf08      	it	eq
 800789c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078a0:	f380 8809 	msr	PSP, r0
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	f3af 8000 	nop.w

080078b0 <pxCurrentTCBConst>:
 80078b0:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	607b      	str	r3, [r7, #4]
}
 80078d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078d2:	f7fe fdc7 	bl	8006464 <xTaskIncrementTick>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078dc:	4b06      	ldr	r3, [pc, #24]	@ (80078f8 <xPortSysTickHandler+0x40>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f383 8811 	msr	BASEPRI, r3
}
 80078ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <vPortSetupTimerInterrupt+0x34>)
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007906:	4b0b      	ldr	r3, [pc, #44]	@ (8007934 <vPortSetupTimerInterrupt+0x38>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800790c:	4b0a      	ldr	r3, [pc, #40]	@ (8007938 <vPortSetupTimerInterrupt+0x3c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a0a      	ldr	r2, [pc, #40]	@ (800793c <vPortSetupTimerInterrupt+0x40>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	099b      	lsrs	r3, r3, #6
 8007918:	4a09      	ldr	r2, [pc, #36]	@ (8007940 <vPortSetupTimerInterrupt+0x44>)
 800791a:	3b01      	subs	r3, #1
 800791c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800791e:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <vPortSetupTimerInterrupt+0x34>)
 8007920:	2207      	movs	r2, #7
 8007922:	601a      	str	r2, [r3, #0]
}
 8007924:	bf00      	nop
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	e000e010 	.word	0xe000e010
 8007934:	e000e018 	.word	0xe000e018
 8007938:	20000000 	.word	0x20000000
 800793c:	10624dd3 	.word	0x10624dd3
 8007940:	e000e014 	.word	0xe000e014

08007944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007954 <vPortEnableVFP+0x10>
 8007948:	6801      	ldr	r1, [r0, #0]
 800794a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800794e:	6001      	str	r1, [r0, #0]
 8007950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007952:	bf00      	nop
 8007954:	e000ed88 	.word	0xe000ed88

08007958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800795e:	f3ef 8305 	mrs	r3, IPSR
 8007962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b0f      	cmp	r3, #15
 8007968:	d915      	bls.n	8007996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800796a:	4a18      	ldr	r2, [pc, #96]	@ (80079cc <vPortValidateInterruptPriority+0x74>)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007974:	4b16      	ldr	r3, [pc, #88]	@ (80079d0 <vPortValidateInterruptPriority+0x78>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	7afa      	ldrb	r2, [r7, #11]
 800797a:	429a      	cmp	r2, r3
 800797c:	d20b      	bcs.n	8007996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	607b      	str	r3, [r7, #4]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007996:	4b0f      	ldr	r3, [pc, #60]	@ (80079d4 <vPortValidateInterruptPriority+0x7c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800799e:	4b0e      	ldr	r3, [pc, #56]	@ (80079d8 <vPortValidateInterruptPriority+0x80>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d90b      	bls.n	80079be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	603b      	str	r3, [r7, #0]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <vPortValidateInterruptPriority+0x62>
	}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	e000e3f0 	.word	0xe000e3f0
 80079d0:	20000f08 	.word	0x20000f08
 80079d4:	e000ed0c 	.word	0xe000ed0c
 80079d8:	20000f0c 	.word	0x20000f0c

080079dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08a      	sub	sp, #40	@ 0x28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079e8:	f7fe fc80 	bl	80062ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007b60 <pvPortMalloc+0x184>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079f4:	f000 f924 	bl	8007c40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b64 <pvPortMalloc+0x188>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 8095 	bne.w	8007b30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01e      	beq.n	8007a4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d015      	beq.n	8007a4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f023 0307 	bic.w	r3, r3, #7
 8007a24:	3308      	adds	r3, #8
 8007a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <pvPortMalloc+0x6e>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	617b      	str	r3, [r7, #20]
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	e7fd      	b.n	8007a46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d06f      	beq.n	8007b30 <pvPortMalloc+0x154>
 8007a50:	4b45      	ldr	r3, [pc, #276]	@ (8007b68 <pvPortMalloc+0x18c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d86a      	bhi.n	8007b30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a5a:	4b44      	ldr	r3, [pc, #272]	@ (8007b6c <pvPortMalloc+0x190>)
 8007a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a5e:	4b43      	ldr	r3, [pc, #268]	@ (8007b6c <pvPortMalloc+0x190>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a64:	e004      	b.n	8007a70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d903      	bls.n	8007a82 <pvPortMalloc+0xa6>
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f1      	bne.n	8007a66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a82:	4b37      	ldr	r3, [pc, #220]	@ (8007b60 <pvPortMalloc+0x184>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d051      	beq.n	8007b30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2208      	movs	r2, #8
 8007a92:	4413      	add	r3, r2
 8007a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	1ad2      	subs	r2, r2, r3
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d920      	bls.n	8007af0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	613b      	str	r3, [r7, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007aea:	69b8      	ldr	r0, [r7, #24]
 8007aec:	f000 f90a 	bl	8007d04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007af0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <pvPortMalloc+0x18c>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	4a1b      	ldr	r2, [pc, #108]	@ (8007b68 <pvPortMalloc+0x18c>)
 8007afc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007afe:	4b1a      	ldr	r3, [pc, #104]	@ (8007b68 <pvPortMalloc+0x18c>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b1b      	ldr	r3, [pc, #108]	@ (8007b70 <pvPortMalloc+0x194>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d203      	bcs.n	8007b12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b0a:	4b17      	ldr	r3, [pc, #92]	@ (8007b68 <pvPortMalloc+0x18c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a18      	ldr	r2, [pc, #96]	@ (8007b70 <pvPortMalloc+0x194>)
 8007b10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	4b13      	ldr	r3, [pc, #76]	@ (8007b64 <pvPortMalloc+0x188>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b26:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <pvPortMalloc+0x198>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	4a11      	ldr	r2, [pc, #68]	@ (8007b74 <pvPortMalloc+0x198>)
 8007b2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b30:	f7fe fbea 	bl	8006308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <pvPortMalloc+0x17a>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	60fb      	str	r3, [r7, #12]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <pvPortMalloc+0x176>
	return pvReturn;
 8007b56:	69fb      	ldr	r3, [r7, #28]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3728      	adds	r7, #40	@ 0x28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20001b18 	.word	0x20001b18
 8007b64:	20001b2c 	.word	0x20001b2c
 8007b68:	20001b1c 	.word	0x20001b1c
 8007b6c:	20001b10 	.word	0x20001b10
 8007b70:	20001b20 	.word	0x20001b20
 8007b74:	20001b24 	.word	0x20001b24

08007b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d04f      	beq.n	8007c2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4413      	add	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	4b25      	ldr	r3, [pc, #148]	@ (8007c34 <vPortFree+0xbc>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <vPortFree+0x46>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <vPortFree+0x66>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60bb      	str	r3, [r7, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	4b14      	ldr	r3, [pc, #80]	@ (8007c34 <vPortFree+0xbc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01e      	beq.n	8007c2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d11a      	bne.n	8007c2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c34 <vPortFree+0xbc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	401a      	ands	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c04:	f7fe fb72 	bl	80062ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <vPortFree+0xc0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4413      	add	r3, r2
 8007c12:	4a09      	ldr	r2, [pc, #36]	@ (8007c38 <vPortFree+0xc0>)
 8007c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c16:	6938      	ldr	r0, [r7, #16]
 8007c18:	f000 f874 	bl	8007d04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c1c:	4b07      	ldr	r3, [pc, #28]	@ (8007c3c <vPortFree+0xc4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	4a06      	ldr	r2, [pc, #24]	@ (8007c3c <vPortFree+0xc4>)
 8007c24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c26:	f7fe fb6f 	bl	8006308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c2a:	bf00      	nop
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20001b2c 	.word	0x20001b2c
 8007c38:	20001b1c 	.word	0x20001b1c
 8007c3c:	20001b28 	.word	0x20001b28

08007c40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007c4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c4c:	4b27      	ldr	r3, [pc, #156]	@ (8007cec <prvHeapInit+0xac>)
 8007c4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3307      	adds	r3, #7
 8007c5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0307 	bic.w	r3, r3, #7
 8007c66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cec <prvHeapInit+0xac>)
 8007c70:	4413      	add	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c78:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <prvHeapInit+0xb0>)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf0 <prvHeapInit+0xb0>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	4413      	add	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0307 	bic.w	r3, r3, #7
 8007c9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a15      	ldr	r2, [pc, #84]	@ (8007cf4 <prvHeapInit+0xb4>)
 8007ca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ca2:	4b14      	ldr	r3, [pc, #80]	@ (8007cf4 <prvHeapInit+0xb4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007caa:	4b12      	ldr	r3, [pc, #72]	@ (8007cf4 <prvHeapInit+0xb4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	1ad2      	subs	r2, r2, r3
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <prvHeapInit+0xb4>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf8 <prvHeapInit+0xb8>)
 8007cce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4a09      	ldr	r2, [pc, #36]	@ (8007cfc <prvHeapInit+0xbc>)
 8007cd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cd8:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <prvHeapInit+0xc0>)
 8007cda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cde:	601a      	str	r2, [r3, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000f10 	.word	0x20000f10
 8007cf0:	20001b10 	.word	0x20001b10
 8007cf4:	20001b18 	.word	0x20001b18
 8007cf8:	20001b20 	.word	0x20001b20
 8007cfc:	20001b1c 	.word	0x20001b1c
 8007d00:	20001b2c 	.word	0x20001b2c

08007d04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d0c:	4b28      	ldr	r3, [pc, #160]	@ (8007db0 <prvInsertBlockIntoFreeList+0xac>)
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e002      	b.n	8007d18 <prvInsertBlockIntoFreeList+0x14>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d8f7      	bhi.n	8007d12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d108      	bne.n	8007d46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	441a      	add	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d118      	bne.n	8007d8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b15      	ldr	r3, [pc, #84]	@ (8007db4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d00d      	beq.n	8007d82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e008      	b.n	8007d94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d82:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e003      	b.n	8007d94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d002      	beq.n	8007da2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20001b10 	.word	0x20001b10
 8007db4:	20001b18 	.word	0x20001b18

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc6:	6083      	str	r3, [r0, #8]
 8007dc8:	8181      	strh	r1, [r0, #12]
 8007dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8007dcc:	81c2      	strh	r2, [r0, #14]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	@ 0x5c
 8007dd6:	f000 f9f9 	bl	80081cc <memset>
 8007dda:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <std+0x58>)
 8007ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dde:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <std+0x5c>)
 8007de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <std+0x60>)
 8007de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007de6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <std+0x64>)
 8007de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <std+0x68>)
 8007dec:	6224      	str	r4, [r4, #32]
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d006      	beq.n	8007e00 <std+0x48>
 8007df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007df6:	4294      	cmp	r4, r2
 8007df8:	d002      	beq.n	8007e00 <std+0x48>
 8007dfa:	33d0      	adds	r3, #208	@ 0xd0
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d105      	bne.n	8007e0c <std+0x54>
 8007e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f000 ba58 	b.w	80082bc <__retarget_lock_init_recursive>
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	bf00      	nop
 8007e10:	0800801d 	.word	0x0800801d
 8007e14:	0800803f 	.word	0x0800803f
 8007e18:	08008077 	.word	0x08008077
 8007e1c:	0800809b 	.word	0x0800809b
 8007e20:	20001b30 	.word	0x20001b30

08007e24 <stdio_exit_handler>:
 8007e24:	4a02      	ldr	r2, [pc, #8]	@ (8007e30 <stdio_exit_handler+0xc>)
 8007e26:	4903      	ldr	r1, [pc, #12]	@ (8007e34 <stdio_exit_handler+0x10>)
 8007e28:	4803      	ldr	r0, [pc, #12]	@ (8007e38 <stdio_exit_handler+0x14>)
 8007e2a:	f000 b869 	b.w	8007f00 <_fwalk_sglue>
 8007e2e:	bf00      	nop
 8007e30:	20000010 	.word	0x20000010
 8007e34:	08008b79 	.word	0x08008b79
 8007e38:	20000020 	.word	0x20000020

08007e3c <cleanup_stdio>:
 8007e3c:	6841      	ldr	r1, [r0, #4]
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e70 <cleanup_stdio+0x34>)
 8007e40:	4299      	cmp	r1, r3
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	d001      	beq.n	8007e4c <cleanup_stdio+0x10>
 8007e48:	f000 fe96 	bl	8008b78 <_fflush_r>
 8007e4c:	68a1      	ldr	r1, [r4, #8]
 8007e4e:	4b09      	ldr	r3, [pc, #36]	@ (8007e74 <cleanup_stdio+0x38>)
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <cleanup_stdio+0x1e>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 fe8f 	bl	8008b78 <_fflush_r>
 8007e5a:	68e1      	ldr	r1, [r4, #12]
 8007e5c:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <cleanup_stdio+0x3c>)
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d004      	beq.n	8007e6c <cleanup_stdio+0x30>
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f000 be86 	b.w	8008b78 <_fflush_r>
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	20001b30 	.word	0x20001b30
 8007e74:	20001b98 	.word	0x20001b98
 8007e78:	20001c00 	.word	0x20001c00

08007e7c <global_stdio_init.part.0>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007eac <global_stdio_init.part.0+0x30>)
 8007e80:	4c0b      	ldr	r4, [pc, #44]	@ (8007eb0 <global_stdio_init.part.0+0x34>)
 8007e82:	4a0c      	ldr	r2, [pc, #48]	@ (8007eb4 <global_stdio_init.part.0+0x38>)
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	4620      	mov	r0, r4
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	f7ff ff94 	bl	8007db8 <std>
 8007e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e94:	2201      	movs	r2, #1
 8007e96:	2109      	movs	r1, #9
 8007e98:	f7ff ff8e 	bl	8007db8 <std>
 8007e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea6:	2112      	movs	r1, #18
 8007ea8:	f7ff bf86 	b.w	8007db8 <std>
 8007eac:	20001c68 	.word	0x20001c68
 8007eb0:	20001b30 	.word	0x20001b30
 8007eb4:	08007e25 	.word	0x08007e25

08007eb8 <__sfp_lock_acquire>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <__sfp_lock_acquire+0x8>)
 8007eba:	f000 ba00 	b.w	80082be <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	20001c71 	.word	0x20001c71

08007ec4 <__sfp_lock_release>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__sfp_lock_release+0x8>)
 8007ec6:	f000 b9fb 	b.w	80082c0 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20001c71 	.word	0x20001c71

08007ed0 <__sinit>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	f7ff fff0 	bl	8007eb8 <__sfp_lock_acquire>
 8007ed8:	6a23      	ldr	r3, [r4, #32]
 8007eda:	b11b      	cbz	r3, 8007ee4 <__sinit+0x14>
 8007edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee0:	f7ff bff0 	b.w	8007ec4 <__sfp_lock_release>
 8007ee4:	4b04      	ldr	r3, [pc, #16]	@ (8007ef8 <__sinit+0x28>)
 8007ee6:	6223      	str	r3, [r4, #32]
 8007ee8:	4b04      	ldr	r3, [pc, #16]	@ (8007efc <__sinit+0x2c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f5      	bne.n	8007edc <__sinit+0xc>
 8007ef0:	f7ff ffc4 	bl	8007e7c <global_stdio_init.part.0>
 8007ef4:	e7f2      	b.n	8007edc <__sinit+0xc>
 8007ef6:	bf00      	nop
 8007ef8:	08007e3d 	.word	0x08007e3d
 8007efc:	20001c68 	.word	0x20001c68

08007f00 <_fwalk_sglue>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4607      	mov	r7, r0
 8007f06:	4688      	mov	r8, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f10:	f1b9 0901 	subs.w	r9, r9, #1
 8007f14:	d505      	bpl.n	8007f22 <_fwalk_sglue+0x22>
 8007f16:	6824      	ldr	r4, [r4, #0]
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	d1f7      	bne.n	8007f0c <_fwalk_sglue+0xc>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d907      	bls.n	8007f38 <_fwalk_sglue+0x38>
 8007f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	d003      	beq.n	8007f38 <_fwalk_sglue+0x38>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	4306      	orrs	r6, r0
 8007f38:	3568      	adds	r5, #104	@ 0x68
 8007f3a:	e7e9      	b.n	8007f10 <_fwalk_sglue+0x10>

08007f3c <iprintf>:
 8007f3c:	b40f      	push	{r0, r1, r2, r3}
 8007f3e:	b507      	push	{r0, r1, r2, lr}
 8007f40:	4906      	ldr	r1, [pc, #24]	@ (8007f5c <iprintf+0x20>)
 8007f42:	ab04      	add	r3, sp, #16
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4a:	6881      	ldr	r1, [r0, #8]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f000 fae9 	bl	8008524 <_vfiprintf_r>
 8007f52:	b003      	add	sp, #12
 8007f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f58:	b004      	add	sp, #16
 8007f5a:	4770      	bx	lr
 8007f5c:	2000001c 	.word	0x2000001c

08007f60 <_puts_r>:
 8007f60:	6a03      	ldr	r3, [r0, #32]
 8007f62:	b570      	push	{r4, r5, r6, lr}
 8007f64:	6884      	ldr	r4, [r0, #8]
 8007f66:	4605      	mov	r5, r0
 8007f68:	460e      	mov	r6, r1
 8007f6a:	b90b      	cbnz	r3, 8007f70 <_puts_r+0x10>
 8007f6c:	f7ff ffb0 	bl	8007ed0 <__sinit>
 8007f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f72:	07db      	lsls	r3, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_puts_r+0x22>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	0598      	lsls	r0, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_puts_r+0x22>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f7e:	f000 f99e 	bl	80082be <__retarget_lock_acquire_recursive>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	0719      	lsls	r1, r3, #28
 8007f86:	d502      	bpl.n	8007f8e <_puts_r+0x2e>
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d135      	bne.n	8007ffa <_puts_r+0x9a>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 f8c5 	bl	8008120 <__swsetup_r>
 8007f96:	b380      	cbz	r0, 8007ffa <_puts_r+0x9a>
 8007f98:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f9e:	07da      	lsls	r2, r3, #31
 8007fa0:	d405      	bmi.n	8007fae <_puts_r+0x4e>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	059b      	lsls	r3, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_puts_r+0x4e>
 8007fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007faa:	f000 f989 	bl	80082c0 <__retarget_lock_release_recursive>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	bd70      	pop	{r4, r5, r6, pc}
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da04      	bge.n	8007fc0 <_puts_r+0x60>
 8007fb6:	69a2      	ldr	r2, [r4, #24]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	dc17      	bgt.n	8007fec <_puts_r+0x8c>
 8007fbc:	290a      	cmp	r1, #10
 8007fbe:	d015      	beq.n	8007fec <_puts_r+0x8c>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	6022      	str	r2, [r4, #0]
 8007fc6:	7019      	strb	r1, [r3, #0]
 8007fc8:	68a3      	ldr	r3, [r4, #8]
 8007fca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	60a3      	str	r3, [r4, #8]
 8007fd2:	2900      	cmp	r1, #0
 8007fd4:	d1ed      	bne.n	8007fb2 <_puts_r+0x52>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da11      	bge.n	8007ffe <_puts_r+0x9e>
 8007fda:	4622      	mov	r2, r4
 8007fdc:	210a      	movs	r1, #10
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 f85f 	bl	80080a2 <__swbuf_r>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d0d7      	beq.n	8007f98 <_puts_r+0x38>
 8007fe8:	250a      	movs	r5, #10
 8007fea:	e7d7      	b.n	8007f9c <_puts_r+0x3c>
 8007fec:	4622      	mov	r2, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f857 	bl	80080a2 <__swbuf_r>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d1e7      	bne.n	8007fc8 <_puts_r+0x68>
 8007ff8:	e7ce      	b.n	8007f98 <_puts_r+0x38>
 8007ffa:	3e01      	subs	r6, #1
 8007ffc:	e7e4      	b.n	8007fc8 <_puts_r+0x68>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	6022      	str	r2, [r4, #0]
 8008004:	220a      	movs	r2, #10
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	e7ee      	b.n	8007fe8 <_puts_r+0x88>
	...

0800800c <puts>:
 800800c:	4b02      	ldr	r3, [pc, #8]	@ (8008018 <puts+0xc>)
 800800e:	4601      	mov	r1, r0
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f7ff bfa5 	b.w	8007f60 <_puts_r>
 8008016:	bf00      	nop
 8008018:	2000001c 	.word	0x2000001c

0800801c <__sread>:
 800801c:	b510      	push	{r4, lr}
 800801e:	460c      	mov	r4, r1
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	f000 f8fc 	bl	8008220 <_read_r>
 8008028:	2800      	cmp	r0, #0
 800802a:	bfab      	itete	ge
 800802c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800802e:	89a3      	ldrhlt	r3, [r4, #12]
 8008030:	181b      	addge	r3, r3, r0
 8008032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008036:	bfac      	ite	ge
 8008038:	6563      	strge	r3, [r4, #84]	@ 0x54
 800803a:	81a3      	strhlt	r3, [r4, #12]
 800803c:	bd10      	pop	{r4, pc}

0800803e <__swrite>:
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	461f      	mov	r7, r3
 8008044:	898b      	ldrh	r3, [r1, #12]
 8008046:	05db      	lsls	r3, r3, #23
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4616      	mov	r6, r2
 800804e:	d505      	bpl.n	800805c <__swrite+0x1e>
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	2302      	movs	r3, #2
 8008056:	2200      	movs	r2, #0
 8008058:	f000 f8d0 	bl	80081fc <_lseek_r>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	4628      	mov	r0, r5
 800806e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	f000 b8e7 	b.w	8008244 <_write_r>

08008076 <__sseek>:
 8008076:	b510      	push	{r4, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807e:	f000 f8bd 	bl	80081fc <_lseek_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	bf15      	itete	ne
 8008088:	6560      	strne	r0, [r4, #84]	@ 0x54
 800808a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800808e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008092:	81a3      	strheq	r3, [r4, #12]
 8008094:	bf18      	it	ne
 8008096:	81a3      	strhne	r3, [r4, #12]
 8008098:	bd10      	pop	{r4, pc}

0800809a <__sclose>:
 800809a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809e:	f000 b89d 	b.w	80081dc <_close_r>

080080a2 <__swbuf_r>:
 80080a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a4:	460e      	mov	r6, r1
 80080a6:	4614      	mov	r4, r2
 80080a8:	4605      	mov	r5, r0
 80080aa:	b118      	cbz	r0, 80080b4 <__swbuf_r+0x12>
 80080ac:	6a03      	ldr	r3, [r0, #32]
 80080ae:	b90b      	cbnz	r3, 80080b4 <__swbuf_r+0x12>
 80080b0:	f7ff ff0e 	bl	8007ed0 <__sinit>
 80080b4:	69a3      	ldr	r3, [r4, #24]
 80080b6:	60a3      	str	r3, [r4, #8]
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	071a      	lsls	r2, r3, #28
 80080bc:	d501      	bpl.n	80080c2 <__swbuf_r+0x20>
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	b943      	cbnz	r3, 80080d4 <__swbuf_r+0x32>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 f82b 	bl	8008120 <__swsetup_r>
 80080ca:	b118      	cbz	r0, 80080d4 <__swbuf_r+0x32>
 80080cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80080d0:	4638      	mov	r0, r7
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	6922      	ldr	r2, [r4, #16]
 80080d8:	1a98      	subs	r0, r3, r2
 80080da:	6963      	ldr	r3, [r4, #20]
 80080dc:	b2f6      	uxtb	r6, r6
 80080de:	4283      	cmp	r3, r0
 80080e0:	4637      	mov	r7, r6
 80080e2:	dc05      	bgt.n	80080f0 <__swbuf_r+0x4e>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 fd46 	bl	8008b78 <_fflush_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d1ed      	bne.n	80080cc <__swbuf_r+0x2a>
 80080f0:	68a3      	ldr	r3, [r4, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	6022      	str	r2, [r4, #0]
 80080fc:	701e      	strb	r6, [r3, #0]
 80080fe:	6962      	ldr	r2, [r4, #20]
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	429a      	cmp	r2, r3
 8008104:	d004      	beq.n	8008110 <__swbuf_r+0x6e>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	07db      	lsls	r3, r3, #31
 800810a:	d5e1      	bpl.n	80080d0 <__swbuf_r+0x2e>
 800810c:	2e0a      	cmp	r6, #10
 800810e:	d1df      	bne.n	80080d0 <__swbuf_r+0x2e>
 8008110:	4621      	mov	r1, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 fd30 	bl	8008b78 <_fflush_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0d9      	beq.n	80080d0 <__swbuf_r+0x2e>
 800811c:	e7d6      	b.n	80080cc <__swbuf_r+0x2a>
	...

08008120 <__swsetup_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4b29      	ldr	r3, [pc, #164]	@ (80081c8 <__swsetup_r+0xa8>)
 8008124:	4605      	mov	r5, r0
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	460c      	mov	r4, r1
 800812a:	b118      	cbz	r0, 8008134 <__swsetup_r+0x14>
 800812c:	6a03      	ldr	r3, [r0, #32]
 800812e:	b90b      	cbnz	r3, 8008134 <__swsetup_r+0x14>
 8008130:	f7ff fece 	bl	8007ed0 <__sinit>
 8008134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008138:	0719      	lsls	r1, r3, #28
 800813a:	d422      	bmi.n	8008182 <__swsetup_r+0x62>
 800813c:	06da      	lsls	r2, r3, #27
 800813e:	d407      	bmi.n	8008150 <__swsetup_r+0x30>
 8008140:	2209      	movs	r2, #9
 8008142:	602a      	str	r2, [r5, #0]
 8008144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800814e:	e033      	b.n	80081b8 <__swsetup_r+0x98>
 8008150:	0758      	lsls	r0, r3, #29
 8008152:	d512      	bpl.n	800817a <__swsetup_r+0x5a>
 8008154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008156:	b141      	cbz	r1, 800816a <__swsetup_r+0x4a>
 8008158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <__swsetup_r+0x46>
 8008160:	4628      	mov	r0, r5
 8008162:	f000 f8bd 	bl	80082e0 <_free_r>
 8008166:	2300      	movs	r3, #0
 8008168:	6363      	str	r3, [r4, #52]	@ 0x34
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	2300      	movs	r3, #0
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f043 0308 	orr.w	r3, r3, #8
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	b94b      	cbnz	r3, 800819a <__swsetup_r+0x7a>
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800818c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008190:	d003      	beq.n	800819a <__swsetup_r+0x7a>
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f000 fd3d 	bl	8008c14 <__smakebuf_r>
 800819a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819e:	f013 0201 	ands.w	r2, r3, #1
 80081a2:	d00a      	beq.n	80081ba <__swsetup_r+0x9a>
 80081a4:	2200      	movs	r2, #0
 80081a6:	60a2      	str	r2, [r4, #8]
 80081a8:	6962      	ldr	r2, [r4, #20]
 80081aa:	4252      	negs	r2, r2
 80081ac:	61a2      	str	r2, [r4, #24]
 80081ae:	6922      	ldr	r2, [r4, #16]
 80081b0:	b942      	cbnz	r2, 80081c4 <__swsetup_r+0xa4>
 80081b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081b6:	d1c5      	bne.n	8008144 <__swsetup_r+0x24>
 80081b8:	bd38      	pop	{r3, r4, r5, pc}
 80081ba:	0799      	lsls	r1, r3, #30
 80081bc:	bf58      	it	pl
 80081be:	6962      	ldrpl	r2, [r4, #20]
 80081c0:	60a2      	str	r2, [r4, #8]
 80081c2:	e7f4      	b.n	80081ae <__swsetup_r+0x8e>
 80081c4:	2000      	movs	r0, #0
 80081c6:	e7f7      	b.n	80081b8 <__swsetup_r+0x98>
 80081c8:	2000001c 	.word	0x2000001c

080081cc <memset>:
 80081cc:	4402      	add	r2, r0
 80081ce:	4603      	mov	r3, r0
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d100      	bne.n	80081d6 <memset+0xa>
 80081d4:	4770      	bx	lr
 80081d6:	f803 1b01 	strb.w	r1, [r3], #1
 80081da:	e7f9      	b.n	80081d0 <memset+0x4>

080081dc <_close_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d06      	ldr	r5, [pc, #24]	@ (80081f8 <_close_r+0x1c>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7f8 fdeb 	bl	8000dc2 <_close>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_close_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_close_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20001c6c 	.word	0x20001c6c

080081fc <_lseek_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d07      	ldr	r5, [pc, #28]	@ (800821c <_lseek_r+0x20>)
 8008200:	4604      	mov	r4, r0
 8008202:	4608      	mov	r0, r1
 8008204:	4611      	mov	r1, r2
 8008206:	2200      	movs	r2, #0
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	f7f8 fe00 	bl	8000e10 <_lseek>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_lseek_r+0x1e>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_lseek_r+0x1e>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20001c6c 	.word	0x20001c6c

08008220 <_read_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	@ (8008240 <_read_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7f8 fdaa 	bl	8000d88 <_read>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_read_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_read_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	20001c6c 	.word	0x20001c6c

08008244 <_write_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	@ (8008264 <_write_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7f8 f9ac 	bl	80005b0 <_write>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_write_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_write_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20001c6c 	.word	0x20001c6c

08008268 <__errno>:
 8008268:	4b01      	ldr	r3, [pc, #4]	@ (8008270 <__errno+0x8>)
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	2000001c 	.word	0x2000001c

08008274 <__libc_init_array>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	4d0d      	ldr	r5, [pc, #52]	@ (80082ac <__libc_init_array+0x38>)
 8008278:	4c0d      	ldr	r4, [pc, #52]	@ (80082b0 <__libc_init_array+0x3c>)
 800827a:	1b64      	subs	r4, r4, r5
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	2600      	movs	r6, #0
 8008280:	42a6      	cmp	r6, r4
 8008282:	d109      	bne.n	8008298 <__libc_init_array+0x24>
 8008284:	4d0b      	ldr	r5, [pc, #44]	@ (80082b4 <__libc_init_array+0x40>)
 8008286:	4c0c      	ldr	r4, [pc, #48]	@ (80082b8 <__libc_init_array+0x44>)
 8008288:	f000 fd32 	bl	8008cf0 <_init>
 800828c:	1b64      	subs	r4, r4, r5
 800828e:	10a4      	asrs	r4, r4, #2
 8008290:	2600      	movs	r6, #0
 8008292:	42a6      	cmp	r6, r4
 8008294:	d105      	bne.n	80082a2 <__libc_init_array+0x2e>
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	f855 3b04 	ldr.w	r3, [r5], #4
 800829c:	4798      	blx	r3
 800829e:	3601      	adds	r6, #1
 80082a0:	e7ee      	b.n	8008280 <__libc_init_array+0xc>
 80082a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a6:	4798      	blx	r3
 80082a8:	3601      	adds	r6, #1
 80082aa:	e7f2      	b.n	8008292 <__libc_init_array+0x1e>
 80082ac:	08008e58 	.word	0x08008e58
 80082b0:	08008e58 	.word	0x08008e58
 80082b4:	08008e58 	.word	0x08008e58
 80082b8:	08008e5c 	.word	0x08008e5c

080082bc <__retarget_lock_init_recursive>:
 80082bc:	4770      	bx	lr

080082be <__retarget_lock_acquire_recursive>:
 80082be:	4770      	bx	lr

080082c0 <__retarget_lock_release_recursive>:
 80082c0:	4770      	bx	lr

080082c2 <memcpy>:
 80082c2:	440a      	add	r2, r1
 80082c4:	4291      	cmp	r1, r2
 80082c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082ca:	d100      	bne.n	80082ce <memcpy+0xc>
 80082cc:	4770      	bx	lr
 80082ce:	b510      	push	{r4, lr}
 80082d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082d8:	4291      	cmp	r1, r2
 80082da:	d1f9      	bne.n	80082d0 <memcpy+0xe>
 80082dc:	bd10      	pop	{r4, pc}
	...

080082e0 <_free_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4605      	mov	r5, r0
 80082e4:	2900      	cmp	r1, #0
 80082e6:	d041      	beq.n	800836c <_free_r+0x8c>
 80082e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ec:	1f0c      	subs	r4, r1, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfb8      	it	lt
 80082f2:	18e4      	addlt	r4, r4, r3
 80082f4:	f000 f8e0 	bl	80084b8 <__malloc_lock>
 80082f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008370 <_free_r+0x90>)
 80082fa:	6813      	ldr	r3, [r2, #0]
 80082fc:	b933      	cbnz	r3, 800830c <_free_r+0x2c>
 80082fe:	6063      	str	r3, [r4, #4]
 8008300:	6014      	str	r4, [r2, #0]
 8008302:	4628      	mov	r0, r5
 8008304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008308:	f000 b8dc 	b.w	80084c4 <__malloc_unlock>
 800830c:	42a3      	cmp	r3, r4
 800830e:	d908      	bls.n	8008322 <_free_r+0x42>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	1821      	adds	r1, r4, r0
 8008314:	428b      	cmp	r3, r1
 8008316:	bf01      	itttt	eq
 8008318:	6819      	ldreq	r1, [r3, #0]
 800831a:	685b      	ldreq	r3, [r3, #4]
 800831c:	1809      	addeq	r1, r1, r0
 800831e:	6021      	streq	r1, [r4, #0]
 8008320:	e7ed      	b.n	80082fe <_free_r+0x1e>
 8008322:	461a      	mov	r2, r3
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	b10b      	cbz	r3, 800832c <_free_r+0x4c>
 8008328:	42a3      	cmp	r3, r4
 800832a:	d9fa      	bls.n	8008322 <_free_r+0x42>
 800832c:	6811      	ldr	r1, [r2, #0]
 800832e:	1850      	adds	r0, r2, r1
 8008330:	42a0      	cmp	r0, r4
 8008332:	d10b      	bne.n	800834c <_free_r+0x6c>
 8008334:	6820      	ldr	r0, [r4, #0]
 8008336:	4401      	add	r1, r0
 8008338:	1850      	adds	r0, r2, r1
 800833a:	4283      	cmp	r3, r0
 800833c:	6011      	str	r1, [r2, #0]
 800833e:	d1e0      	bne.n	8008302 <_free_r+0x22>
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	6053      	str	r3, [r2, #4]
 8008346:	4408      	add	r0, r1
 8008348:	6010      	str	r0, [r2, #0]
 800834a:	e7da      	b.n	8008302 <_free_r+0x22>
 800834c:	d902      	bls.n	8008354 <_free_r+0x74>
 800834e:	230c      	movs	r3, #12
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	e7d6      	b.n	8008302 <_free_r+0x22>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	1821      	adds	r1, r4, r0
 8008358:	428b      	cmp	r3, r1
 800835a:	bf04      	itt	eq
 800835c:	6819      	ldreq	r1, [r3, #0]
 800835e:	685b      	ldreq	r3, [r3, #4]
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	bf04      	itt	eq
 8008364:	1809      	addeq	r1, r1, r0
 8008366:	6021      	streq	r1, [r4, #0]
 8008368:	6054      	str	r4, [r2, #4]
 800836a:	e7ca      	b.n	8008302 <_free_r+0x22>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	bf00      	nop
 8008370:	20001c78 	.word	0x20001c78

08008374 <sbrk_aligned>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4e0f      	ldr	r6, [pc, #60]	@ (80083b4 <sbrk_aligned+0x40>)
 8008378:	460c      	mov	r4, r1
 800837a:	6831      	ldr	r1, [r6, #0]
 800837c:	4605      	mov	r5, r0
 800837e:	b911      	cbnz	r1, 8008386 <sbrk_aligned+0x12>
 8008380:	f000 fca6 	bl	8008cd0 <_sbrk_r>
 8008384:	6030      	str	r0, [r6, #0]
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 fca1 	bl	8008cd0 <_sbrk_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d103      	bne.n	800839a <sbrk_aligned+0x26>
 8008392:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008396:	4620      	mov	r0, r4
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	1cc4      	adds	r4, r0, #3
 800839c:	f024 0403 	bic.w	r4, r4, #3
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d0f8      	beq.n	8008396 <sbrk_aligned+0x22>
 80083a4:	1a21      	subs	r1, r4, r0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 fc92 	bl	8008cd0 <_sbrk_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1f2      	bne.n	8008396 <sbrk_aligned+0x22>
 80083b0:	e7ef      	b.n	8008392 <sbrk_aligned+0x1e>
 80083b2:	bf00      	nop
 80083b4:	20001c74 	.word	0x20001c74

080083b8 <_malloc_r>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	4606      	mov	r6, r0
 80083ce:	db01      	blt.n	80083d4 <_malloc_r+0x1c>
 80083d0:	42a9      	cmp	r1, r5
 80083d2:	d904      	bls.n	80083de <_malloc_r+0x26>
 80083d4:	230c      	movs	r3, #12
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b4 <_malloc_r+0xfc>
 80083e2:	f000 f869 	bl	80084b8 <__malloc_lock>
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	461c      	mov	r4, r3
 80083ec:	bb44      	cbnz	r4, 8008440 <_malloc_r+0x88>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff ffbf 	bl	8008374 <sbrk_aligned>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	4604      	mov	r4, r0
 80083fa:	d158      	bne.n	80084ae <_malloc_r+0xf6>
 80083fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008400:	4627      	mov	r7, r4
 8008402:	2f00      	cmp	r7, #0
 8008404:	d143      	bne.n	800848e <_malloc_r+0xd6>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d04b      	beq.n	80084a2 <_malloc_r+0xea>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4639      	mov	r1, r7
 800840e:	4630      	mov	r0, r6
 8008410:	eb04 0903 	add.w	r9, r4, r3
 8008414:	f000 fc5c 	bl	8008cd0 <_sbrk_r>
 8008418:	4581      	cmp	r9, r0
 800841a:	d142      	bne.n	80084a2 <_malloc_r+0xea>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	1a6d      	subs	r5, r5, r1
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ffa6 	bl	8008374 <sbrk_aligned>
 8008428:	3001      	adds	r0, #1
 800842a:	d03a      	beq.n	80084a2 <_malloc_r+0xea>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	442b      	add	r3, r5
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	f8d8 3000 	ldr.w	r3, [r8]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	bb62      	cbnz	r2, 8008494 <_malloc_r+0xdc>
 800843a:	f8c8 7000 	str.w	r7, [r8]
 800843e:	e00f      	b.n	8008460 <_malloc_r+0xa8>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	1b52      	subs	r2, r2, r5
 8008444:	d420      	bmi.n	8008488 <_malloc_r+0xd0>
 8008446:	2a0b      	cmp	r2, #11
 8008448:	d917      	bls.n	800847a <_malloc_r+0xc2>
 800844a:	1961      	adds	r1, r4, r5
 800844c:	42a3      	cmp	r3, r4
 800844e:	6025      	str	r5, [r4, #0]
 8008450:	bf18      	it	ne
 8008452:	6059      	strne	r1, [r3, #4]
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	bf08      	it	eq
 8008458:	f8c8 1000 	streq.w	r1, [r8]
 800845c:	5162      	str	r2, [r4, r5]
 800845e:	604b      	str	r3, [r1, #4]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f82f 	bl	80084c4 <__malloc_unlock>
 8008466:	f104 000b 	add.w	r0, r4, #11
 800846a:	1d23      	adds	r3, r4, #4
 800846c:	f020 0007 	bic.w	r0, r0, #7
 8008470:	1ac2      	subs	r2, r0, r3
 8008472:	bf1c      	itt	ne
 8008474:	1a1b      	subne	r3, r3, r0
 8008476:	50a3      	strne	r3, [r4, r2]
 8008478:	e7af      	b.n	80083da <_malloc_r+0x22>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	bf0c      	ite	eq
 8008480:	f8c8 2000 	streq.w	r2, [r8]
 8008484:	605a      	strne	r2, [r3, #4]
 8008486:	e7eb      	b.n	8008460 <_malloc_r+0xa8>
 8008488:	4623      	mov	r3, r4
 800848a:	6864      	ldr	r4, [r4, #4]
 800848c:	e7ae      	b.n	80083ec <_malloc_r+0x34>
 800848e:	463c      	mov	r4, r7
 8008490:	687f      	ldr	r7, [r7, #4]
 8008492:	e7b6      	b.n	8008402 <_malloc_r+0x4a>
 8008494:	461a      	mov	r2, r3
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	42a3      	cmp	r3, r4
 800849a:	d1fb      	bne.n	8008494 <_malloc_r+0xdc>
 800849c:	2300      	movs	r3, #0
 800849e:	6053      	str	r3, [r2, #4]
 80084a0:	e7de      	b.n	8008460 <_malloc_r+0xa8>
 80084a2:	230c      	movs	r3, #12
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 f80c 	bl	80084c4 <__malloc_unlock>
 80084ac:	e794      	b.n	80083d8 <_malloc_r+0x20>
 80084ae:	6005      	str	r5, [r0, #0]
 80084b0:	e7d6      	b.n	8008460 <_malloc_r+0xa8>
 80084b2:	bf00      	nop
 80084b4:	20001c78 	.word	0x20001c78

080084b8 <__malloc_lock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__malloc_lock+0x8>)
 80084ba:	f7ff bf00 	b.w	80082be <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20001c70 	.word	0x20001c70

080084c4 <__malloc_unlock>:
 80084c4:	4801      	ldr	r0, [pc, #4]	@ (80084cc <__malloc_unlock+0x8>)
 80084c6:	f7ff befb 	b.w	80082c0 <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20001c70 	.word	0x20001c70

080084d0 <__sfputc_r>:
 80084d0:	6893      	ldr	r3, [r2, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	b410      	push	{r4}
 80084d8:	6093      	str	r3, [r2, #8]
 80084da:	da08      	bge.n	80084ee <__sfputc_r+0x1e>
 80084dc:	6994      	ldr	r4, [r2, #24]
 80084de:	42a3      	cmp	r3, r4
 80084e0:	db01      	blt.n	80084e6 <__sfputc_r+0x16>
 80084e2:	290a      	cmp	r1, #10
 80084e4:	d103      	bne.n	80084ee <__sfputc_r+0x1e>
 80084e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ea:	f7ff bdda 	b.w	80080a2 <__swbuf_r>
 80084ee:	6813      	ldr	r3, [r2, #0]
 80084f0:	1c58      	adds	r0, r3, #1
 80084f2:	6010      	str	r0, [r2, #0]
 80084f4:	7019      	strb	r1, [r3, #0]
 80084f6:	4608      	mov	r0, r1
 80084f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <__sfputs_r>:
 80084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008500:	4606      	mov	r6, r0
 8008502:	460f      	mov	r7, r1
 8008504:	4614      	mov	r4, r2
 8008506:	18d5      	adds	r5, r2, r3
 8008508:	42ac      	cmp	r4, r5
 800850a:	d101      	bne.n	8008510 <__sfputs_r+0x12>
 800850c:	2000      	movs	r0, #0
 800850e:	e007      	b.n	8008520 <__sfputs_r+0x22>
 8008510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008514:	463a      	mov	r2, r7
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ffda 	bl	80084d0 <__sfputc_r>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d1f3      	bne.n	8008508 <__sfputs_r+0xa>
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008524 <_vfiprintf_r>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	460d      	mov	r5, r1
 800852a:	b09d      	sub	sp, #116	@ 0x74
 800852c:	4614      	mov	r4, r2
 800852e:	4698      	mov	r8, r3
 8008530:	4606      	mov	r6, r0
 8008532:	b118      	cbz	r0, 800853c <_vfiprintf_r+0x18>
 8008534:	6a03      	ldr	r3, [r0, #32]
 8008536:	b90b      	cbnz	r3, 800853c <_vfiprintf_r+0x18>
 8008538:	f7ff fcca 	bl	8007ed0 <__sinit>
 800853c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800853e:	07d9      	lsls	r1, r3, #31
 8008540:	d405      	bmi.n	800854e <_vfiprintf_r+0x2a>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	059a      	lsls	r2, r3, #22
 8008546:	d402      	bmi.n	800854e <_vfiprintf_r+0x2a>
 8008548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854a:	f7ff feb8 	bl	80082be <__retarget_lock_acquire_recursive>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	071b      	lsls	r3, r3, #28
 8008552:	d501      	bpl.n	8008558 <_vfiprintf_r+0x34>
 8008554:	692b      	ldr	r3, [r5, #16]
 8008556:	b99b      	cbnz	r3, 8008580 <_vfiprintf_r+0x5c>
 8008558:	4629      	mov	r1, r5
 800855a:	4630      	mov	r0, r6
 800855c:	f7ff fde0 	bl	8008120 <__swsetup_r>
 8008560:	b170      	cbz	r0, 8008580 <_vfiprintf_r+0x5c>
 8008562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008564:	07dc      	lsls	r4, r3, #31
 8008566:	d504      	bpl.n	8008572 <_vfiprintf_r+0x4e>
 8008568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800856c:	b01d      	add	sp, #116	@ 0x74
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	0598      	lsls	r0, r3, #22
 8008576:	d4f7      	bmi.n	8008568 <_vfiprintf_r+0x44>
 8008578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857a:	f7ff fea1 	bl	80082c0 <__retarget_lock_release_recursive>
 800857e:	e7f3      	b.n	8008568 <_vfiprintf_r+0x44>
 8008580:	2300      	movs	r3, #0
 8008582:	9309      	str	r3, [sp, #36]	@ 0x24
 8008584:	2320      	movs	r3, #32
 8008586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800858a:	f8cd 800c 	str.w	r8, [sp, #12]
 800858e:	2330      	movs	r3, #48	@ 0x30
 8008590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008740 <_vfiprintf_r+0x21c>
 8008594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008598:	f04f 0901 	mov.w	r9, #1
 800859c:	4623      	mov	r3, r4
 800859e:	469a      	mov	sl, r3
 80085a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a4:	b10a      	cbz	r2, 80085aa <_vfiprintf_r+0x86>
 80085a6:	2a25      	cmp	r2, #37	@ 0x25
 80085a8:	d1f9      	bne.n	800859e <_vfiprintf_r+0x7a>
 80085aa:	ebba 0b04 	subs.w	fp, sl, r4
 80085ae:	d00b      	beq.n	80085c8 <_vfiprintf_r+0xa4>
 80085b0:	465b      	mov	r3, fp
 80085b2:	4622      	mov	r2, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	4630      	mov	r0, r6
 80085b8:	f7ff ffa1 	bl	80084fe <__sfputs_r>
 80085bc:	3001      	adds	r0, #1
 80085be:	f000 80a7 	beq.w	8008710 <_vfiprintf_r+0x1ec>
 80085c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c4:	445a      	add	r2, fp
 80085c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 809f 	beq.w	8008710 <_vfiprintf_r+0x1ec>
 80085d2:	2300      	movs	r3, #0
 80085d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085dc:	f10a 0a01 	add.w	sl, sl, #1
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80085ea:	4654      	mov	r4, sl
 80085ec:	2205      	movs	r2, #5
 80085ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f2:	4853      	ldr	r0, [pc, #332]	@ (8008740 <_vfiprintf_r+0x21c>)
 80085f4:	f7f7 fe14 	bl	8000220 <memchr>
 80085f8:	9a04      	ldr	r2, [sp, #16]
 80085fa:	b9d8      	cbnz	r0, 8008634 <_vfiprintf_r+0x110>
 80085fc:	06d1      	lsls	r1, r2, #27
 80085fe:	bf44      	itt	mi
 8008600:	2320      	movmi	r3, #32
 8008602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008606:	0713      	lsls	r3, r2, #28
 8008608:	bf44      	itt	mi
 800860a:	232b      	movmi	r3, #43	@ 0x2b
 800860c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008610:	f89a 3000 	ldrb.w	r3, [sl]
 8008614:	2b2a      	cmp	r3, #42	@ 0x2a
 8008616:	d015      	beq.n	8008644 <_vfiprintf_r+0x120>
 8008618:	9a07      	ldr	r2, [sp, #28]
 800861a:	4654      	mov	r4, sl
 800861c:	2000      	movs	r0, #0
 800861e:	f04f 0c0a 	mov.w	ip, #10
 8008622:	4621      	mov	r1, r4
 8008624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008628:	3b30      	subs	r3, #48	@ 0x30
 800862a:	2b09      	cmp	r3, #9
 800862c:	d94b      	bls.n	80086c6 <_vfiprintf_r+0x1a2>
 800862e:	b1b0      	cbz	r0, 800865e <_vfiprintf_r+0x13a>
 8008630:	9207      	str	r2, [sp, #28]
 8008632:	e014      	b.n	800865e <_vfiprintf_r+0x13a>
 8008634:	eba0 0308 	sub.w	r3, r0, r8
 8008638:	fa09 f303 	lsl.w	r3, r9, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	46a2      	mov	sl, r4
 8008642:	e7d2      	b.n	80085ea <_vfiprintf_r+0xc6>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	1d19      	adds	r1, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	9103      	str	r1, [sp, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bfbb      	ittet	lt
 8008650:	425b      	neglt	r3, r3
 8008652:	f042 0202 	orrlt.w	r2, r2, #2
 8008656:	9307      	strge	r3, [sp, #28]
 8008658:	9307      	strlt	r3, [sp, #28]
 800865a:	bfb8      	it	lt
 800865c:	9204      	strlt	r2, [sp, #16]
 800865e:	7823      	ldrb	r3, [r4, #0]
 8008660:	2b2e      	cmp	r3, #46	@ 0x2e
 8008662:	d10a      	bne.n	800867a <_vfiprintf_r+0x156>
 8008664:	7863      	ldrb	r3, [r4, #1]
 8008666:	2b2a      	cmp	r3, #42	@ 0x2a
 8008668:	d132      	bne.n	80086d0 <_vfiprintf_r+0x1ac>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	9203      	str	r2, [sp, #12]
 8008672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008676:	3402      	adds	r4, #2
 8008678:	9305      	str	r3, [sp, #20]
 800867a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008750 <_vfiprintf_r+0x22c>
 800867e:	7821      	ldrb	r1, [r4, #0]
 8008680:	2203      	movs	r2, #3
 8008682:	4650      	mov	r0, sl
 8008684:	f7f7 fdcc 	bl	8000220 <memchr>
 8008688:	b138      	cbz	r0, 800869a <_vfiprintf_r+0x176>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	eba0 000a 	sub.w	r0, r0, sl
 8008690:	2240      	movs	r2, #64	@ 0x40
 8008692:	4082      	lsls	r2, r0
 8008694:	4313      	orrs	r3, r2
 8008696:	3401      	adds	r4, #1
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869e:	4829      	ldr	r0, [pc, #164]	@ (8008744 <_vfiprintf_r+0x220>)
 80086a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086a4:	2206      	movs	r2, #6
 80086a6:	f7f7 fdbb 	bl	8000220 <memchr>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d03f      	beq.n	800872e <_vfiprintf_r+0x20a>
 80086ae:	4b26      	ldr	r3, [pc, #152]	@ (8008748 <_vfiprintf_r+0x224>)
 80086b0:	bb1b      	cbnz	r3, 80086fa <_vfiprintf_r+0x1d6>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	3307      	adds	r3, #7
 80086b6:	f023 0307 	bic.w	r3, r3, #7
 80086ba:	3308      	adds	r3, #8
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	443b      	add	r3, r7
 80086c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c4:	e76a      	b.n	800859c <_vfiprintf_r+0x78>
 80086c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ca:	460c      	mov	r4, r1
 80086cc:	2001      	movs	r0, #1
 80086ce:	e7a8      	b.n	8008622 <_vfiprintf_r+0xfe>
 80086d0:	2300      	movs	r3, #0
 80086d2:	3401      	adds	r4, #1
 80086d4:	9305      	str	r3, [sp, #20]
 80086d6:	4619      	mov	r1, r3
 80086d8:	f04f 0c0a 	mov.w	ip, #10
 80086dc:	4620      	mov	r0, r4
 80086de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e2:	3a30      	subs	r2, #48	@ 0x30
 80086e4:	2a09      	cmp	r2, #9
 80086e6:	d903      	bls.n	80086f0 <_vfiprintf_r+0x1cc>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0c6      	beq.n	800867a <_vfiprintf_r+0x156>
 80086ec:	9105      	str	r1, [sp, #20]
 80086ee:	e7c4      	b.n	800867a <_vfiprintf_r+0x156>
 80086f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f4:	4604      	mov	r4, r0
 80086f6:	2301      	movs	r3, #1
 80086f8:	e7f0      	b.n	80086dc <_vfiprintf_r+0x1b8>
 80086fa:	ab03      	add	r3, sp, #12
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	462a      	mov	r2, r5
 8008700:	4b12      	ldr	r3, [pc, #72]	@ (800874c <_vfiprintf_r+0x228>)
 8008702:	a904      	add	r1, sp, #16
 8008704:	4630      	mov	r0, r6
 8008706:	f3af 8000 	nop.w
 800870a:	4607      	mov	r7, r0
 800870c:	1c78      	adds	r0, r7, #1
 800870e:	d1d6      	bne.n	80086be <_vfiprintf_r+0x19a>
 8008710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d405      	bmi.n	8008722 <_vfiprintf_r+0x1fe>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	059a      	lsls	r2, r3, #22
 800871a:	d402      	bmi.n	8008722 <_vfiprintf_r+0x1fe>
 800871c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871e:	f7ff fdcf 	bl	80082c0 <__retarget_lock_release_recursive>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	065b      	lsls	r3, r3, #25
 8008726:	f53f af1f 	bmi.w	8008568 <_vfiprintf_r+0x44>
 800872a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800872c:	e71e      	b.n	800856c <_vfiprintf_r+0x48>
 800872e:	ab03      	add	r3, sp, #12
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	462a      	mov	r2, r5
 8008734:	4b05      	ldr	r3, [pc, #20]	@ (800874c <_vfiprintf_r+0x228>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	4630      	mov	r0, r6
 800873a:	f000 f879 	bl	8008830 <_printf_i>
 800873e:	e7e4      	b.n	800870a <_vfiprintf_r+0x1e6>
 8008740:	08008e1c 	.word	0x08008e1c
 8008744:	08008e26 	.word	0x08008e26
 8008748:	00000000 	.word	0x00000000
 800874c:	080084ff 	.word	0x080084ff
 8008750:	08008e22 	.word	0x08008e22

08008754 <_printf_common>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	4616      	mov	r6, r2
 800875a:	4698      	mov	r8, r3
 800875c:	688a      	ldr	r2, [r1, #8]
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008764:	4293      	cmp	r3, r2
 8008766:	bfb8      	it	lt
 8008768:	4613      	movlt	r3, r2
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008770:	4607      	mov	r7, r0
 8008772:	460c      	mov	r4, r1
 8008774:	b10a      	cbz	r2, 800877a <_printf_common+0x26>
 8008776:	3301      	adds	r3, #1
 8008778:	6033      	str	r3, [r6, #0]
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	0699      	lsls	r1, r3, #26
 800877e:	bf42      	ittt	mi
 8008780:	6833      	ldrmi	r3, [r6, #0]
 8008782:	3302      	addmi	r3, #2
 8008784:	6033      	strmi	r3, [r6, #0]
 8008786:	6825      	ldr	r5, [r4, #0]
 8008788:	f015 0506 	ands.w	r5, r5, #6
 800878c:	d106      	bne.n	800879c <_printf_common+0x48>
 800878e:	f104 0a19 	add.w	sl, r4, #25
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	6832      	ldr	r2, [r6, #0]
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	42ab      	cmp	r3, r5
 800879a:	dc26      	bgt.n	80087ea <_printf_common+0x96>
 800879c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087a0:	6822      	ldr	r2, [r4, #0]
 80087a2:	3b00      	subs	r3, #0
 80087a4:	bf18      	it	ne
 80087a6:	2301      	movne	r3, #1
 80087a8:	0692      	lsls	r2, r2, #26
 80087aa:	d42b      	bmi.n	8008804 <_printf_common+0xb0>
 80087ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087b0:	4641      	mov	r1, r8
 80087b2:	4638      	mov	r0, r7
 80087b4:	47c8      	blx	r9
 80087b6:	3001      	adds	r0, #1
 80087b8:	d01e      	beq.n	80087f8 <_printf_common+0xa4>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	f003 0306 	and.w	r3, r3, #6
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	bf02      	ittt	eq
 80087c6:	68e5      	ldreq	r5, [r4, #12]
 80087c8:	6833      	ldreq	r3, [r6, #0]
 80087ca:	1aed      	subeq	r5, r5, r3
 80087cc:	68a3      	ldr	r3, [r4, #8]
 80087ce:	bf0c      	ite	eq
 80087d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d4:	2500      	movne	r5, #0
 80087d6:	4293      	cmp	r3, r2
 80087d8:	bfc4      	itt	gt
 80087da:	1a9b      	subgt	r3, r3, r2
 80087dc:	18ed      	addgt	r5, r5, r3
 80087de:	2600      	movs	r6, #0
 80087e0:	341a      	adds	r4, #26
 80087e2:	42b5      	cmp	r5, r6
 80087e4:	d11a      	bne.n	800881c <_printf_common+0xc8>
 80087e6:	2000      	movs	r0, #0
 80087e8:	e008      	b.n	80087fc <_printf_common+0xa8>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4652      	mov	r2, sl
 80087ee:	4641      	mov	r1, r8
 80087f0:	4638      	mov	r0, r7
 80087f2:	47c8      	blx	r9
 80087f4:	3001      	adds	r0, #1
 80087f6:	d103      	bne.n	8008800 <_printf_common+0xac>
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008800:	3501      	adds	r5, #1
 8008802:	e7c6      	b.n	8008792 <_printf_common+0x3e>
 8008804:	18e1      	adds	r1, r4, r3
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	2030      	movs	r0, #48	@ 0x30
 800880a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800880e:	4422      	add	r2, r4
 8008810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008818:	3302      	adds	r3, #2
 800881a:	e7c7      	b.n	80087ac <_printf_common+0x58>
 800881c:	2301      	movs	r3, #1
 800881e:	4622      	mov	r2, r4
 8008820:	4641      	mov	r1, r8
 8008822:	4638      	mov	r0, r7
 8008824:	47c8      	blx	r9
 8008826:	3001      	adds	r0, #1
 8008828:	d0e6      	beq.n	80087f8 <_printf_common+0xa4>
 800882a:	3601      	adds	r6, #1
 800882c:	e7d9      	b.n	80087e2 <_printf_common+0x8e>
	...

08008830 <_printf_i>:
 8008830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	7e0f      	ldrb	r7, [r1, #24]
 8008836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008838:	2f78      	cmp	r7, #120	@ 0x78
 800883a:	4691      	mov	r9, r2
 800883c:	4680      	mov	r8, r0
 800883e:	460c      	mov	r4, r1
 8008840:	469a      	mov	sl, r3
 8008842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008846:	d807      	bhi.n	8008858 <_printf_i+0x28>
 8008848:	2f62      	cmp	r7, #98	@ 0x62
 800884a:	d80a      	bhi.n	8008862 <_printf_i+0x32>
 800884c:	2f00      	cmp	r7, #0
 800884e:	f000 80d2 	beq.w	80089f6 <_printf_i+0x1c6>
 8008852:	2f58      	cmp	r7, #88	@ 0x58
 8008854:	f000 80b9 	beq.w	80089ca <_printf_i+0x19a>
 8008858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800885c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008860:	e03a      	b.n	80088d8 <_printf_i+0xa8>
 8008862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008866:	2b15      	cmp	r3, #21
 8008868:	d8f6      	bhi.n	8008858 <_printf_i+0x28>
 800886a:	a101      	add	r1, pc, #4	@ (adr r1, 8008870 <_printf_i+0x40>)
 800886c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008870:	080088c9 	.word	0x080088c9
 8008874:	080088dd 	.word	0x080088dd
 8008878:	08008859 	.word	0x08008859
 800887c:	08008859 	.word	0x08008859
 8008880:	08008859 	.word	0x08008859
 8008884:	08008859 	.word	0x08008859
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008859 	.word	0x08008859
 8008890:	08008859 	.word	0x08008859
 8008894:	08008859 	.word	0x08008859
 8008898:	08008859 	.word	0x08008859
 800889c:	080089dd 	.word	0x080089dd
 80088a0:	08008907 	.word	0x08008907
 80088a4:	08008997 	.word	0x08008997
 80088a8:	08008859 	.word	0x08008859
 80088ac:	08008859 	.word	0x08008859
 80088b0:	080089ff 	.word	0x080089ff
 80088b4:	08008859 	.word	0x08008859
 80088b8:	08008907 	.word	0x08008907
 80088bc:	08008859 	.word	0x08008859
 80088c0:	08008859 	.word	0x08008859
 80088c4:	0800899f 	.word	0x0800899f
 80088c8:	6833      	ldr	r3, [r6, #0]
 80088ca:	1d1a      	adds	r2, r3, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6032      	str	r2, [r6, #0]
 80088d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088d8:	2301      	movs	r3, #1
 80088da:	e09d      	b.n	8008a18 <_printf_i+0x1e8>
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	1d19      	adds	r1, r3, #4
 80088e2:	6031      	str	r1, [r6, #0]
 80088e4:	0606      	lsls	r6, r0, #24
 80088e6:	d501      	bpl.n	80088ec <_printf_i+0xbc>
 80088e8:	681d      	ldr	r5, [r3, #0]
 80088ea:	e003      	b.n	80088f4 <_printf_i+0xc4>
 80088ec:	0645      	lsls	r5, r0, #25
 80088ee:	d5fb      	bpl.n	80088e8 <_printf_i+0xb8>
 80088f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088f4:	2d00      	cmp	r5, #0
 80088f6:	da03      	bge.n	8008900 <_printf_i+0xd0>
 80088f8:	232d      	movs	r3, #45	@ 0x2d
 80088fa:	426d      	negs	r5, r5
 80088fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008900:	4859      	ldr	r0, [pc, #356]	@ (8008a68 <_printf_i+0x238>)
 8008902:	230a      	movs	r3, #10
 8008904:	e011      	b.n	800892a <_printf_i+0xfa>
 8008906:	6821      	ldr	r1, [r4, #0]
 8008908:	6833      	ldr	r3, [r6, #0]
 800890a:	0608      	lsls	r0, r1, #24
 800890c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008910:	d402      	bmi.n	8008918 <_printf_i+0xe8>
 8008912:	0649      	lsls	r1, r1, #25
 8008914:	bf48      	it	mi
 8008916:	b2ad      	uxthmi	r5, r5
 8008918:	2f6f      	cmp	r7, #111	@ 0x6f
 800891a:	4853      	ldr	r0, [pc, #332]	@ (8008a68 <_printf_i+0x238>)
 800891c:	6033      	str	r3, [r6, #0]
 800891e:	bf14      	ite	ne
 8008920:	230a      	movne	r3, #10
 8008922:	2308      	moveq	r3, #8
 8008924:	2100      	movs	r1, #0
 8008926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800892a:	6866      	ldr	r6, [r4, #4]
 800892c:	60a6      	str	r6, [r4, #8]
 800892e:	2e00      	cmp	r6, #0
 8008930:	bfa2      	ittt	ge
 8008932:	6821      	ldrge	r1, [r4, #0]
 8008934:	f021 0104 	bicge.w	r1, r1, #4
 8008938:	6021      	strge	r1, [r4, #0]
 800893a:	b90d      	cbnz	r5, 8008940 <_printf_i+0x110>
 800893c:	2e00      	cmp	r6, #0
 800893e:	d04b      	beq.n	80089d8 <_printf_i+0x1a8>
 8008940:	4616      	mov	r6, r2
 8008942:	fbb5 f1f3 	udiv	r1, r5, r3
 8008946:	fb03 5711 	mls	r7, r3, r1, r5
 800894a:	5dc7      	ldrb	r7, [r0, r7]
 800894c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008950:	462f      	mov	r7, r5
 8008952:	42bb      	cmp	r3, r7
 8008954:	460d      	mov	r5, r1
 8008956:	d9f4      	bls.n	8008942 <_printf_i+0x112>
 8008958:	2b08      	cmp	r3, #8
 800895a:	d10b      	bne.n	8008974 <_printf_i+0x144>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	07df      	lsls	r7, r3, #31
 8008960:	d508      	bpl.n	8008974 <_printf_i+0x144>
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	6861      	ldr	r1, [r4, #4]
 8008966:	4299      	cmp	r1, r3
 8008968:	bfde      	ittt	le
 800896a:	2330      	movle	r3, #48	@ 0x30
 800896c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008970:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008974:	1b92      	subs	r2, r2, r6
 8008976:	6122      	str	r2, [r4, #16]
 8008978:	f8cd a000 	str.w	sl, [sp]
 800897c:	464b      	mov	r3, r9
 800897e:	aa03      	add	r2, sp, #12
 8008980:	4621      	mov	r1, r4
 8008982:	4640      	mov	r0, r8
 8008984:	f7ff fee6 	bl	8008754 <_printf_common>
 8008988:	3001      	adds	r0, #1
 800898a:	d14a      	bne.n	8008a22 <_printf_i+0x1f2>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008990:	b004      	add	sp, #16
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	f043 0320 	orr.w	r3, r3, #32
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	4833      	ldr	r0, [pc, #204]	@ (8008a6c <_printf_i+0x23c>)
 80089a0:	2778      	movs	r7, #120	@ 0x78
 80089a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	6831      	ldr	r1, [r6, #0]
 80089aa:	061f      	lsls	r7, r3, #24
 80089ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80089b0:	d402      	bmi.n	80089b8 <_printf_i+0x188>
 80089b2:	065f      	lsls	r7, r3, #25
 80089b4:	bf48      	it	mi
 80089b6:	b2ad      	uxthmi	r5, r5
 80089b8:	6031      	str	r1, [r6, #0]
 80089ba:	07d9      	lsls	r1, r3, #31
 80089bc:	bf44      	itt	mi
 80089be:	f043 0320 	orrmi.w	r3, r3, #32
 80089c2:	6023      	strmi	r3, [r4, #0]
 80089c4:	b11d      	cbz	r5, 80089ce <_printf_i+0x19e>
 80089c6:	2310      	movs	r3, #16
 80089c8:	e7ac      	b.n	8008924 <_printf_i+0xf4>
 80089ca:	4827      	ldr	r0, [pc, #156]	@ (8008a68 <_printf_i+0x238>)
 80089cc:	e7e9      	b.n	80089a2 <_printf_i+0x172>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	f023 0320 	bic.w	r3, r3, #32
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	e7f6      	b.n	80089c6 <_printf_i+0x196>
 80089d8:	4616      	mov	r6, r2
 80089da:	e7bd      	b.n	8008958 <_printf_i+0x128>
 80089dc:	6833      	ldr	r3, [r6, #0]
 80089de:	6825      	ldr	r5, [r4, #0]
 80089e0:	6961      	ldr	r1, [r4, #20]
 80089e2:	1d18      	adds	r0, r3, #4
 80089e4:	6030      	str	r0, [r6, #0]
 80089e6:	062e      	lsls	r6, r5, #24
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	d501      	bpl.n	80089f0 <_printf_i+0x1c0>
 80089ec:	6019      	str	r1, [r3, #0]
 80089ee:	e002      	b.n	80089f6 <_printf_i+0x1c6>
 80089f0:	0668      	lsls	r0, r5, #25
 80089f2:	d5fb      	bpl.n	80089ec <_printf_i+0x1bc>
 80089f4:	8019      	strh	r1, [r3, #0]
 80089f6:	2300      	movs	r3, #0
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	4616      	mov	r6, r2
 80089fc:	e7bc      	b.n	8008978 <_printf_i+0x148>
 80089fe:	6833      	ldr	r3, [r6, #0]
 8008a00:	1d1a      	adds	r2, r3, #4
 8008a02:	6032      	str	r2, [r6, #0]
 8008a04:	681e      	ldr	r6, [r3, #0]
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7f7 fc08 	bl	8000220 <memchr>
 8008a10:	b108      	cbz	r0, 8008a16 <_printf_i+0x1e6>
 8008a12:	1b80      	subs	r0, r0, r6
 8008a14:	6060      	str	r0, [r4, #4]
 8008a16:	6863      	ldr	r3, [r4, #4]
 8008a18:	6123      	str	r3, [r4, #16]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a20:	e7aa      	b.n	8008978 <_printf_i+0x148>
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	4632      	mov	r2, r6
 8008a26:	4649      	mov	r1, r9
 8008a28:	4640      	mov	r0, r8
 8008a2a:	47d0      	blx	sl
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d0ad      	beq.n	800898c <_printf_i+0x15c>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	079b      	lsls	r3, r3, #30
 8008a34:	d413      	bmi.n	8008a5e <_printf_i+0x22e>
 8008a36:	68e0      	ldr	r0, [r4, #12]
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	4298      	cmp	r0, r3
 8008a3c:	bfb8      	it	lt
 8008a3e:	4618      	movlt	r0, r3
 8008a40:	e7a6      	b.n	8008990 <_printf_i+0x160>
 8008a42:	2301      	movs	r3, #1
 8008a44:	4632      	mov	r2, r6
 8008a46:	4649      	mov	r1, r9
 8008a48:	4640      	mov	r0, r8
 8008a4a:	47d0      	blx	sl
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d09d      	beq.n	800898c <_printf_i+0x15c>
 8008a50:	3501      	adds	r5, #1
 8008a52:	68e3      	ldr	r3, [r4, #12]
 8008a54:	9903      	ldr	r1, [sp, #12]
 8008a56:	1a5b      	subs	r3, r3, r1
 8008a58:	42ab      	cmp	r3, r5
 8008a5a:	dcf2      	bgt.n	8008a42 <_printf_i+0x212>
 8008a5c:	e7eb      	b.n	8008a36 <_printf_i+0x206>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	f104 0619 	add.w	r6, r4, #25
 8008a64:	e7f5      	b.n	8008a52 <_printf_i+0x222>
 8008a66:	bf00      	nop
 8008a68:	08008e2d 	.word	0x08008e2d
 8008a6c:	08008e3e 	.word	0x08008e3e

08008a70 <__sflush_r>:
 8008a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	0716      	lsls	r6, r2, #28
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	d454      	bmi.n	8008b2a <__sflush_r+0xba>
 8008a80:	684b      	ldr	r3, [r1, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc02      	bgt.n	8008a8c <__sflush_r+0x1c>
 8008a86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dd48      	ble.n	8008b1e <__sflush_r+0xae>
 8008a8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d045      	beq.n	8008b1e <__sflush_r+0xae>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a98:	682f      	ldr	r7, [r5, #0]
 8008a9a:	6a21      	ldr	r1, [r4, #32]
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	d030      	beq.n	8008b02 <__sflush_r+0x92>
 8008aa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	0759      	lsls	r1, r3, #29
 8008aa6:	d505      	bpl.n	8008ab4 <__sflush_r+0x44>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	1ad2      	subs	r2, r2, r3
 8008aac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aae:	b10b      	cbz	r3, 8008ab4 <__sflush_r+0x44>
 8008ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ab2:	1ad2      	subs	r2, r2, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ab8:	6a21      	ldr	r1, [r4, #32]
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b0      	blx	r6
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	d106      	bne.n	8008ad2 <__sflush_r+0x62>
 8008ac4:	6829      	ldr	r1, [r5, #0]
 8008ac6:	291d      	cmp	r1, #29
 8008ac8:	d82b      	bhi.n	8008b22 <__sflush_r+0xb2>
 8008aca:	4a2a      	ldr	r2, [pc, #168]	@ (8008b74 <__sflush_r+0x104>)
 8008acc:	410a      	asrs	r2, r1
 8008ace:	07d6      	lsls	r6, r2, #31
 8008ad0:	d427      	bmi.n	8008b22 <__sflush_r+0xb2>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	6062      	str	r2, [r4, #4]
 8008ad6:	04d9      	lsls	r1, r3, #19
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	6022      	str	r2, [r4, #0]
 8008adc:	d504      	bpl.n	8008ae8 <__sflush_r+0x78>
 8008ade:	1c42      	adds	r2, r0, #1
 8008ae0:	d101      	bne.n	8008ae6 <__sflush_r+0x76>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b903      	cbnz	r3, 8008ae8 <__sflush_r+0x78>
 8008ae6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aea:	602f      	str	r7, [r5, #0]
 8008aec:	b1b9      	cbz	r1, 8008b1e <__sflush_r+0xae>
 8008aee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af2:	4299      	cmp	r1, r3
 8008af4:	d002      	beq.n	8008afc <__sflush_r+0x8c>
 8008af6:	4628      	mov	r0, r5
 8008af8:	f7ff fbf2 	bl	80082e0 <_free_r>
 8008afc:	2300      	movs	r3, #0
 8008afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b00:	e00d      	b.n	8008b1e <__sflush_r+0xae>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b0      	blx	r6
 8008b08:	4602      	mov	r2, r0
 8008b0a:	1c50      	adds	r0, r2, #1
 8008b0c:	d1c9      	bne.n	8008aa2 <__sflush_r+0x32>
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0c6      	beq.n	8008aa2 <__sflush_r+0x32>
 8008b14:	2b1d      	cmp	r3, #29
 8008b16:	d001      	beq.n	8008b1c <__sflush_r+0xac>
 8008b18:	2b16      	cmp	r3, #22
 8008b1a:	d11e      	bne.n	8008b5a <__sflush_r+0xea>
 8008b1c:	602f      	str	r7, [r5, #0]
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e022      	b.n	8008b68 <__sflush_r+0xf8>
 8008b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	e01b      	b.n	8008b62 <__sflush_r+0xf2>
 8008b2a:	690f      	ldr	r7, [r1, #16]
 8008b2c:	2f00      	cmp	r7, #0
 8008b2e:	d0f6      	beq.n	8008b1e <__sflush_r+0xae>
 8008b30:	0793      	lsls	r3, r2, #30
 8008b32:	680e      	ldr	r6, [r1, #0]
 8008b34:	bf08      	it	eq
 8008b36:	694b      	ldreq	r3, [r1, #20]
 8008b38:	600f      	str	r7, [r1, #0]
 8008b3a:	bf18      	it	ne
 8008b3c:	2300      	movne	r3, #0
 8008b3e:	eba6 0807 	sub.w	r8, r6, r7
 8008b42:	608b      	str	r3, [r1, #8]
 8008b44:	f1b8 0f00 	cmp.w	r8, #0
 8008b48:	dde9      	ble.n	8008b1e <__sflush_r+0xae>
 8008b4a:	6a21      	ldr	r1, [r4, #32]
 8008b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b4e:	4643      	mov	r3, r8
 8008b50:	463a      	mov	r2, r7
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b0      	blx	r6
 8008b56:	2800      	cmp	r0, #0
 8008b58:	dc08      	bgt.n	8008b6c <__sflush_r+0xfc>
 8008b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	4407      	add	r7, r0
 8008b6e:	eba8 0800 	sub.w	r8, r8, r0
 8008b72:	e7e7      	b.n	8008b44 <__sflush_r+0xd4>
 8008b74:	dfbffffe 	.word	0xdfbffffe

08008b78 <_fflush_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	690b      	ldr	r3, [r1, #16]
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b913      	cbnz	r3, 8008b88 <_fflush_r+0x10>
 8008b82:	2500      	movs	r5, #0
 8008b84:	4628      	mov	r0, r5
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	b118      	cbz	r0, 8008b92 <_fflush_r+0x1a>
 8008b8a:	6a03      	ldr	r3, [r0, #32]
 8008b8c:	b90b      	cbnz	r3, 8008b92 <_fflush_r+0x1a>
 8008b8e:	f7ff f99f 	bl	8007ed0 <__sinit>
 8008b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f3      	beq.n	8008b82 <_fflush_r+0xa>
 8008b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b9c:	07d0      	lsls	r0, r2, #31
 8008b9e:	d404      	bmi.n	8008baa <_fflush_r+0x32>
 8008ba0:	0599      	lsls	r1, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_fflush_r+0x32>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba6:	f7ff fb8a 	bl	80082be <__retarget_lock_acquire_recursive>
 8008baa:	4628      	mov	r0, r5
 8008bac:	4621      	mov	r1, r4
 8008bae:	f7ff ff5f 	bl	8008a70 <__sflush_r>
 8008bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bb4:	07da      	lsls	r2, r3, #31
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	d4e4      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	059b      	lsls	r3, r3, #22
 8008bbe:	d4e1      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc2:	f7ff fb7d 	bl	80082c0 <__retarget_lock_release_recursive>
 8008bc6:	e7dd      	b.n	8008b84 <_fflush_r+0xc>

08008bc8 <__swhatbuf_r>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	460c      	mov	r4, r1
 8008bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	b096      	sub	sp, #88	@ 0x58
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	461e      	mov	r6, r3
 8008bd8:	da0d      	bge.n	8008bf6 <__swhatbuf_r+0x2e>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008be0:	f04f 0100 	mov.w	r1, #0
 8008be4:	bf14      	ite	ne
 8008be6:	2340      	movne	r3, #64	@ 0x40
 8008be8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bec:	2000      	movs	r0, #0
 8008bee:	6031      	str	r1, [r6, #0]
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	b016      	add	sp, #88	@ 0x58
 8008bf4:	bd70      	pop	{r4, r5, r6, pc}
 8008bf6:	466a      	mov	r2, sp
 8008bf8:	f000 f848 	bl	8008c8c <_fstat_r>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	dbec      	blt.n	8008bda <__swhatbuf_r+0x12>
 8008c00:	9901      	ldr	r1, [sp, #4]
 8008c02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c0a:	4259      	negs	r1, r3
 8008c0c:	4159      	adcs	r1, r3
 8008c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c12:	e7eb      	b.n	8008bec <__swhatbuf_r+0x24>

08008c14 <__smakebuf_r>:
 8008c14:	898b      	ldrh	r3, [r1, #12]
 8008c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c18:	079d      	lsls	r5, r3, #30
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	d507      	bpl.n	8008c30 <__smakebuf_r+0x1c>
 8008c20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	b003      	add	sp, #12
 8008c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c30:	ab01      	add	r3, sp, #4
 8008c32:	466a      	mov	r2, sp
 8008c34:	f7ff ffc8 	bl	8008bc8 <__swhatbuf_r>
 8008c38:	9f00      	ldr	r7, [sp, #0]
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7ff fbba 	bl	80083b8 <_malloc_r>
 8008c44:	b948      	cbnz	r0, 8008c5a <__smakebuf_r+0x46>
 8008c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4a:	059a      	lsls	r2, r3, #22
 8008c4c:	d4ee      	bmi.n	8008c2c <__smakebuf_r+0x18>
 8008c4e:	f023 0303 	bic.w	r3, r3, #3
 8008c52:	f043 0302 	orr.w	r3, r3, #2
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	e7e2      	b.n	8008c20 <__smakebuf_r+0xc>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	6020      	str	r0, [r4, #0]
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c6a:	b15b      	cbz	r3, 8008c84 <__smakebuf_r+0x70>
 8008c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c70:	4630      	mov	r0, r6
 8008c72:	f000 f81d 	bl	8008cb0 <_isatty_r>
 8008c76:	b128      	cbz	r0, 8008c84 <__smakebuf_r+0x70>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f023 0303 	bic.w	r3, r3, #3
 8008c7e:	f043 0301 	orr.w	r3, r3, #1
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	431d      	orrs	r5, r3
 8008c88:	81a5      	strh	r5, [r4, #12]
 8008c8a:	e7cf      	b.n	8008c2c <__smakebuf_r+0x18>

08008c8c <_fstat_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	@ (8008cac <_fstat_r+0x20>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	f7f8 f89e 	bl	8000dda <_fstat>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d102      	bne.n	8008ca8 <_fstat_r+0x1c>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b103      	cbz	r3, 8008ca8 <_fstat_r+0x1c>
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	20001c6c 	.word	0x20001c6c

08008cb0 <_isatty_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ccc <_isatty_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7f8 f89d 	bl	8000dfa <_isatty>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_isatty_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_isatty_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20001c6c 	.word	0x20001c6c

08008cd0 <_sbrk_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d06      	ldr	r5, [pc, #24]	@ (8008cec <_sbrk_r+0x1c>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	f7f8 f8a6 	bl	8000e2c <_sbrk>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_sbrk_r+0x1a>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_sbrk_r+0x1a>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	20001c6c 	.word	0x20001c6c

08008cf0 <_init>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr

08008cfc <_fini>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	bf00      	nop
 8008d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d02:	bc08      	pop	{r3}
 8008d04:	469e      	mov	lr, r3
 8008d06:	4770      	bx	lr
